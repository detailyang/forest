var searchIndex = JSON.parse('{\
"actor_interface":{"doc":"","t":[0,6,4,13,13,13,13,0,7,6,4,13,13,13,13,0,7,6,4,13,13,13,13,0,7,6,4,13,13,13,13,4,13,13,13,13,4,13,13,13,13,3,12,12,12,12,12,12,12,12,12,12,12,4,13,13,13,13,3,12,12,12,0,6,4,13,13,13,13,3,12,12,12,12,12,12,12,12,12,12,12,4,13,13,13,13,4,13,13,13,13,3,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,0,6,4,13,13,13,13,0,7,6,4,13,13,13,13,3,12,12,0,7,6,4,13,13,13,13,0,7,6,4,13,13,13,13,4,13,13,13,13,4,13,13,13,13,17,17,7,7,7,5,5,5,5,3,12,12,17,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["account","Method","State","V0","V2","V3","V4","cron","ADDRESS","Method","State","V0","V2","V3","V4","init","ADDRESS","Method","State","V0","V2","V3","V4","market","ADDRESS","Method","State","V0","V2","V3","V4","BalanceTable","V0","V2","V3","V4","DealProposals","V0","V2","V3","V4","DealProposal","piece_cid","piece_size","verified_deal","client","provider","label","start_epoch","end_epoch","storage_price_per_epoch","provider_collateral","client_collateral","DealStates","V0","V2","V3","V4","DealState","sector_start_epoch","last_updated_epoch","slash_epoch","miner","Method","State","V0","V2","V3","V4","MinerInfo","owner","worker","new_worker","control_addresses","worker_change_epoch","peer_id","multiaddrs","window_post_proof_type","sector_size","window_post_partition_sectors","consensus_fault_elapsed","Deadline","V0","V2","V3","V4","Partition","V0","V2","V3","V4","SectorOnChainInfo","sector_number","seal_proof","sealed_cid","deal_ids","activation","expiration","deal_weight","verified_deal_weight","initial_pledge","expected_day_reward","expected_storage_pledge","SectorPreCommitOnChainInfo","info","pre_commit_deposit","pre_commit_epoch","deal_weight","verified_deal_weight","SectorPreCommitInfo","seal_proof","sector_number","sealed_cid","seal_rand_epoch","deal_ids","expiration","replace_capacity","replace_sector_deadline","replace_sector_partition","replace_sector_number","multisig","Method","State","V0","V2","V3","V4","power","ADDRESS","Method","State","V0","V2","V3","V4","Claim","raw_byte_power","quality_adj_power","reward","ADDRESS","Method","State","V0","V2","V3","V4","system","ADDRESS","Method","State","V0","V2","V3","V4","Array","V0","V2","V3","V4","Map","V0","V2","V3","V4","EPOCH_DURATION_SECONDS","EPOCHS_IN_DAY","CHAOS_ACTOR_ADDR","BURNT_FUNDS_ACTOR_ADDR","RESERVE_ADDRESS","is_builtin_actor","is_account_actor","is_singleton_actor","is_miner_actor","FilterEstimate","position","velocity","CHAIN_FINALITY","ActorVersion","V0","V2","V3","V4","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","clone","clone","default","default","eq","ne","eq","ne","fmt","fmt","fmt","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","new","load","count","get","set","delete","flush","for_each","new","load","store","set","get","contains_key","delete","flush","for_each","load","pubkey_address","load","load","map_address_to_new_id","resolve_address","into_network_name","load","escrow_table","locked_table","proposals","states","total_locked","verify_deals_for_activation","for_each","get","get","load","info","for_each_deadline","load_deadline","load_sectors","get_precommitted_sector","get_sector","deadline_info","fee_debt","num_deadlines","worker","sector_size","for_each","disputable_proof_count","partitions_posted","all_sectors","faulty_sectors","recovering_sectors","live_sectors","active_sectors","load","load","into_total_quality_adj_power","total_power","into_total_locked","miner_power","list_all_miners","miner_nominal_power_meets_consensus_minimum","total_power_smoothed","total_locked","load","into_total_storage_power_reward","pre_commit_deposit_for_power","initial_pledge_for_power","load"],"q":["actor_interface","actor_interface::account","","","","","","actor_interface","actor_interface::cron","","","","","","","actor_interface","actor_interface::init","","","","","","","actor_interface","actor_interface::market","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface","actor_interface::miner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface","actor_interface::multisig","","","","","","actor_interface","actor_interface::power","","","","","","","","","","actor_interface","actor_interface::reward","","","","","","","actor_interface","actor_interface::system","","","","","","","actor_interface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface::account","","","","","","","","","","","","actor_interface::cron","","","","","","","","","","","","actor_interface::init","","","","","","","","","","","","actor_interface::market","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface::miner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface::multisig","","","","","","","","","","","","actor_interface::power","","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface::reward","","","","","","","","","","","","actor_interface::system","","","","","","","","","","","","actor_interface","","","","","","","","","","","","","","","","","","","","","","","","","","actor_interface::market","","","","","","","","actor_interface::miner","","","","","","","","","","","","actor_interface::power","","","","actor_interface","","","","","","actor_interface::power","actor_interface","actor_interface::power","actor_interface","actor_interface::miner","","actor_interface","","actor_interface::miner","actor_interface::power","actor_interface","actor_interface::account","actor_interface::cron","actor_interface::init","actor_interface::market","","","actor_interface::miner","","","","","actor_interface::multisig","actor_interface::power","","actor_interface::reward","actor_interface::system","actor_interface::miner","actor_interface","","","","","","","","","","","","","","","","","actor_interface::account","","actor_interface::cron","actor_interface::init","","","","actor_interface::market","","","","","","","","","","actor_interface::miner","","","","","","","","","","","","","","","","","","","","actor_interface::multisig","actor_interface::power","","","","","","","","","actor_interface::reward","","","","actor_interface::system"],"d":["","Account actor method.","Account actor state.","","","","","","Cron actor address.","Cron actor method.","Cron actor state.","","","","","","Init actor address.","Init actor method.","Init actor state.","","","","","","Market actor address.","Market actor method.","Market actor state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Miner actor method.","Miner actor state.","","","","","Static information about miner","","","","","","","","","","","","Deadline holds the state for all sectors due at a …","","","","","","","","","","","","The seal proof type implies the PoSt proofs","CommR","","Epoch during which the sector proof was accepted","Epoch during which the sector expires","Integral of active deals over sector lifetime","Integral of active verified deals over sector lifetime","Pledge collected to commit this sector","Expected one day projection of reward for sector computed …","Expected twenty day projection of reward for sector …","","","","","Integral of active deals over sector lifetime, 0 if …","Integral of active verified deals over sector lifetime","","","","CommR","","","","Whether to replace a “committed capacity” no-deal …","The committed capacity sector to replace, and its …","","","","Multisig actor method.","Multisig actor state.","","","","","","Power actor address. TODO: Select based on actors version","Power actor method. TODO: Select based on actor version","Power actor state.","","","","","","Sum of raw byte power for a miner’s sectors.","Sum of quality adjusted power for a miner’s sectors.","","Reward actor address.","Reward actor method.","Reward actor state.","","","","","","System actor address.","System actor method.","System actor state.","","","","","","","","","","","","","","","","","","","","Returns true if the code belongs to a builtin actor.","Returns true if the code belongs to an account actor.","Returns true if the code belongs to a singleton actor.","Returns true if the code belongs to a miner actoroad map with root","Gets count of elements added in the <code>Array</code>.","Get value at index of <code>Array</code>","Set value at index","Delete item from <code>Array</code> at index","flush root and return Cid used as key in block store","Iterates over each value in the <code>Array</code> and runs a function …","","Load map with root","Returns a reference to the underlying store of the <code>Map</code>.","Inserts a key-value pair into the <code>Map</code>.","Returns a reference to the value corresponding to the key.","Returns <code>true</code> if a value exists for the given key in the …","Removes a key from the <code>Map</code>, returning the value at the …","Flush root and return Cid for <code>Map</code>","Iterates over each KV in the <code>Map</code> and runs a function on …","","","","","Allocates a new ID address and stores a mapping of the …","ResolveAddress resolves an address to an ID-address, if …","","","Loads escrow table","Loads locked funds table","Deal proposals","Deal proposal meta data.","Consume state to return just total funds locked","Validates a collection of deal dealProposals for …","","","","","","Loads deadlines for a miner’s state","Loads deadline at index for a miner’s state","Loads sectors corresponding to the bitfield. If no …","Gets pre committed on chain info","Loads a specific sector number","Loads deadline at index for a miner’s state","Gets fee debt of miner state","Number of post period deadlines.","","","For each partition of the deadline","","","","","","","","","","Consume state to return just total quality adj power","Returns the total power claim.","Consume state to return total locked funds","Loads power for a given miner, if exists.","Loads power for a given miner, if exists.","Checks power actor state for if miner meets minimum …","Returns this_epoch_qa_power_smoothed from the state.","Returns total locked funds","","Consume state to return just storage power reward","","",""],"i":[0,0,0,1,1,1,1,0,0,0,0,2,2,2,2,0,0,0,0,3,3,3,3,0,0,0,0,4,4,4,4,0,5,5,5,5,0,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,0,9,9,9,0,0,0,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,0,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,0,0,0,17,17,17,17,0,0,0,0,18,18,18,18,0,19,19,0,0,0,0,20,20,20,20,0,0,0,0,21,21,21,21,0,22,22,22,22,0,23,23,23,23,0,0,0,0,0,0,0,0,0,0,24,24,0,0,25,25,25,25,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,7,7,7,7,9,9,9,9,14,14,14,14,15,15,15,15,16,16,16,16,19,19,19,19,24,24,24,24,25,25,19,24,19,24,11,11,24,24,11,19,24,1,2,3,4,7,9,10,11,14,15,16,17,18,19,20,21,16,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,1,1,2,3,3,3,3,4,4,4,4,4,4,4,6,8,5,10,10,10,10,10,10,10,10,10,10,11,11,12,12,12,13,13,13,13,13,17,18,18,18,18,18,18,18,18,18,20,20,20,20,21],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["dealproposal",3]]],[[["dealproposal",3]]],[[["dealproposal",3]]],[[["dealproposal",3]]],[[["dealstate",3]]],[[["dealstate",3]]],[[["dealstate",3]]],[[["dealstate",3]]],[[["sectoronchaininfo",3]]],[[["sectoronchaininfo",3]]],[[["sectoronchaininfo",3]]],[[["sectoronchaininfo",3]]],[[["sectorprecommitonchaininfo",3]]],[[["sectorprecommitonchaininfo",3]]],[[["sectorprecommitonchaininfo",3]]],[[["sectorprecommitonchaininfo",3]]],[[["sectorprecommitinfo",3]]],[[["sectorprecommitinfo",3]]],[[["sectorprecommitinfo",3]]],[[["sectorprecommitinfo",3]]],[[["claim",3]]],[[["claim",3]]],[[["claim",3]]],[[["claim",3]]],[[["filterestimate",3]]],[[["filterestimate",3]]],[[["filterestimate",3]]],[[["filterestimate",3]]],[[["networkversion",4]]],[[["statetreeversion",4]]],[[],["claim",3]],[[],["filterestimate",3]],[[],["claim",3]],[[],["filterestimate",3]],[[["minerinfo",3]],["bool",15]],[[["minerinfo",3]],["bool",15]],[[["filterestimate",3]],["bool",15]],[[["filterestimate",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["actorversion",4]]],[[["cid",3],["actorversion",4]],[["box",3],["result",4]]],[[],["u64",15]],[[["u64",15]],[["option",4],["box",3],["result",4]]],[[["u64",15]],[["result",4],["box",3]]],[[["u64",15]],[["bool",15],["result",4],["box",3]]],[[],[["box",3],["cid",3],["result",4]]],[[],[["result",4],["box",3]]],[[["actorversion",4]]],[[["cid",3],["actorversion",4]],[["box",3],["result",4]]],[[]],[[["byteskey",3]],[["result",4],["box",3]]],[[],[["option",4],["box",3],["result",4]]],[[],[["bool",15],["result",4],["box",3]]],[[],[["box",3],["result",4],["option",4]]],[[],[["box",3],["cid",3],["result",4]]],[[],[["result",4],["box",3]]],[[["actorstate",3]],[["state",4],["result",4],["box",3]]],[[],["address",3]],[[["actorstate",3]],[["result",4],["box",3],["state",4]]],[[["actorstate",3]],[["result",4],["state",4],["box",3]]],[[["address",3]],[["result",4],["box",3],["address",3]]],[[["address",3]],[["result",4],["option",4],["box",3]]],[[],["string",3]],[[["actorstate",3]],[["result",4],["state",4],["box",3]]],[[],[["result",4],["box",3],["balancetable",4]]],[[],[["result",4],["box",3],["balancetable",4]]],[[],[["dealproposals",4],["result",4],["box",3]]],[[],[["result",4],["dealstates",4],["box",3]]],[[],["tokenamount",6]],[[["chainepoch",6],["address",3]],[["result",4],["box",3]]],[[],[["result",4],["box",3]]],[[["u64",15]],[["option",4],["box",3],["result",4]]],[[["address",3]],[["result",4],["box",3],["tokenamount",6]]],[[["actorstate",3]],[["state",4],["box",3],["result",4]]],[[],[["result",4],["minerinfo",3],["box",3]]],[[],[["result",4],["box",3]]],[[["u64",15]],[["result",4],["deadline",4],["box",3]]],[[["option",4],["bitfield",3]],[["result",4],["vec",3],["box",3]]],[[["sectornumber",6]],[["option",4],["result",4],["box",3]]],[[["u64",15]],[["result",4],["option",4],["box",3]]],[[["chainepoch",6]],["deadlineinfo",3]],[[],["tokenamount",6]],[[],["u64",15]],[[],["address",3]],[[],["sectorsize",4]],[[],[["result",4],["box",3]]],[[],[["usize",15],["box",3],["result",4]]],[[],["bitfield",3]],[[],["bitfield",3]],[[],["bitfield",3]],[[],["bitfield",3]],[[],["bitfield",3]],[[],["bitfield",3]],[[["actorstate",3]],[["state",4],["box",3],["result",4]]],[[["actorstate",3]],[["result",4],["state",4],["box",3]]],[[],["storagepower",6]],[[],["claim",3]],[[],["tokenamount",6]],[[["address",3]],[["result",4],["option",4],["box",3]]],[[],[["result",4],["box",3],["vec",3]]],[[["address",3]],[["bool",15],["result",4],["box",3]]],[[],["filterestimate",3]],[[],["tokenamount",6]],[[["actorstate",3]],[["result",4],["state",4],["box",3]]],[[],["storagepower",6]],[[["storagepower",6],["filterestimate",3]],["tokenamount",6]],[[["storagepower",6],["tokenamount",6],["filterestimate",3]],["tokenamount",6]],[[["actorstate",3]],[["box",3],["state",4],["result",4]]]],"p":[[4,"State"],[4,"State"],[4,"State"],[4,"State"],[4,"BalanceTable"],[4,"DealProposals"],[3,"DealProposal"],[4,"DealStates"],[3,"DealState"],[4,"State"],[3,"MinerInfo"],[4,"Deadline"],[4,"Partition"],[3,"SectorOnChainInfo"],[3,"SectorPreCommitOnChainInfo"],[3,"SectorPreCommitInfo"],[4,"State"],[4,"State"],[3,"Claim"],[4,"State"],[4,"State"],[4,"Array"],[4,"Map"],[3,"FilterEstimate"],[4,"ActorVersion"]]},\
"auth":{"doc":"","t":[17,7,7,7,7,4,13,13,13,13,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["JWT_IDENTIFIER","ADMIN","SIGN","WRITE","READ","Error","MethodParam","InvalidPermissions","NoAuthHeader","Other","create_token","verify_token","has_perms","generate_priv_key","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","erased_serialize","vzip","fmt","fmt","serialize","deserialize"],"q":["auth","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["constant string that is used to identify the JWT secret …","Admin permissions","Signing permissions","Writing permissions","Reading permissions","Error Enum for Authentication","Filecoin Method does not exist","Invalid permissions to use specified method","Missing authentication header","","Create a new JWT Token","Verify JWT Token and return the allowed permissions from …","Check whether or not header has required permissions","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,[[["vec",3],["string",3]],[["jwtresult",6],["string",3]]],[[["str",15]],[["jwtresult",6],["vec",3]]],[[["str",15],["string",3]],[["result",4],["jsonrpcerror",4]]],[[],["keyinfo",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["serializer",8]],[["result",4],["error",3],["ok",3]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["result",4]],[[],["result",4]]],"p":[[4,"Error"]]},\
"beacon":{"doc":"","t":[0,0,0,5,5,3,12,3,12,5,5,3,11,11,11,17,3,12,3,12,12,3,12,3,12,12,8,10,10,10,3,12,12,12,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["beacon_entries","json","vec","serialize","deserialize","BeaconEntryJson","0","BeaconEntryJsonRef","0","serialize","deserialize","BeaconEntry","new","round","data","IGNORE_DRAND_VAR","DrandPublic","coefficient","DrandConfig","server","chain_info","BeaconSchedule","0","BeaconPoint","height","beacon","Beacon","verify_entry","entry","max_beacon_round_for_epoch","ChainInfo","public_key","period","genesis_time","hash","group_hash","BeaconEntryJson","DrandBeacon","MockBeacon","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","verify_entry","entry","max_beacon_round_for_epoch","verify_entry","entry","max_beacon_round_for_epoch","from","clone","clone","clone","clone","clone","default","default","eq","ne","eq","ne","fmt","fmt","fmt","fmt","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","key","beacon_entries_for_block","beacon_for_epoch","new","new","round_time"],"q":["beacon","beacon::beacon_entries","beacon::beacon_entries::json","beacon::beacon_entries::json::vec","","beacon::beacon_entries::json","","","","","","beacon::beacon_entries","","","","beacon","","","","","","","","","","","","","","","","","","","","","","","","beacon::beacon_entries::json","","","","","","","","","","","","","","","","beacon::beacon_entries","","","","","","","","","","beacon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","beacon::beacon_entries","","beacon","","","","beacon::beacon_entries","beacon","beacon::beacon_entries","","beacon","","beacon::beacon_entries","beacon","","","beacon::beacon_entries","beacon::beacon_entries::json","","beacon","","","beacon::beacon_entries","beacon::beacon_entries::json","beacon","","","","","","","",""],"d":["","","","","","Wrapper for serializing and deserializing a BeaconEntry …","","Wrapper for serializing a BeaconEntry reference to JSON.","","","","The result from getting an entry from Drand. The entry …","","Returns the current round number.","The signature of message H(prev_round, prev_round.data, …","Enviromental Variable to ignore Drand. Lotus parallel is …","Coeffiencients of the publicly available Drand keys. This …","Public key used to verify beacon entries.","Config used when initializing a Drand beacon.","Url endpoint to send JSON http requests to.","Info about the beacon chain, used to verify correctness …","Contains the vector of BeaconPoints, which are mappings …","","Contains height at which the beacon is activated, as well …","","","Trait used as the interface to be able to retrieve bytes …","Verify a new beacon entry against the most recent one …","Returns a BeaconEntry given a round. It fetches the …","Returns the most recent beacon round for the given …","Contains all the info about a Drand beacon chain. API …","","","","","","Json beacon entry format. This matches the drand round …","Drand randomness beacon that can be used to generate …","Mock beacon used for testing. Deterministic based on an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the public key for the Drand beacon.","Returns the beacon entries for a given epoch. When the …","","Construct a new DrandBeacon.","",""],"i":[0,0,0,0,0,0,1,0,2,0,0,0,3,3,3,0,0,4,0,5,5,0,6,0,7,7,0,8,8,8,0,9,9,9,9,9,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,12,12,12,3,3,4,5,9,10,3,9,3,3,9,9,3,4,9,10,3,1,2,4,9,10,3,1,4,9,10,4,6,6,11,12,12],"f":[null,null,null,[[],["result",4]],[[],[["vec",3],["result",4]]],null,null,null,null,[[["beaconentry",3]],["result",4]],[[],[["beaconentry",3],["result",4]]],null,[[["vec",3],["u8",15],["u64",15]]],[[],["u64",15]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["beaconentry",3],["beaconentry",3]],[["pin",3],["box",3]]],[[["u64",15]],[["pin",3],["box",3]]],[[["chainepoch",6]],["u64",15]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["beaconentry",3],["beaconentry",3]],[["pin",3],["box",3]]],[[["u64",15]],[["pin",3],["box",3]]],[[["chainepoch",6]],["u64",15]],[[["beaconentry",3],["beaconentry",3]],[["pin",3],["box",3]]],[[["u64",15]],[["pin",3],["box",3]]],[[["i64",15]],["u64",15]],[[["beaconentryjson",3]]],[[],["beaconentry",3]],[[],["drandpublic",3]],[[],["drandconfig",3]],[[],["chaininfo",3]],[[],["beaconentryjson",3]],[[],["beaconentry",3]],[[],["chaininfo",3]],[[["beaconentry",3]],["bool",15]],[[["beaconentry",3]],["bool",15]],[[["chaininfo",3]],["bool",15]],[[["chaininfo",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["publickey",3],["error",4],["result",4]]],[[["chainepoch",6],["beaconentry",3]]],[[["chainepoch",6]],[["box",3],["result",4]]],[[["drandconfig",3],["u64",15]]],[[["duration",3]]],[[],["duration",3]]],"p":[[3,"BeaconEntryJson"],[3,"BeaconEntryJsonRef"],[3,"BeaconEntry"],[3,"DrandPublic"],[3,"DrandConfig"],[3,"BeaconSchedule"],[3,"BeaconPoint"],[8,"Beacon"],[3,"ChainInfo"],[3,"BeaconEntryJson"],[3,"DrandBeacon"],[3,"MockBeacon"]]},\
"chain":{"doc":"","t":[0,17,17,17,17,17,3,5,0,4,13,13,13,6,17,17,17,17,17,3,5,4,13,13,13,3,12,5,5,5,5,5,5,5,5,5,5,5,5,4,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["base_fee","BLOCK_GAS_TARGET","BASE_FEE_MAX_CHANGE_DENOM","INITIAL_BASE_FEE","PACKING_EFFICIENCY_DENOM","PACKING_EFFICIENCY_NUM","MINIMUM_BASE_FEE","compute_base_fee","headchange_json","HeadChangeJson","Current","Apply","Revert","SubscriptionHeadChange","BLOCK_GAS_TARGET","BASE_FEE_MAX_CHANGE_DENOM","INITIAL_BASE_FEE","PACKING_EFFICIENCY_DENOM","PACKING_EFFICIENCY_NUM","MINIMUM_BASE_FEE","compute_base_fee","HeadChange","Current","Apply","Revert","ChainStore","db","block_messages","block_messages_from_cids","read_msg_cids","set_genesis","persist_objects","draw_randomness","genesis","get_chain_message","messages_for_tipset","messages_from_cids","get_parent_reciept","weight","Error","UndefinedKey","NoBlocks","NotFound","DB","Blockchain","Encoding","Cid","State","Other","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","from","from","from","from","from","from","from","from","clone","deref","fmt","fmt","fmt","fmt","source","initialize","serialize","deserialize","new","set_heaviest_tipset","set_genesis","add_to_tipset_tracker","put_tipset","genesis","heaviest_tipset","publisher","blockstore","blockstore_cloned","tipset_from_keys","is_block_validated","mark_block_as_validated","tipset_by_height","get_chain_randomness","get_beacon_randomness","latest_beacon_entry","fill_tipset","block_msgs_for_tipset","messages_for_tipset","miner_load_actor_tsk","export","sub_head_changes","next_head_change"],"q":["chain","chain::base_fee","","","","","","","chain","chain::headchange_json","","","","","chain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chain::base_fee","","","","","","","","","","","","chain::headchange_json","","","","","","","","","","","","chain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chain::headchange_json","chain","","","","","","","","","chain::base_fee","chain","chain::headchange_json","chain","","","chain::base_fee","chain::headchange_json","","chain","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Used in calculating the base fee change.","Limits gas base fee change to 12.5% of the change.","Genesis base fee.","","","Minimum base fee amount allowed for the given [Tipset].","","","","","","","","Used in calculating the base fee change.","Limits gas base fee change to 12.5% of the change.","Genesis base fee.","","","Minimum base fee amount allowed for the given [Tipset].","","Enum for pubsub channel that defines message type variant …","","","","Stores chain data such as heaviest tipset and cached …","key-value datastore.","Returns a Tuple of bls messages of type UnsignedMessage …","Returns a tuple of UnsignedMessage and SignedMessages …","Returns a tuple of cids for both Unsigned and Signed …","Sets the genesis key in the BlockStore. Be careful if …","Persists slice of serializable objects to blockstore.","Computes a pseudorandom 32 byte Vec.","Returns the genesis block from storage.","Attempts to deserialize to unsigend message or signed …","Given a tipset this function will return all unique …","Returns messages from key-value store based on a slice of …","Returns parent message receipt given block_header and …","Returns the weight of provided [Tipset]. This function …","Chain error","Key was not found","Tipset contains no blocks","Key not found in database","Error originating from key-value store","Error originating constructing blockchain structures","Error originating from encoding arbitrary data","Error originating from Cid creation","Amt error","Other chain error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets heaviest tipset within ChainStore and store its …","Writes genesis to blockstore.","Adds a [BlockHeader] to the tipset tracker, which tracks …","Writes tipset block headers to data store and updates …","Returns genesis [BlockHeader] from the store based on a …","Returns the currently tracked heaviest tipset.","Returns a reference to the publisher of head changes.","Returns key-value store instance.","Clones blockstore <code>Arc</code>.","Returns Tipset from key-value store from provided cids","Checks store if block has already been validated. Key …","Marks block as validated in the store. This is retrieved …","Returns the tipset behind <code>tsk</code> at a given <code>height</code>. If the …","Gets 32 bytes of randomness for ChainRand paramaterized …","Gets 32 bytes of randomness for ChainRand paramaterized …","Finds the latest beacon entry given a tipset up to 20 …","Constructs and returns a full tipset if messages from …","Retrieves block messages to be passed through the VM.","Retrieves ordered valid messages from a <code>Tipset</code>. This will …","get miner state given address and tipsetkeys","Exports a range of tipsets, as well as the state roots …","Subscribes to head changes. This function will send the …",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,2,2,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,1,4,4,4,4,4,4,4,4,2,5,2,1,4,4,4,5,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,null,null,null,null,null,null,[[["tipset",3]],[["result",4],["bigint",3],["error",4]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["tipset",3]],[["result",4],["bigint",3],["error",4]]],null,null,null,null,null,null,[[["blockheader",3]],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[["cid",3]],[["error",4],["result",4]]],[[["blockheader",3]],[["result",4],["cid",3],["error",4]]],[[],[["error",4],["result",4]]],[[["domainseparationtag",4],["chainepoch",6]],[["box",3],["result",4]]],[[],[["error",4],["option",4],["result",4]]],[[["cid",3]],[["error",4],["chainmessage",4],["result",4]]],[[["tipset",3]],[["error",4],["vec",3],["result",4]]],[[],[["vec",3],["error",4],["result",4]]],[[["blockheader",3],["usize",15]],[["error",4],["result",4],["option",4]]],[[["tipset",3]],[["result",4],["string",3],["bigint",3]]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["headchange",4]]],[[["dberr",4]]],[[["blkerr",4]]],[[["ciderr",4]]],[[["encerr",3]],["error",4]],[[["serdeerr",3]],["error",4]],[[["amterr",4]],["error",4]],[[["string",3]]],[[["box",3],["stderror",8]]],[[],["headchange",4]],[[],["bigint",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[]],[[],["result",4]],[[],["result",4]],[[["arc",3]]],[[["tipset",3],["arc",3]]],[[["blockheader",3]],[["result",4],["cid",3],["error",4]]],[[["blockheader",3]]],[[["tipset",3]]],[[],[["error",4],["option",4],["result",4]]],[[]],[[],["publisher",3]],[[]],[[],["arc",3]],[[["tipsetkeys",3]]],[[["cid",3]],[["result",4],["bool",15],["error",4]]],[[["cid",3]],[["error",4],["result",4]]],[[["chainepoch",6],["tipset",3],["bool",15],["arc",3]]],[[["chainepoch",6],["domainseparationtag",4],["tipsetkeys",3]]],[[["chainepoch",6],["domainseparationtag",4],["tipsetkeys",3]]],[[["tipset",3]]],[[["tipset",3]],[["fulltipset",3],["option",4]]],[[["tipset",3]],[["result",4],["vec",3],["error",4]]],[[["tipset",3]],[["error",4],["vec",3],["result",4]]],[[["tipsetkeys",3],["address",3]]],[[["tipset",3],["bool",15],["chainepoch",6]]],[[]],[[["i64",15]]]],"p":[[4,"HeadChangeJson"],[4,"HeadChange"],[3,"ChainStore"],[4,"Error"],[3,"MINIMUM_BASE_FEE"]]},\
"chain_sync":{"doc":"","t":[3,3,3,12,12,4,13,13,13,13,13,13,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BadBlockCache","ChainMuxer","SyncConfig","req_window","tipset_sample_size","SyncStage","Idle","Headers","PersistHeaders","Messages","Complete","Error","SyncState","TipsetValidator","0","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","into_future","into_future","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","clone","clone","clone","default","default","default","default","eq","eq","ne","fmt","fmt","fmt","fmt","fmt","poll","serialize","serialize","deserialize","new","put","get","peek","new","new","bad_blocks_cloned","sync_state_cloned","init","stage","target","set_stage","set_epoch","error","validate","validate_epoch","validate_msg_root","compute_msg_root"],"q":["chain_sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Threadsafe cache for tracking bad blocks. This cache is …","The ChainMuxer handles events from the p2p network and …","Struct that defines syncing configuration options","Request window length for tipsets during chain exchange","Sample size of tipsets to acquire before determining what …","Current state of the ChainSyncer using the ChainExchange …","Idle state.","Syncing headers from the heaviest tipset to genesis.","Persisting headers on chain from heaviest to genesis.","Syncing messages and performing state transitions.","ChainSync completed and is following chain.","Error has occured while syncing.","State of the node’s syncing process. This state is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Puts a bad block Cid in the cache with a given reason.","Returns <code>Some</code> with the reason if the block cid is in bad …","Returns <code>Some</code> with the reason if the block cid is in bad …","","","Returns a clone of the bad blocks cache to be used …","Returns a cloned <code>Arc</code> of the sync worker state.","Initializes the syncing state with base and target …","","Returns the current [Tipset] the","Sets the sync stage for the syncing state. If setting to …","Sets epoch of the sync.","Sets error for the sync.","","","",""],"i":[0,0,0,1,1,0,2,2,2,2,2,2,0,0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,6,4,1,2,6,2,6,6,4,1,2,6,2,5,2,6,1,4,4,4,4,1,5,5,5,6,6,6,6,6,6,3,3,3,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[],["syncconfig",3]],[[],["syncstage",4]],[[],["syncstate",3]],[[]],[[]],[[]],[[],["syncstate",3]],[[["syncstage",4]],["bool",15]],[[["syncstate",3]],["bool",15]],[[["syncstate",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["pin",3],["context",3]],["poll",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]]],[[["cid",3],["string",3]]],[[["cid",3]]],[[["cid",3]]],[[["i64",15],["usize",15]]],[[["statemanager",3],["networkmessage",4],["sender",3],["arc",3],["arc",3],["receiver",3],["networkevent",4],["arc",3],["messagepool",3],["sender",3],["tipset",3],["syncconfig",3],["arc",3],["receiver",3],["beaconschedule",3]]],[[],[["badblockcache",3],["arc",3]]],[[],[["arc",3],["rwlock",3]]],[[["arc",3],["tipset",3]]],[[],["syncstage",4]],[[],["option",4]],[[["syncstage",4]]],[[["chainepoch",6]]],[[["string",3]]],[[["badblockcache",3],["arc",3],["arc",3],["arc",3],["tipset",3],["chainstore",3]]],[[["arc",3],["tipset",3]],[["result",4],["tipsetvalidationerror",4]]],[[["block",3]],[["result",4],["tipsetvalidationerror",4]]],[[],[["tipsetvalidationerror",4],["result",4],["cid",3]]]],"p":[[3,"SyncConfig"],[4,"SyncStage"],[3,"TipsetValidator"],[3,"BadBlockCache"],[3,"ChainMuxer"],[3,"SyncState"]]},\
"commcid":{"doc":"","t":[6,5,5,5,5,5,5,5,5],"n":["Commitment","commitment_to_cid","cid_to_commitment","data_commitment_v1_to_cid","cid_to_data_commitment_v1","replica_commitment_v1_to_cid","cid_to_replica_commitment_v1","piece_commitment_v1_to_cid","cid_to_piece_commitment_v1"],"q":["commcid","","","","","","","",""],"d":["","CommitmentToCID converts a raw commitment hash to a CID …","CIDToCommitment extracts the raw commitment bytes, the …","DataCommitmentV1ToCID converts a raw data commitment to a …","cid_to_data_commitment_v1 extracts the raw data …","ReplicaCommitmentV1ToCID converts a raw data commitment …","cid_to_replica_commitment_v1 extracts the raw replica …","piece_commitment_v1_to_cid converts a comm_p to a CID – …","cid_to_piece_commitment_v1 converts a CID to a comm_p – …"],"i":[0,0,0,0,0,0,0,0,0],"f":[null,[[["commitment",6],["u64",15]],[["str",15],["result",4],["cid",3]]],[[["cid",3]],[["result",4],["str",15]]],[[["commitment",6]],[["str",15],["result",4],["cid",3]]],[[["cid",3]],[["result",4],["commitment",6],["str",15]]],[[["commitment",6]],[["str",15],["result",4],["cid",3]]],[[["cid",3]],[["result",4],["commitment",6],["str",15]]],[[["commitment",6]],[["str",15],["result",4],["cid",3]]],[[["cid",3]],[["result",4],["commitment",6],["str",15]]]],"p":[]},\
"conformance_tests":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"fil_clock":{"doc":"","t":[17,6,17],"n":["EPOCH_DURATION_SECONDS","ChainEpoch","EPOCH_UNDEFINED"],"q":["fil_clock","",""],"d":["Duration of each tipset epoch.","Epoch number of a chain. This acts as a proxy for time …","Const used within the VM to denote an unset <code>ChainEpoch</code>"],"i":[0,0,0],"f":[null,null,null],"p":[]},\
"fil_types":{"doc":"","t":[0,3,3,3,3,12,12,12,3,4,13,13,13,4,13,13,13,13,5,0,17,3,12,12,3,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,5,5,3,12,3,12,3,12,12,12,5,5,6,3,12,12,12,3,12,12,3,12,12,12,12,3,12,12,12,12,3,12,4,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,6,6,3,12,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,6,17,6,6,6,4,13,13,13,13,13,3,12,12,0,4,13,13,3,12,12,12,3,12,12,12,12,12,12,3,12,12,12,11,0,4,4,8,11,11,11,11,5,3,12,3,12,3,12,12,3,12,4,13,13,13,13,3,12,12,12,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,3,6,17,17,17,17,17,17,17,17,8,18,18,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["build_version","CURRENT_COMMIT","BUILD_TYPE","RUNNING_NODE_TYPE","APIVersion","version","api_version","block_delay","Version","BuildType","BuildDefault","Build2k","BuildDebug","NodeType","Unknown","Full","Miner","Worker","user_version","deadlines","NO_QUANTIZATION","QuantSpec","unit","offset","DeadlineInfo","current_epoch","period_start","index","open","close","challenge","fault_cutoff","new","period_started","period_elapsed","period_end","next_period_start","is_open","has_elapsed","last","next_open","fault_cutoff_passed","next_not_elapsed","quant_spec","sector","post","json","vec","serialize","deserialize","PoStProofJson","0","PoStProofJsonRef","0","SectorInfoJson","proof","sector_number","sealed_cid","serialize","deserialize","PoStRandomness","SectorInfo","proof","sector_number","sealed_cid","PoStProof","post_proof","proof_bytes","WinningPoStVerifyInfo","randomness","proofs","challenge_sectors","prover","WindowPoStVerifyInfo","randomness","proofs","challenged_sectors","prover","OnChainWindowPoStVerifyInfo","proofs","RegisteredSealProof","StackedDRG2KiBV1","StackedDRG512MiBV1","StackedDRG8MiBV1","StackedDRG32GiBV1","StackedDRG64GiBV1","StackedDRG2KiBV1P1","StackedDRG512MiBV1P1","StackedDRG8MiBV1P1","StackedDRG32GiBV1P1","StackedDRG64GiBV1P1","Invalid","RegisteredPoStProof","StackedDRGWinning2KiBV1","StackedDRGWinning8MiBV1","StackedDRGWinning512MiBV1","StackedDRGWinning32GiBV1","StackedDRGWinning64GiBV1","StackedDRGWindow2KiBV1","StackedDRGWindow8MiBV1","StackedDRGWindow512MiBV1","StackedDRGWindow32GiBV1","StackedDRGWindow64GiBV1","Invalid","SealRandomness","InteractiveSealRandomness","SealVerifyInfo","registered_proof","sector_id","deal_ids","randomness","interactive_randomness","proof","sealed_cid","unsealed_cid","SealVerifyParams","sealed_cid","interactive_epoch","registered_seal_proof","proof","deal_ids","sector_num","seal_rand_epoch","SectorNumber","MAX_SECTOR_NUMBER","StoragePower","Spacetime","SectorQuality","SectorSize","_2KiB","_8MiB","_512MiB","_32GiB","_64GiB","SectorID","miner","number","genesis","ActorType","Account","MultiSig","Actor","actor_type","balance","owner","Miner","owner","worker","peer_id","market_balance","power_balance","sector_size","Template","accounts","miners","network_name","new","verifier","MockVerifier","FullVerifier","ProofVerifier","verify_seal","verify_winning_post","verify_window_post","generate_winning_post_sector_challenge","zero_piece_commitment","UnpaddedPieceSize","0","PaddedPieceSize","0","PieceInfo","size","cid","Randomness","0","StateTreeVersion","V0","V1","V2","V3","StateRoot","version","actors","info","StateInfo0","NetworkVersion","V0","V1","V2","V3","V4","V5","V6","V7","V8","V9","V10","V11","V12","V13","TOTAL_FILECOIN","FIL_RESERVED","ZERO_ADDRESS","ActorID","HAMT_BIT_WIDTH","BLOCK_GAS_LIMIT","TOTAL_FILECOIN_BASE","TICKET_RANDOMNESS_LOOKBACK","WINNING_POST_SECTOR_SET_LOOKBACK","BLOCKS_PER_EPOCH","FILECOIN_PRECISION","ALLOWABLE_CLOCK_DRIFT","NetworkParams","TOTAL_FILECOIN","MINING_REWARD_TOTAL","initial_reward_balance","from_fil","DefaultNetworkParams","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","verify_seal","verify_winning_post","verify_window_post","generate_winning_post_sector_challenge","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","eq","partial_cmp","partial_cmp","deref","deref","deref","deref","deref","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","try_from","initialize","initialize","initialize","initialize","initialize","initialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","quantize_up","quantize_down","padded","validate","unpadded","validate","from_sector_size","update_to_v1","sector_maximum_lifetime","proof_size","sector_size","registered_seal_proof","proof_size","window_post_partitions_sector","sector_size","window_post_partitions_sector","registered_winning_post_proof","registered_window_post_proof"],"q":["fil_types","fil_types::build_version","","","","","","","","","","","","","","","","","","fil_types","fil_types::deadlines","","","","","","","","","","","","","","","","","","","","","","","","fil_types","fil_types::sector","fil_types::sector::post","fil_types::sector::post::json","fil_types::sector::post::json::vec","","fil_types::sector::post::json","","","","","","","","","","fil_types::sector::post","","","","","","","","","","","","","","","","","","","","fil_types::sector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types","fil_types::genesis","","","","","","","","","","","","","","","","","","","fil_types","fil_types::verifier","","","","","","","fil_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::build_version","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::deadlines","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::sector::post::json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::sector::post","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::sector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::genesis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::verifier","","","","","","","","","","","","","","","","","","","","","","","","fil_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fil_types::verifier","","","","fil_types::sector::post::json","fil_types::sector::post","fil_types::sector","","fil_types::deadlines","","fil_types","","","","fil_types::sector::post","","","","","fil_types::sector::post::json","fil_types::sector","","","","","","fil_types","","fil_types::deadlines","fil_types","fil_types::sector::post","","","fil_types::sector","fil_types","fil_types::build_version","fil_types::deadlines","","fil_types","","","","","","","","fil_types::sector::post","","","","","","","","","","fil_types::sector","","","","","","","","","","","fil_types","","","","fil_types::build_version","","","fil_types","","","fil_types::deadlines","fil_types","","","fil_types::sector::post","","","","","fil_types::sector","","","","","","fil_types","","fil_types::build_version","","fil_types::sector","","","fil_types::build_version","","","","fil_types","","","fil_types::build_version","","fil_types::deadlines","fil_types","","","fil_types::sector::post","","","","","fil_types::sector::post::json","","","fil_types::sector","","","","","","fil_types","","","","fil_types::genesis","","","","fil_types::deadlines","fil_types","","","fil_types::sector::post","","","","","fil_types::sector::post::json","","fil_types::sector","","","","","","fil_types","","","fil_types::genesis","","","","fil_types::build_version","","","","fil_types::sector","","fil_types::deadlines","","fil_types","","","","fil_types::sector","","","","","","","","","","",""],"d":["","","","","Represents the current version of the API.","","","","Integer based value on version information. Highest order …","Build type for the node. This shares which build type the …","","","","The type of node that is running.","","","","","Gets the formatted current user version.","","Constant defining the [QuantSpec] which performs no …","A spec for quantization.","The unit of quantization","The offset from zero from which to base the modulus","Deadline calculations with respect to a current epoch. “…","Epoch at which this info was calculated.","First epoch of the proving period (<= CurrentEpoch).","Current deadline index, in […","First epoch from which a proof may be submitted (>= …","First epoch from which a proof may no longer be submitted …","Epoch at which to sample the chain for challenge (< Open).","First epoch at which a fault declaration is rejected (< …","","Whether the proving period has begun.","Whether the proving period has elapsed.","The last epoch in the proving period.","The first epoch in the next proving period.","Whether the current deadline is currently open.","Whether the current deadline has already closed.","The last epoch during which a proof may be submitted.","Epoch at which the subsequent deadline opens.","Whether the deadline’s fault cutoff has passed.","Returns the next instance of this deadline that has not …","","","","","","","","Wrapper for serializing a PoStProof to JSON.","","Wrapper for serializing a PoStProof reference to JSON.","","","","","","","","Randomness type used for generating PoSt proof randomness.","Information about a sector necessary for PoSt verification","Used when sealing - needs to be mapped to PoSt registered …","","","Proof of spacetime data stored on chain.","","","Information needed to verify a Winning PoSt attached to a …","","","","Used to derive 32-byte prover ID","Information needed to verify a Window PoSt submitted …","","","","","Information submitted by a miner to provide a Window PoSt.","","Seal proof type which defines the version and sector size.","","","","","","","","","","","","Proof of spacetime type, indicating version and sector …","","","","","","","","","","","","Randomness used for Seal proofs.","Randomness used when verifying a seal proof. This is just …","Information needed to verify a seal proof.","","","","","","","","","SealVerifyParams is the structure of information that …","","","","","","","","SectorNumber is a numeric identifier for a sector. It is …","The maximum assignable sector number. Raising this would …","Unit of storage power (measured in bytes)","The unit of spacetime committed to the network","Unit of sector quality","SectorSize indicates one of a set of possible sizes in …","","","","","","Sector ID which contains the sector number and the actor …","","","","Different account variants. This is used with genesis …","","","All information needed to initialize an actor in genesis.","","","","Defines all information needed for a miner in genesis.","","","","","","","Format of genesis file.","","","","","","Mock verifier. This does no-op verification of any proofs.","Full verification implementation. This will verify all …","Functionality for verification of seal, winning PoSt and …","Verify seal proof for sectors. This proof verifies that a …","Verifies winning proof of spacetime. These proofs are …","Verifies window proof of spacetime. These proofs are …","Generates sector challenge indexes for use in winning …","Returns a zero piece commitment based on the amount of …","Size of a piece in bytes.","","Size of a piece in bytes with padding.","","Piece information for part or a whole file.","Size in nodes. For BLS12-381 (capacity 254 bits), must be …","Content identifier for piece.","String of random bytes usually generated from a …","","Specifies the version of the state tree","Corresponds to actors < v2","Corresponds to actors = v2","Corresponds to actors = v3","Corresponds to actors >= v4","State root information. Contains information about the …","State tree version","Actors tree. The structure depends on the state root …","Info. The structure depends on the state root version.","Empty state tree information. This is serialized as an …","Specifies the network version","genesis (specs-actors v0.9.3)","breeze (specs-actors v0.9.7)","smoke (specs-actors v0.9.8)","ignition (specs-actors v0.9.11)","actors v2 (specs-actors v2.0.x)","tape (increases max prove commit size by 10x)","kumquat (specs-actors v2.2.0)","calico (specs-actors v2.3.2)","persian (post-2.3.2 behaviour transition)","orange","actors v3 (specs-actors v3.0.x)","norwegian (specs-actor v3.1.x)","actors v3 (specs-actor v4.0.x)","reserved","Total Filecoin available to the network.","Amount of total Filecoin reserved in a static ID address.","Zero address used to avoid allowing it to be used for …","Identifier for Actors, includes builtin and initialized …","Default bit width for the hamt in the filecoin protocol.","Total gas limit allowed per block. This is shared across …","Total Filecoin supply.","Lookback height for retrieving ticket randomness.","Epochs to look back for verifying PoSt proofs.","The expected number of block producers in each epoch.","Ratio of integer values to token value.","Allowable clock drift in validations.","Config trait which handles different network …","Total filecoin available to network.","Available rewards for mining.","Initial reward actor balance. This function is only …","Convert integer value of tokens into BigInt based on the …","Params for the network. This is now continued on into …ounds <code>epoch</code> to the nearest exact multiple of the …","","Converts unpadded piece size into padded piece size.","Validates piece size.","Converts padded piece size into an unpadded piece size.","Validates piece size.","Returns registered seal proof for given sector size","Convert the original proof type to the v1 proof added in …","The maximum duration a sector sealed with this proof may …","Proof size for each SealProof type","Returns the sector size of the proof type, which is …","RegisteredSealProof produces the seal-specific …","Proof size for each PoStProof type","Returns the partition size, in sectors, associated with a …","Returns the sector size of the proof type, which is …","Returns the partition size, in sectors, associated with a …","Produces the winning PoSt-specific RegisteredProof …","Produces the windowed PoSt-specific RegisteredProof …"],"i":[0,0,0,0,0,1,1,1,0,0,2,2,2,0,3,3,3,3,0,0,0,0,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,6,0,7,0,8,8,8,0,0,0,0,9,9,9,0,10,10,0,11,11,11,11,0,12,12,12,12,0,13,0,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,0,0,0,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,0,0,0,0,0,0,18,18,18,18,18,0,19,19,0,0,20,20,0,21,21,21,0,22,22,22,22,22,22,0,23,23,23,23,0,0,0,0,24,24,24,24,0,0,25,0,26,0,27,27,0,28,0,29,29,29,29,0,30,30,30,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,0,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,1,1,1,1,1,1,1,1,1,1,1,1,36,36,36,36,36,36,36,36,36,36,36,36,36,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,37,37,37,37,37,37,37,37,37,37,37,37,31,31,31,31,31,31,31,31,31,31,31,31,31,31,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,38,38,38,38,8,10,15,14,4,5,25,26,27,28,9,10,11,12,13,8,14,15,16,17,18,19,29,31,5,28,11,12,13,19,37,36,5,5,25,25,26,26,27,27,28,28,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,19,19,29,31,29,31,33,34,35,40,41,42,5,25,26,28,9,10,11,12,13,14,15,16,17,18,19,29,31,3,36,18,14,15,36,33,34,35,40,41,42,1,36,5,26,27,28,9,10,11,12,13,6,7,8,15,14,16,17,18,19,29,30,37,31,20,21,22,23,5,26,27,28,9,10,11,12,13,6,8,15,14,16,17,18,19,29,30,37,20,21,22,23,2,2,3,3,18,18,4,4,25,25,26,26,14,14,14,14,15,15,15,15,14,14,14,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["chainepoch",6],["u64",15]]],[[],["bool",15]],[[],["bool",15]],[[],["chainepoch",6]],[[],["chainepoch",6]],[[],["bool",15]],[[],["bool",15]],[[],["chainepoch",6]],[[],["chainepoch",6]],[[],["bool",15]],[[]],[[],["quantspec",3]],null,null,null,null,[[],["result",4]],[[],[["vec",3],["result",4]]],null,null,null,null,null,null,null,null,[[["postproof",3]],["result",4]],[[],[["postproof",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["string",3]],["template",3]],null,null,null,null,[[["sealverifyinfo",3]],[["result",4],["box",3]]],[[["randomness",3],["u64",15]],[["result",4],["box",3]]],[[["randomness",3],["u64",15]],[["result",4],["box",3]]],[[["u64",15],["registeredpostproof",4],["randomness",3]],[["result",4],["vec",3],["box",3]]],[[["paddedpiecesize",3]],["commitment",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bigint",3]],[[["i64",15]],["bigint",3]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["sealverifyinfo",3]],[["result",4],["box",3]]],[[["randomness",3],["u64",15]],[["result",4],["box",3]]],[[["randomness",3],["u64",15]],[["result",4],["box",3]]],[[["u64",15],["registeredpostproof",4],["randomness",3]],[["result",4],["vec",3],["box",3]]],[[["sectorinfo",3]]],[[["postproofjson",3]]],[[["i64",15]]],[[["i64",15]]],[[],["quantspec",3]],[[],["deadlineinfo",3]],[[],["unpaddedpiecesize",3]],[[],["paddedpiecesize",3]],[[],["pieceinfo",3]],[[],["randomness",3]],[[],["sectorinfo",3]],[[],["postproof",3]],[[],["winningpostverifyinfo",3]],[[],["windowpostverifyinfo",3]],[[],["onchainwindowpostverifyinfo",3]],[[],["sectorinfojson",3]],[[],["registeredsealproof",4]],[[],["registeredpostproof",4]],[[],["sealverifyinfo",3]],[[],["sealverifyparams",3]],[[],["sectorsize",4]],[[],["sectorid",3]],[[],["statetreeversion",4]],[[],["networkversion",4]],[[],["deadlineinfo",3]],[[],["randomness",3]],[[],["winningpostverifyinfo",3]],[[],["windowpostverifyinfo",3]],[[],["onchainwindowpostverifyinfo",3]],[[],["sectorid",3]],[[],["stateinfo0",3]],[[],["bool",15]],[[["deadlineinfo",3]],["bool",15]],[[["deadlineinfo",3]],["bool",15]],[[["unpaddedpiecesize",3]],["bool",15]],[[["unpaddedpiecesize",3]],["bool",15]],[[["paddedpiecesize",3]],["bool",15]],[[["paddedpiecesize",3]],["bool",15]],[[["pieceinfo",3]],["bool",15]],[[["pieceinfo",3]],["bool",15]],[[["randomness",3]],["bool",15]],[[["randomness",3]],["bool",15]],[[["sectorinfo",3]],["bool",15]],[[["sectorinfo",3]],["bool",15]],[[["postproof",3]],["bool",15]],[[["postproof",3]],["bool",15]],[[["winningpostverifyinfo",3]],["bool",15]],[[["winningpostverifyinfo",3]],["bool",15]],[[["windowpostverifyinfo",3]],["bool",15]],[[["windowpostverifyinfo",3]],["bool",15]],[[["onchainwindowpostverifyinfo",3]],["bool",15]],[[["onchainwindowpostverifyinfo",3]],["bool",15]],[[["registeredsealproof",4]],["bool",15]],[[["registeredsealproof",4]],["bool",15]],[[["registeredpostproof",4]],["bool",15]],[[["registeredpostproof",4]],["bool",15]],[[["sealverifyinfo",3]],["bool",15]],[[["sealverifyinfo",3]],["bool",15]],[[["sealverifyparams",3]],["bool",15]],[[["sealverifyparams",3]],["bool",15]],[[["sectorsize",4]],["bool",15]],[[["sectorid",3]],["bool",15]],[[["sectorid",3]],["bool",15]],[[["statetreeversion",4]],["bool",15]],[[["networkversion",4]],["bool",15]],[[["statetreeversion",4]],[["ordering",4],["option",4]]],[[["networkversion",4]],[["ordering",4],["option",4]]],[[],["string",3]],[[],["rwlock",3]],[[],["rwlock",3]],[[],["bigint",3]],[[],["bigint",3]],[[],["address",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["nodetype",4]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["chainepoch",6]],["chainepoch",6]],[[["chainepoch",6]],["chainepoch",6]],[[],["paddedpiecesize",3]],[[],[["str",15],["result",4]]],[[],["unpaddedpiecesize",3]],[[],[["str",15],["result",4]]],[[["sectorsize",4],["networkversion",4]]],[[]],[[],["chainepoch",6]],[[],[["usize",15],["result",4],["string",3]]],[[],[["sectorsize",4],["string",3],["result",4]]],[[],[["string",3],["registeredsealproof",4],["result",4]]],[[],[["usize",15],["result",4],["string",3]]],[[],[["result",4],["string",3],["u64",15]]],[[],[["sectorsize",4],["string",3],["result",4]]],[[],[["result",4],["string",3],["u64",15]]],[[],[["registeredpostproof",4],["result",4],["string",3]]],[[],[["registeredpostproof",4],["result",4],["string",3]]]],"p":[[3,"APIVersion"],[4,"BuildType"],[4,"NodeType"],[3,"QuantSpec"],[3,"DeadlineInfo"],[3,"PoStProofJson"],[3,"PoStProofJsonRef"],[3,"SectorInfoJson"],[3,"SectorInfo"],[3,"PoStProof"],[3,"WinningPoStVerifyInfo"],[3,"WindowPoStVerifyInfo"],[3,"OnChainWindowPoStVerifyInfo"],[4,"RegisteredSealProof"],[4,"RegisteredPoStProof"],[3,"SealVerifyInfo"],[3,"SealVerifyParams"],[4,"SectorSize"],[3,"SectorID"],[4,"ActorType"],[3,"Actor"],[3,"Miner"],[3,"Template"],[8,"ProofVerifier"],[3,"UnpaddedPieceSize"],[3,"PaddedPieceSize"],[3,"PieceInfo"],[3,"Randomness"],[4,"StateTreeVersion"],[3,"StateRoot"],[4,"NetworkVersion"],[8,"NetworkParams"],[3,"CURRENT_COMMIT"],[3,"BUILD_TYPE"],[3,"RUNNING_NODE_TYPE"],[3,"Version"],[3,"StateInfo0"],[4,"MockVerifier"],[4,"FullVerifier"],[3,"TOTAL_FILECOIN"],[3,"FIL_RESERVED"],[3,"ZERO_ADDRESS"],[3,"DefaultNetworkParams"]]},\
"forest":{"doc":"","t":[0,0,4,13,12,11,0,4,13,12,13,13,13,12,13,12,11,0,3,12,12,12,12,12,12,12,12,12,12,12,0,3,12,12,12,12,11,5,0,17,4,13,12,12,13,12,12,11,5,3,12,12,4,13,13,13,13,3,12,12,12,12,12,12,12,12,12,12,12,12,12,11,5,5,5,5,5,0,5,0,5,0,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["cli","auth_cmd","AuthCommands","CreateToken","perm","run","chain_cmd","ChainCommands","Block","cid","Genesis","Head","Message","cid","ReadObj","cid","run","config","Config","network","data_dir","genesis_file","enable_rpc","rpc_port","snapshot","snapshot_path","skip_load","sync","encrypt_keystore","metrics_port","fetch_params_cmd","FetchCommands","all","keys","params_size","verbose","run","ram_to_int","genesis_cmd","ACCOUNT_START","GenesisCommands","NewTemplate","network_name","file_path","AddMiner","genesis_path","preseal_path","run","add_miner","CLI","daemon_opts","cmd","Subcommand","Fetch","Chain","Auth","Genesis","DaemonOpts","config","genesis","rpc","port","metrics_port","kademlia","mdns","import_snapshot","import_chain","skip_load","req_window","tipset_sample_size","target_peer_count","to_config","block_until_sigint","handle_rpc_err","print_rpc_res","print_rpc_res_pretty","print_rpc_res_cids","daemon","start","logger","setup_logger","subcommand","process","main","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","default","fmt","fmt","fmt","fmt","fmt","fmt","deserialize","clap","from_clap","clap","from_clap","clap","from_clap","clap","from_clap","clap","from_clap","clap","from_clap","clap","from_clap","augment_clap","from_subcommand","is_subcommand","augment_clap","from_subcommand","is_subcommand","augment_clap","is_subcommand","augment_clap","from_subcommand","is_subcommand","augment_clap","is_subcommand","augment_clap","from_subcommand","is_subcommand","augment_clap","is_subcommand"],"q":["forest","forest::cli","forest::cli::auth_cmd","","forest::cli::auth_cmd::AuthCommands","forest::cli::auth_cmd","forest::cli","forest::cli::chain_cmd","","forest::cli::chain_cmd::ChainCommands","forest::cli::chain_cmd","","","forest::cli::chain_cmd::ChainCommands","forest::cli::chain_cmd","forest::cli::chain_cmd::ChainCommands","forest::cli::chain_cmd","forest::cli","forest::cli::config","","","","","","","","","","","","forest::cli","forest::cli::fetch_params_cmd","","","","","","","forest::cli","forest::cli::genesis_cmd","","","forest::cli::genesis_cmd::GenesisCommands","","forest::cli::genesis_cmd","forest::cli::genesis_cmd::GenesisCommands","","forest::cli::genesis_cmd","","forest::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest","forest::daemon","forest","forest::logger","forest","forest::subcommand","forest","forest::cli::auth_cmd","","","","","","","","","","","","","","","","forest::cli::chain_cmd","","","","","","","","","","","","","","","","forest::cli::config","","","","","","","","","","","","","","","","forest::cli::fetch_params_cmd","","","","","","","","","","","","","","","","forest::cli::genesis_cmd","","","","","","","","","","","","","","","","forest::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest::cli::config","forest::cli::auth_cmd","forest::cli::chain_cmd","forest::cli::config","forest::cli::fetch_params_cmd","forest::cli::genesis_cmd","forest::cli","forest::cli::config","forest::cli::auth_cmd","","forest::cli::chain_cmd","","forest::cli::fetch_params_cmd","","forest::cli::genesis_cmd","","forest::cli","","","","","","forest::cli::auth_cmd","","","forest::cli::chain_cmd","","","forest::cli::fetch_params_cmd","","forest::cli::genesis_cmd","","","forest::cli","","","","","",""],"d":["","","","Create a new Authentication token with given permission","","","","","Retrieves and prints out the block specified by the given …","","Prints out the genesis tipset","Prints out the canonical head of the chain","Reads and prints out a message referenced by the …","","Reads and prints out ipld nodes referenced by the …","","","","","","","","","","If this is true, then we do not validate the imported …","","Skips loading import CAR file and assumes it’s already …","","","","","","","","","","","Converts a human readable string to a u64 size.","","","","Creates new genesis template","","","Adds miner to Genesis.","","","","","CLI structure generated when interacting with Forest …","","","Forest binary subcommands available.","","","","","Daemon process command line options.","","","","","","","","","","","","","","","Blocks current thread until ctrl-c is received","Returns a stringified JSON-RPC error","Prints a plain HTTP JSON-RPC response result","Prints a pretty HTTP JSON-RPC response result","Prints a tipset from a HTTP JSON-RPC response result","","Starts daemon process","","","","Process CLI subcommandi":[0,0,0,1,2,1,0,0,3,4,3,3,3,5,3,6,3,0,0,7,7,7,7,7,7,7,7,7,7,7,0,0,8,8,8,8,8,0,0,0,0,9,10,10,9,11,11,9,0,0,12,12,0,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,7,1,3,7,8,9,14,7,1,1,3,3,8,8,9,9,12,12,13,13,14,14,1,1,1,3,3,3,8,8,9,9,9,12,12,13,13,13,14,14],"f":[null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["str",15]],[["sectorsize",4],["string",3],["result",4]]],null,null,null,null,null,null,null,null,null,[[]],[[["string",3]],[["result",4],["box",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["config",3],["error",3],["result",4]]],[[]],[[["jsonrpcerror",4]]],[[["result",4],["string",3],["jsonrpcerror",4]]],[[["result",4],["jsonrpcerror",4],["serialize",8]]],[[["result",4],["tipsetjson",3],["jsonrpcerror",4]]],null,[[["config",3]]],null,[[]],null,[[["subcommand",4]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["result",4]],[[],["app",3]],[[["argmatches",3]]],[[],["app",3]],[[["argmatches",3]]],[[],["app",3]],[[["argmatches",3]]],[[],["app",3]],[[["argmatches",3]]],[[],["app",3]],[[["argmatches",3]]],[[],["app",3]],[[["argmatches",3]]],[[],["app",3]],[[["argmatches",3]]],[[["app",3]],["app",3]],[[],["option",4]],[[],["bool",15]],[[["app",3]],["app",3]],[[],["option",4]],[[],["bool",15]],[[["app",3]],["app",3]],[[],["bool",15]],[[["app",3]],["app",3]],[[],["option",4]],[[],["bool",15]],[[["app",3]],["app",3]],[[],["bool",15]],[[["app",3]],["app",3]],[[],["option",4]],[[],["bool",15]],[[["app",3]],["app",3]],[[],["bool",15]]],"p":[[4,"AuthCommands"],[13,"CreateToken"],[4,"ChainCommands"],[13,"Block"],[13,"Message"],[13,"ReadObj"],[3,"Config"],[3,"FetchCommands"],[4,"GenesisCommands"],[13,"NewTemplate"],[13,"AddMiner"],[3,"CLI"],[4,"Subcommand"],[3,"DaemonOpts"]]},\
"forest_actor":{"doc":"","t":[0,0,3,12,12,3,12,12,12,12,3,12,12,3,12,12,12,12,3,12,12,3,12,12,3,12,12,12,3,12,12,12,12,12,12,3,12,12,12,4,13,13,13,13,13,13,13,13,13,3,11,11,11,11,11,11,11,11,11,0,17,5,5,0,3,12,12,3,3,3,3,3,3,3,5,5,3,17,8,10,10,10,3,3,3,0,3,12,4,13,13,3,0,3,12,12,3,12,4,13,13,3,12,3,0,3,12,12,12,3,12,3,12,12,3,12,12,4,13,13,3,0,17,3,12,12,12,12,12,12,12,12,12,12,12,3,12,12,3,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,17,17,3,12,12,3,12,12,3,12,12,3,12,3,12,3,12,3,12,12,3,12,3,12,3,12,12,12,3,12,12,3,12,12,3,12,12,6,6,4,13,13,13,13,13,13,13,13,13,3,5,5,0,3,12,5,3,12,3,12,12,12,12,12,12,12,12,3,3,12,12,12,12,3,12,12,12,12,12,12,12,5,5,5,5,5,5,3,12,12,12,12,12,3,12,12,17,17,3,3,17,17,5,5,5,5,5,5,5,5,5,3,12,12,12,12,12,12,12,12,12,12,12,3,12,12,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,17,17,17,5,5,5,5,17,17,17,17,17,17,17,17,17,17,5,5,5,3,12,12,12,12,17,5,5,3,3,3,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,6,17,17,17,3,12,12,12,12,12,12,3,12,3,12,12,3,12,12,12,3,12,12,3,12,3,12,3,12,3,12,12,3,12,12,12,12,12,3,12,12,3,12,3,12,3,12,12,12,12,3,12,3,12,12,12,3,12,3,12,3,12,12,12,3,12,3,12,12,12,3,12,12,3,12,3,12,12,12,3,12,3,12,12,6,3,12,12,12,12,12,12,12,12,12,12,3,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,3,12,12,3,12,12,3,12,12,3,12,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,0,3,12,12,12,12,12,12,12,3,12,3,12,12,12,12,12,3,12,12,12,12,12,3,12,12,12,12,3,12,12,12,12,3,12,12,12,12,3,12,12,3,12,12,12,3,12,12,3,12,12,3,12,12,3,12,3,12,12,12,4,13,13,13,13,13,13,13,13,13,3,0,17,17,17,17,17,17,17,17,17,3,3,3,0,3,12,12,3,12,12,3,12,12,12,12,12,12,17,17,17,17,3,12,12,3,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,3,12,12,3,12,12,4,13,13,13,13,3,0,17,17,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,3,12,12,12,3,12,12,6,17,17,17,17,17,17,3,12,12,12,12,12,3,12,12,3,12,12,3,12,12,3,12,12,12,12,4,13,13,13,13,13,13,13,13,3,0,3,3,3,3,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,4,13,13,3,12,12,12,12,3,12,12,17,4,13,13,13,13,3,0,3,3,3,3,3,3,3,3,3,3,17,0,4,13,3,3,0,3,12,12,12,3,3,12,12,6,6,6,3,12,12,6,6,4,13,13,13,13,13,13,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,5,17,17,17,17,17,17,17,17,17,3,3,3,5,3,3,3,3,3,3,3,3,3,3,17,14,3,3,12,12,12,12,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,3,6,6,6,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["util","chaos","State","value","unmarshallable","CreateActorArgs","undef_cid","cid","undef_address","address","ResolveAddressResponse","address","success","SendArgs","to","value","method","params","SendReturn","return_value","code","MutateStateArgs","value","branch","AbortWithArgs","code","message","uncontrolled","InspectRuntimeReturn","caller","receiver","value_received","curr_epoch","current_balance","state","CallerValidationArgs","branch","addrs","types","Method","Constructor","CallerValidation","CreateActor","ResolveAddress","DeleteActor","Send","MutateState","AbortWith","InspectRuntime","Actor","send","constructor","caller_validation","create_actor","resolve_address","delete_actor","mutate_state","abort_with","inspect_runtime","math","PRECISION","poly_val","poly_parse","smooth","FilterEstimate","position","velocity","AlphaBetaFilter","NUM","DENOM","DEFAULT_ALPHA","DEFAULT_BETA","LN_2","EPSILON","extrapolated_cum_sum_of_ratio","ln","BalanceTable","BALANCE_TABLE_BITWIDTH","ActorDowncast","downcast_default","downcast_fatal","downcast_wrap","Multimap","Set","SetMultimap","account","State","address","Method","Constructor","PubkeyAddress","Actor","cron","Entry","receiver","method_num","State","entries","Method","Constructor","EpochTick","ConstructorParams","entries","Actor","init","State","address_map","next_id","network_name","ConstructorParams","network_name","ExecParams","code_cid","constructor_params","ExecReturn","id_address","robust_address","Method","Constructor","Exec","Actor","market","PIECE_CID_PREFIX","DealProposal","piece_cid","piece_size","verified_deal","client","provider","label","start_epoch","end_epoch","storage_price_per_epoch","provider_collateral","client_collateral","ClientDealProposal","proposal","client_signature","DealState","sector_start_epoch","last_updated_epoch","slash_epoch","State","proposals","states","pending_proposals","escrow_table","locked_table","next_id","deal_ops_by_epoch","last_cron","total_client_locked_colateral","total_provider_locked_colateral","total_client_storage_fee","PROPOSALS_AMT_BITWIDTH","STATES_AMT_BITWIDTH","WithdrawBalanceParams","provider_or_client","amount","OnMinerSectorsTerminateParams","epoch","deal_ids","OnMinerSectorsTerminateParamsRef","epoch","deal_ids","PublishStorageDealsParams","deals","PublishStorageDealsReturn","ids","VerifyDealsForActivationParams","sectors","SectorDeals","sector_expiry","deal_ids","VerifyDealsForActivationParamsRef","sectors","VerifyDealsForActivationReturn","sectors","SectorWeights","deal_space","deal_weight","verified_deal_weight","ActivateDealsParams","deal_ids","sector_expiry","ComputeDataCommitmentParams","deal_ids","sector_type","ComputeDataCommitmentParamsRef","deal_ids","sector_type","DealArray","DealMetaArray","Method","Constructor","AddBalance","WithdrawBalance","PublishStorageDeals","VerifyDealsForActivation","ActivateDeals","OnMinerSectorsTerminate","ComputeDataCommitment","CronTick","Actor","validate_deals_for_activation","validate_and_compute_deal_weight","miner","BitFieldQueue","amt","assign_deadlines","Deadlines","due","Deadline","partitions","expirations_epochs","partitions_posted","early_terminations","live_sectors","total_sectors","faulty_power","optimistic_post_submissions","WindowedPoSt","DisputeInfo","all_sector_nos","ignored_sector_nos","disputed_sectors","disputed_power","PoStResult","power_delta","new_faulty_power","retracted_recovery_power","recovered_power","sectors","ignored_sectors","partitions","new_deadline_info","deadline_is_mutable","quant_spec_for_deadline","deadline_available_for_optimistic_post_dispute","deadline_available_for_compaction","new_deadline_info_from_offset_and_epoch","ExpirationSet","on_time_sectors","early_sectors","on_time_pledge","active_power","faulty_power","ExpirationQueue","amt","quant","PRE_COMMIT_DEPOSIT_PROJECTION_PERIOD","INITIAL_PLEDGE_PROJECTION_PERIOD","BASE_REWARD_FOR_DISPUTED_WINDOW_POST","BASE_PENALTY_FOR_DISPUTED_WINDOW_POST","CONTINUED_FAULT_PROJECTION_PERIOD","TERMINATION_LIFETIME_CAP","expected_reward_for_power","pledge_penalty_for_continued_fault","pledge_penalty_for_termination_lower_bound","pledge_penalty_for_termination","pledge_penalty_for_invalid_windowpost","pre_commit_deposit_for_power","initial_pledge_for_power","consensus_fault_penalty","locked_reward_from_reward","Partition","sectors","unproven","faults","recoveries","terminated","expirations_epochs","early_terminated","live_power","unproven_power","faulty_power","recovering_power","PowerPair","raw","qa","WPOST_PROVING_PERIOD","WPOST_CHALLENGE_WINDOW","WPOST_PERIOD_DEADLINES","WPOST_MAX_CHAIN_COMMIT_AGE","WPOST_DISPUTE_WINDOW","SECTORS_MAX","MAX_PARTITIONS_PER_DEADLINE","MAX_CONTROL_ADDRESSES","MAX_PEER_ID_LENGTH","MAX_MULTIADDR_DATA","MAX_PROVE_COMMIT_SIZE_V4","MAX_PROVE_COMMIT_SIZE_V5","ADDRESSED_PARTITIONS_MAX","DELCARATIONS_MAX","ADDRESSED_SECTORS_MAX","load_partitions_sectors_max","NEW_SECTORS_PER_PERIOD_MAX","CHAIN_FINALITY","SEALED_CID_PREFIX","can_pre_commit_seal_proof","can_extend_seal_proof_type","max_prove_commit_duration","seal_proof_sector_maximum_lifetime","MAX_PRE_COMMIT_RANDOMNESS_LOOKBACK","PRE_COMMIT_CHALLENGE_DELAY","WPOST_CHALLENGE_LOOKBACK","FAULT_DECLARATION_CUTOFF","FAULT_MAX_AGE","WORKER_KEY_CHANGE_DELAY","MIN_SECTOR_EXPIRATION","MAX_SECTOR_EXPIRATION_EXTENSION","DEAL_LIMIT_DENOMINATOR","CONSENSUS_FAULT_INELIGIBILITY_DURATION","qa_power_for_weight","qa_power_for_sector","sector_deals_max","VestSpec","initial_delay","vest_period","step_duration","quantization","REWARD_VESTING_SPEC","reward_for_consensus_slash_report","reward_for_disputed_window_post","DeadlineSectorMap","PartitionSectorMap","Sectors","amt","State","info","pre_commit_deposits","locked_funds","vesting_funds","fee_debt","initial_pledge","pre_committed_sectors","pre_committed_sectors_expiry","allocated_sectors","sectors","proving_period_start","current_deadline","deadlines","early_terminations","deadline_cron_active","AdvanceDeadlineResult","pledge_delta","power_delta","previously_faulty_power","detected_faulty_power","total_faulty_power","MinerInfo","owner","worker","control_addresses","pending_worker_key","peer_id","multi_address","window_post_proof_type","sector_size","window_post_partition_sectors","consensus_fault_elapsed","pending_owner_address","TerminationResult","sectors","partitions_processed","sectors_processed","CronEvent","CRON_EVENT_WORKER_KEY_CHANGE","CRON_EVENT_PROVING_DEADLINE","CRON_EVENT_PROCESS_EARLY_TERMINATIONS","MinerConstructorParams","owner","worker","control_addresses","window_post_proof_type","peer_id","multi_addresses","CronEventPayload","event_type","PartitionKey","deadline","partition","GetControlAddressesReturn","owner","worker","control_addresses","ChangeWorkerAddressParams","new_worker","new_control_addresses","ChangePeerIDParams","new_id","ChangeMultiaddrsParams","new_multi_addrs","ConfirmSectorProofsParams","sectors","PoStPartition","index","skipped","SubmitWindowedPoStParams","deadline","partitions","proofs","chain_commit_epoch","chain_commit_rand","ProveCommitSectorParams","sector_number","proof","CheckSectorProvenParams","sector_number","ExtendSectorExpirationParams","extensions","ExpirationExtension","deadline","partition","sectors","new_expiration","TerminateSectorsParams","terminations","TerminationDeclaration","deadline","partition","sectors","TerminateSectorsReturn","done","DeclareFaultsParams","faults","FaultDeclaration","deadline","partition","sectors","DeclareFaultsRecoveredParams","recoveries","RecoveryDeclaration","deadline","partition","sectors","CompactPartitionsParams","deadline","partitions","CompactSectorNumbersParams","mask_sector_numbers","ReportConsensusFaultParams","header1","header2","header_extra","WithdrawBalanceParams","amount_requested","WorkerKeyChange","new_worker","effective_at","PreCommitSectorParams","SectorPreCommitInfo","seal_proof","sector_number","sealed_cid","seal_rand_epoch","deal_ids","expiration","replace_capacity","replace_sector_deadline","replace_sector_partition","replace_sector_number","SectorPreCommitOnChainInfo","info","pre_commit_deposit","pre_commit_epoch","deal_weight","verified_deal_weight","SectorOnChainInfo","sector_number","seal_proof","sealed_cid","deal_ids","activation","expiration","deal_weight","verified_deal_weight","initial_pledge","expected_day_reward","expected_storage_pledge","replaced_sector_age","replaced_day_reward","Fault","miner","fault","ApplyRewardParams","reward","penalty","DisputeWindowedPoStParams","deadline","post_index","VestingFund","epoch","amount","VestingFunds","funds","Method","Constructor","ControlAddresses","ChangeWorkerAddress","ChangePeerID","SubmitWindowedPoSt","PreCommitSector","ProveCommitSector","ExtendSectorExpiration","TerminateSectors","DeclareFaults","DeclareFaultsRecovered","OnDeferredCronEvent","CheckSectorProven","ApplyRewards","ReportConsensusFault","WithdrawBalance","ConfirmSectorProofsValid","ChangeMultiaddrs","CompactPartitions","CompactSectorNumbers","ConfirmUpdateWorkerKey","RepayDebt","ChangeOwnerAddress","DisputeWindowedPoSt","Actor","multisig","State","signers","num_approvals_threshold","next_tx_id","initial_balance","start_epoch","unlock_duration","pending_txs","TxnID","0","Transaction","to","value","method","params","approved","ProposalHashData","requester","to","value","method","params","ConstructorParams","signers","num_approvals_threshold","unlock_duration","start_epoch","ProposeParams","to","value","method","params","ProposeReturn","txn_id","applied","code","ret","TxnIDParams","id","proposal_hash","ApproveReturn","applied","code","ret","AddSignerParams","signer","increase","RemoveSignerParams","signer","decrease","SwapSignerParams","from","to","ChangeNumApprovalsThresholdParams","new_threshold","LockBalanceParams","start_epoch","unlock_duration","amount","Method","Constructor","Propose","Approve","Cancel","AddSigner","RemoveSigner","SwapSigner","ChangeNumApprovalsThreshold","LockBalance","Actor","network","EPOCH_DURATION_SECONDS","EXPECTED_LEADERS_PER_EPOCH","SECONDS_IN_HOUR","SECONDS_IN_DAY","SECONDS_IN_YEAR","EPOCHS_IN_HOUR","EPOCHS_IN_DAY","EPOCHS_IN_YEAR","SECTOR_QUALITY_PRECISION","QUALITY_BASE_MULTIPLIER","DEAL_WEIGHT_MULTIPLIER","VERIFIED_DEAL_WEIGHT_MULTIPLIER","paych","LaneState","redeemed","nonce","Merge","lane","nonce","State","from","to","to_send","settling_at","min_settle_height","lane_states","MAX_LANE","SETTLE_DELAY","MAX_SECRET_SIZE","LANE_STATES_AMT_BITWIDTH","ConstructorParams","from","to","SignedVoucher","channel_addr","time_lock_min","time_lock_max","secret_pre_image","extra","lane","nonce","amount","min_settle_height","merges","signature","ModVerifyParams","actor","method","data","PaymentVerifyParams","extra","proof","UpdateChannelStateParams","sv","secret","Method","Constructor","UpdateChannelState","Settle","Collect","Actor","power","CONSENSUS_MINER_MIN_MINERS","MAX_MINER_PROVE_COMMITS_PER_EPOCH","State","total_raw_byte_power","total_bytes_committed","total_quality_adj_power","total_qa_bytes_committed","total_pledge_collateral","this_epoch_raw_byte_power","this_epoch_quality_adj_power","this_epoch_pledge_collateral","this_epoch_qa_power_smoothed","miner_count","miner_above_min_power_count","cron_event_queue","first_cron_epoch","claims","proof_validation_batch","set_claim","Claim","window_post_proof_type","raw_byte_power","quality_adj_power","CronEvent","miner_addr","callback_payload","SectorTermination","SECTOR_TERMINATION_EXPIRED","SECTOR_TERMINATION_MANUAL","SECTOR_TERMINATION_FAULTY","CRON_QUEUE_HAMT_BITWIDTH","CRON_QUEUE_AMT_BITWIDTH","PROOF_VALIDATION_BATCH_AMT_BITWIDTH","CreateMinerParams","owner","worker","window_post_proof_type","peer","multiaddrs","CreateMinerReturn","id_address","robust_address","UpdateClaimedPowerParams","raw_byte_delta","quality_adjusted_delta","EnrollCronEventParams","event_epoch","payload","CurrentTotalPowerReturn","raw_byte_power","quality_adj_power","pledge_collateral","quality_adj_power_smoothed","Method","Constructor","CreateMiner","UpdateClaimedPower","EnrollCronEvent","OnEpochTickEnd","UpdatePledgeTotal","SubmitPoRepForBulkVerify","CurrentTotalPower","Actor","reward","BASELINE_EXPONENT","BASELINE_INITIAL_VALUE","INIT_BASELINE_POWER","Reward","vesting_function","start_epoch","end_epoch","value","amount_withdrawn","State","cumsum_baseline","cumsum_realized","effective_network_time","effective_baseline_power","this_epoch_reward","this_epoch_reward_smoothed","this_epoch_baseline_power","epoch","total_storage_power_reward","simple_total","baseline_total","VestingFunction","None","Linear","AwardBlockRewardParams","miner","penalty","gas_reward","win_count","ThisEpochRewardReturn","this_epoch_reward_smoothed","this_epoch_baseline_power","PENALTY_MULTIPLIER","Method","Constructor","AwardBlockReward","ThisEpochReward","UpdateNetworkKPI","Actor","singletons","SYSTEM_ACTOR_ADDR","INIT_ACTOR_ADDR","REWARD_ACTOR_ADDR","CRON_ACTOR_ADDR","STORAGE_POWER_ACTOR_ADDR","STORAGE_MARKET_ACTOR_ADDR","VERIFIED_REGISTRY_ACTOR_ADDR","CHAOS_ACTOR_ADDR","BURNT_FUNDS_ACTOR_ADDR","RESERVE_ADDRESS","FIRST_NON_SINGLETON_ADDR","system","Method","Constructor","State","Actor","verifreg","State","root_key","verifiers","verified_clients","MINIMUM_VERIFIED_DEAL_SIZE","VerifierParams","address","allowance","AddVerifierParams","AddVerifierClientParams","DataCap","BytesParams","address","deal_size","UseBytesParams","RestoreBytesParams","Method","Constructor","AddVerifier","RemoveVerifier","AddVerifiedClient","UseBytes","RestoreBytes","Actor","SYSTEM_ACTOR_CODE_ID","INIT_ACTOR_CODE_ID","CRON_ACTOR_CODE_ID","ACCOUNT_ACTOR_CODE_ID","POWER_ACTOR_CODE_ID","MINER_ACTOR_CODE_ID","MARKET_ACTOR_CODE_ID","PAYCH_ACTOR_CODE_ID","MULTISIG_ACTOR_CODE_ID","REWARD_ACTOR_CODE_ID","VERIFREG_ACTOR_CODE_ID","CHAOS_ACTOR_CODE_ID","CALLER_TYPES_SIGNABLE","is_builtin_actor","is_singleton_actor","is_account_actor","is_principal","EPOCH_DURATION_SECONDS","EXPECTED_LEADERS_PER_EPOCH","SECONDS_IN_HOUR","SECONDS_IN_DAY","SECONDS_IN_YEAR","EPOCHS_IN_HOUR","EPOCHS_IN_DAY","EPOCHS_IN_YEAR","SECTOR_QUALITY_PRECISION","QUALITY_BASE_MULTIPLIER","DEAL_WEIGHT_MULTIPLIER","VERIFIED_DEAL_WEIGHT_MULTIPLIER","consensus_miner_min_power","SYSTEM_ACTOR_ADDR","INIT_ACTOR_ADDR","REWARD_ACTOR_ADDR","CRON_ACTOR_ADDR","STORAGE_POWER_ACTOR_ADDR","STORAGE_MARKET_ACTOR_ADDR","VERIFIED_REGISTRY_ACTOR_ADDR","CHAOS_ACTOR_ADDR","BURNT_FUNDS_ACTOR_ADDR","RESERVE_ADDRESS","FIRST_NON_SINGLETON_ADDR","actor_error","ActorError","ActorState","code","state","sequence","balance","DealID","ExitCode","Ok","SysErrSenderInvalid","SysErrSenderStateInvalid","SysErrInvalidMethod","SysErrActorPanic","SysErrInvalidReceiver","SysErrInsufficientFunds","SysErrOutOfGas","SysErrForbidden","SysErrIllegalActor","SysErrIllegalArgument","SysErrReserved2","SysErrReserved3","SysErrReserved4","SysErrReserved5","SysErrReserved6","ErrIllegalArgument","ErrNotFound","ErrForbidden","ErrInsufficientFunds","ErrIllegalState","ErrSerialization","ErrTooManyProveCommits","ErrPlaceholder","MethodNum","Serialized","TokenAmount","Map","DealWeight","make_empty_map","make_map_with_root","make_map_with_root_and_bitwidth","u64_key","parse_uint_key","invoke_code","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","equivalent","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","equivalent","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","equivalent","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","equivalent","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","equivalent","get_hash","vzip","init","deref","deref_mut","drop","get_hash","fmt","fmt","fmt","fmt","hash","from","from","eq","ne","eq","ne","eq","ne","eq","fmt","default","clone","clone","clone","clone","deserialize","deserialize","deserialize","from_i64","from_u64","serialize","serialize","serialize","deref","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","neg","add_assign","add_assign","sub_assign","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","initialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","from_i64","from_u64","invoke_method","invoke_method","invoke_method","invoke_method","invoke_method","invoke_method","invoke_method","invoke_method","invoke_method","invoke_method","invoke_method","invoke_method","constructor","pubkey_address","new","map_address_to_new_id","resolve_address","constructor","exec","duration","weight","total_storage_fee","client_balance_requirement","provider_balance_requirement","new","total_locked","constructor","new","add_to_queue","add_to_queue_values","cut","add_many_to_queue_values","pop_until","new","load_deadline","for_each","update_deadline","new","partitions_amt","optimistic_proofs_amt","partitions_snapshot_amt","optimistic_proofs_snapshot_amt","load_partition","load_partition_snapshot","add_expiration_partitions","pop_expired_sectors","add_sectors","pop_early_terminations","pop_expired_partitions","terminate_sectors","remove_partitions","record_faults","declare_faults_recovered","process_deadline_end","for_each","validate_state","load_partitions_for_dispute","is_live","record_proven_sectors","record_post_proofs","take_post_proofs","reschedule_sector_expirations","find_sector","empty","add","remove","is_empty","len","validate_state","new","add_active_sectors","reschedule_expirations","reschedule_as_faults","reschedule_all_as_faults","reschedule_recovered","replace_sectors","remove_sectors","pop_until","new","live_sectors","active_sectors","active_power","add_sectors","add_faults","record_faults","recover_faults","activate_unproven","declare_faults_recovered","remove_recoveries","reschedule_expirations","replace_sectors","record_early_termination","terminate_sectors","pop_expired_sectors","record_missed_post","pop_early_terminations","record_skipped_faults","validate_power_state","validate_bf_state","validate_state","zero","is_zero","new","check","count","add","add_values","deadlines","iter","add_values","add","count","partitions","iter","len","is_empty","load","load_sector","get","store","must_get","load_for_proof","load_with_fault_max","new","get_info","save_info","deadline_info","recorded_deadline_info","current_proving_period_start","quant_spec_for_deadline","allocate_sector_number","mask_sector_numbers","put_precommitted_sector","get_precommitted_sector","find_precommitted_sectors","delete_precommitted_sectors","has_sector_number","put_sectors","get_sector","delete_sectors","for_each_sector","find_sector","reschedule_sector_expirations","assign_sectors_to_deadlines","pop_early_terminations","check_sector_health","load_sector_infos","load_deadlines","save_deadlines","load_vesting_funds","save_vesting_funds","continue_deadline_cron","add_pre_commit_deposit","add_initial_pledge","apply_penalty","add_locked_funds","repay_partial_debt_in_priority_order","repay_debts","unlock_unvested_funds","unlock_vested_funds","check_vested_funds","get_unlocked_balance","get_available_balance","check_balance_invariants","quant_spec_every_deadline","add_pre_commit_expiry","expire_pre_commits","advance_deadline","new","new","below_limit","is_empty","iter","new","unlock_vested_funds","add_locked_funds","unlock_unvested_funds","constructor","is_signer","set_locked","amount_locked","purge_approvals","key","constructor","propose","approve","cancel","add_signer","remove_signer","swap_signer","change_num_approvals_threshold","lock_balance","new","signing_bytes","constructor","update_channel_state","settle","collect","new","into_total_locked","miner_nominal_power_meets_consensus_minimum","miner_power","current_total_power","get_claim","new","into_total_storage_power_reward","amount_vested","constructor","new","constructor","add_verifier","remove_verifier","add_verified_client","use_bytes","restore_bytes","new","from_root","root","get","add","subtract_with_minimum","must_subtract","total","new","from_root","root","add","get","remove_all","for_each","for_all","new","new_set_with_bitwidth","from_root","root","put","has","delete","for_each","collect_keys","new","from_root","root","put","put_many","get","remove","remove_all","for_each","new","estimate","extrapolate","load","next_estimate","new","new_fatal","is_fatal","exit_code","is_ok","msg","wrap","new","deduct_funds","deposit_funds","is_success","new","serialize","bytes","deserialize"],"q":["forest_actor","forest_actor::util","forest_actor::util::chaos","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::util","forest_actor::util::math","","","forest_actor::util","forest_actor::util::smooth","","","","","","","","","","","","forest_actor::util","","","","","","","","","forest_actor","forest_actor::account","","","","","","forest_actor","forest_actor::cron","","","","","","","","","","","forest_actor","forest_actor::init","","","","","","","","","","","","","","","","forest_actor","forest_actor::market","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor","forest_actor::minerforest_actor","forest_actor::multisig","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor","forest_actor::network","","","","","","","","","","","","forest_actor","forest_actor::paych","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor","forest_actor::power","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor","forest_actor::reward","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor","forest_actor::singletons","","","","","","","","","","","forest_actor","forest_actor::system","","","","forest_actor","forest_actor::verifreg","","","","","","","","","","","","","","","","","","","","","","","","forest_actor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::account","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::cron","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::init","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::marketforest_actor::minerforest_actor::multisigforest_actor::network","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::paych","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::power","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::reward","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::singletons","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::system","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::verifreg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::util","","","","","","","","","","","","forest_actor::util::chaos","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::util::smooth","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::paych","forest_actor::cron","forest_actor::market","","","forest_actor::miner","","","","","","","","","forest_actor::multisig","","","forest_actor::paych","","","","forest_actor::power","","forest_actor::reward","","","","forest_actor::verifreg","","forest_actor::util::smooth","forest_actor::cron","","forest_actor::market","","","forest_actor::miner","","","","","","forest_actor::multisig","forest_actor::paych","","forest_actor::power","forest_actor::reward","forest_actor::system","forest_actor::util::chaos","forest_actor::util::smooth","forest_actor::cron","","forest_actor::market","","","","","","forest_actor::miner","","","","","","","","","","","","","","","","forest_actor::multisig","","forest_actor::paych","","","","","","","","forest_actor::power","","forest_actor::reward","","","","","","","forest_actor::verifreg","","","","forest_actor::util","forest_actor::util::smooth","","forest_actor","","","","","","","","","","","","","forest_actor::miner","","forest_actor::network","","","forest_actor::reward","","","forest_actor::singletons","","","","","","","","","","forest_actor::verifreg","forest_actor::util::smooth","","","","","","forest_actor::cron","","forest_actor::market","","","forest_actor::miner","","","","","","","","","","","forest_actor::multisig","","","forest_actor::paych","","","","","forest_actor::power","","forest_actor::reward","","","","forest_actor::verifreg","","forest_actor::util","forest_actor::util::smooth","forest_actor::miner","","","","forest_actor","","","","","","","","","","","","","forest_actor::miner","","forest_actor::network","","","forest_actor::reward","","","forest_actor::singletons","","","","","","","","","","forest_actor::verifreg","forest_actor::util::smooth","","","","","","forest_actor::account","forest_actor::cron","","","forest_actor::init","","","","forest_actor::market","","","","","","","","","","","","","","","","","forest_actor::miner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::multisig","","","","","","","","","","","","","","forest_actor::paych","","","","","","","","forest_actor::power","","","","","","","","forest_actor::reward","","","","","forest_actor::system","forest_actor::verifreg","","","forest_actor::util::chaos","","","","","","","","","forest_actor::util::smooth","forest_actor::account","forest_actor::cron","","","forest_actor::init","","","","forest_actor::market","","","","","","","","","","","","","","forest_actor::miner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::multisig","","","","","","","","","","","","","forest_actor::paych","","","","","","","","forest_actor::power","","","","","","","","forest_actor::reward","","","","","forest_actor::system","forest_actor::verifreg","","","forest_actor::util::chaos","","","","","","","","","forest_actor::util::smooth","forest_actor::account","","forest_actor::cron","","forest_actor::init","","forest_actor::market","","forest_actor::miner","","forest_actor::multisig","","forest_actor::paych","","forest_actor::power","","forest_actor::reward","","","","forest_actor::system","","forest_actor::verifreg","","forest_actor::util::chaos","","forest_actor::account","forest_actor::cron","forest_actor::init","forest_actor::market","forest_actor::miner","forest_actor::multisig","forest_actor::paych","forest_actor::power","forest_actor::reward","forest_actor::system","forest_actor::verifreg","forest_actor::util::chaos","forest_actor::account","","forest_actor::init","","","","","forest_actor::market","","","","","","","","forest_actor::miner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::multisig","","","","","","","","","","","","","","forest_actor::paych","","","","","","forest_actor::power","","","","","","forest_actor::reward","","","forest_actor::system","forest_actor::verifreg","","","","","","","forest_actor::util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_actor::util::smooth","","","","","forest_actor","","","","","","","","","","","","","",""],"d":["","","","","","CreateActorArgs are the arguments to CreateActor.","","","","","Holds the response of a call to runtime.ResolveAddress","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Chaos actor methods available","","","","","","","","","","Chaos Actor","","Constructor for Account actor","CallerValidation violates VM call validation constraints.","","Resolves address, and returns the resolved address …","","","","","","","polyval evaluates a polynomial given by coefficients <code>p</code> in …","","","","","","","","","","","","","Extrapolate the CumSumRatio given two filters.","The natural log of Q.128 x.","Balance table which handles getting and updating token …","","Trait to allow multiple error types to be able to be …","Downcast a dynamic std Error into an <code>ActorError</code>. If the …","Downcast a dynamic std Error into an <code>ActorError</code>. If the …","Wrap the error with a message, without overwriting an …","Multimap stores multiple values per key in a Hamt of Amts.…","Set is a Hamt with empty values for the purpose of acting …","SetMultimap is a hamt with values that are also a hamt …","","State includes the address for the actor","","Account actor methods available","","","Account Actor","","","The actor to call (ID address)","The method number to call (must accept empty parameters)","Cron actor state which holds entries to call during epoch …","Entries is a set of actors (and corresponding methods) to …","Cron actor methods available","","","Constructor parameters for Cron actor, contains entries …","Entries is a set of actors (and corresponding methods) to …","Cron actor","","State is reponsible for creating","","","","Init actor Constructor parameters","","Init actor Exec Params","","","Init actor Exec Return value","ID based address for created actor","Reorg safe address for actor","Init actor methods available","","","Init actor","","Cid prefix for piece Cids","Note: Deal Collateral is only released and returned to …","","","","","","Arbitrary client chosen label to apply to the deal","","","","","","ClientDealProposal is a DealProposal signed by a client","","","","","","","Market actor state","Amt<DealID, DealProposal>","Amt<DealID, DealState>","PendingProposals tracks dealProposals that have not yet …","Total amount held in escrow, indexed by actor address …","Amount locked, indexed by actor address. Note: the …","Deal id state sequential incrementer","Metadata cached for efficient iteration over deals. …","","Total Client Collateral that is locked -> unlocked when …","Total Provider Collateral that is locked -> unlocked when …","Total storage fee that is locked in escrow -> unlocked …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A specialization of a array to deals.","A specialization of a array to deals.","Market actor methods available","","","","","","","","","","Market Actor","Validates a collection of deal dealProposals for …","","","Wrapper for working with an AMT[ChainEpoch]*Bitfield …","","","Deadlines contains Deadline objects, describing the …","","Deadline holds the state for all sectors due at a …","Partitions in this deadline, in order. The keys of this …","Maps epochs to partitions that <em>may</em> have sectors that …","","Partitions with sectors that terminated early.","The number of non-terminated sectors in this deadline …","The total number of sectors in this deadline (incl dead).","Memoized sum of faulty power in partitions.","","","","","","","","","Power activated or deactivated (positive or negative).","","","","A bitfield of all sectors in the proven partitions.","A subset of <code>sectors</code> that should be ignored.","","","Returns true if the deadline at the given index is …","","","","","ExpirationSet is a collection of sector numbers that are …","Sectors expiring “on time” at the end of their …","Sectors expiring “early” due to being faulty for too …","Pledge total for the on-time sectors","Power that is currently active (not faulty)","Power that is currently faulty","A queue of expiration sets by epoch, representing the …","","","","","Base reward for successfully disputing a window posts …","Base penalty for a successful disputed window post proof.","","","The projected block reward a sector would earn over some …","The penalty for a sector continuing faulty for another …","This is the SP(t) penalty for a newly faulty sector that …","Penalty to locked pledge collateral for the termination …","","Computes the PreCommit deposit given sector qa weight and …","Computes the pledge requirement for committing new …","","Returns the amount of a reward to vest, and the vesting …","","Sector numbers in this partition, including faulty, …","Unproven sectors in this partition. This bitfield will be …","Subset of sectors detected/declared faulty and not yet …","Subset of faulty sectors expected to recover on next PoSt …","Subset of sectors terminated but not yet removed from …","Maps epochs sectors that expire in or before that epoch. …","Subset of terminated that were before their committed …","Power of not-yet-terminated sectors (incl faulty & …","Power of yet-to-be-proved sectors (never faulty).","Power of currently-faulty sectors. FaultyPower <= …","Power of expected-to-recover sectors. RecoveringPower <= …","","","","The period over which all a miner’s active sectors will …","The duration of a deadline’s challenge window, the …","The number of non-overlapping PoSt deadlines in each …","The maximum distance back that a valid Window PoSt must …","","The maximum number of sectors that a miner can have …","Maximum number of partitions that will be assigned to a …","Maximum number of control addresses a miner may register.","MaxPeerIDLength is the maximum length allowed for any …","MaxMultiaddrData is the maximum amount of data that can …","","","The maximum number of partitions that may be required to …","Maximum number of unique “declarations” in batch …","The maximum number of sector infos that may be required …","The maximum number of partitions that may be required to …","The maximum number of new sectors that may be staged by a …","Epochs after which chain state is final with overwhelming …","Prefix for sealed sector CIDs (CommR).","List of proof types which can be used when creating new …","Checks whether a seal proof type is supported for new …","Maximum duration to allow for the sealing process for …","Maximum duration to allow for the sealing process for …","","Number of epochs between publishing the precommit and …","Lookback from the deadline’s challenge window opening …","Minimum period before a deadline’s challenge window …","The maximum age of a fault before the sector is …","Staging period for a miner worker key change. Finality is …","Minimum number of epochs past the current epoch a sector …","Maximum number of epochs past the current epoch a sector …","Ratio of sector size to maximum deals per sector. The …","Number of epochs after a consensus fault for which a …","Returns the power for a sector size and weight.","Returns the quality-adjusted power for a sector.","Determine maximum number of deal miner’s sector can hold","Specification for a linear vesting schedule.","","","","","","","","Maps deadlines to partition maps.","Maps partitions to sector bitfields.","","","Balance of Miner Actor should be greater than or equal to …","Contains static info about this miner","Total funds locked as pre_commit_deposit","Total rewards and added funds locked in vesting table","VestingFunds (Vesting Funds schedule for the miner).","Absolute value of debt this miner owes from unpaid fees.","Sum of initial pledge requirements of all active sectors","Sectors that have been pre-committed but not yet proven. …","PreCommittedSectorsExpiry maintains the state required to …","Allocated sector IDs. Sector IDs can never be reused once …","Information for all proven and not-yet-garbage-collected …","The first epoch in this miner’s current proving period. …","Index of the deadline within the proving period beginning …","The sector numbers due for PoSt at each deadline in the …","Deadlines with outstanding fees for early sector …","","","","","Power that was faulty before this advance (including …","Power of new faults and failed recoveries","Total faulty power after detecting faults (before …","Static information about miner","Account that owns this miner","Worker account for this miner This will be the key that …","Additional addresses that are permitted to submit …","Optional worker key to update at an epoch","Libp2p identity that should be used when connecting to …","Vector of byte arrays representing Libp2p multi-addresses …","The proof type used by this miner for sealing sectors.","Amount of space in each sector committed to the network …","The number of sectors in each Window PoSt partition …","The next epoch this miner is eligible for certain …","A proposed new owner account for this miner. Must be …","","Sectors maps epochs at which sectors expired, to …","","","","","","","Storage miner actor constructor params are defined here …","","","","","","","","","","","","","","","","","","","","","","","","","","Partitions are numbered per-deadline, from zero.","Sectors skipped while proving that weren’t already …","Information submitted by a miner to provide a Window PoSt.","The deadline index which the submission targets.","The partitions being proven.","Array of proofs, one per distinct registered proof type …","The epoch at which these proofs is being committed to a …","The ticket randomness on the chain at the …","","","","","","","","","","","","","","","","","","","","","","","","The deadline to which the faulty sectors are assigned, in …","Partition index within the deadline containing the faulty …","Sectors in the partition being declared faulty.","","","","The deadline to which the recovered sectors are assigned, …","Partition index within the deadline containing the …","Sectors in the partition being declared recovered.","","","","","","","","","","","","","Must be an ID address","","","","","","CommR","","","","Whether to replace a “committed capacity” no-deal …","The committed capacity sector to replace, and its …","","","Information stored on-chain for a pre-committed sector.","","","","Integral of active deals over sector lifetime, 0 if …","Integral of active verified deals over sector lifetime","Information stored on-chain for a proven sector.","","The seal proof type implies the PoSt proofs","CommR","","Epoch during which the sector proof was accepted","Epoch during which the sector expires","Integral of active deals over sector lifetime","Integral of active verified deals over sector lifetime","Pledge collected to commit this sector","Expected one day projection of reward for sector computed …","Expected twenty day projection of reward for sector …","Age of sector this sector replaced or zero","Day reward of sector this sector replace or zero","","","","","","","","","","","","","Represents the vesting table state for the miner. It is a …","","Storage Miner actor methods available","","","","","","","","","","","","","","","","","","","","","","","","","Miner Actor here in order to update the Power Actor to v3.","","Multisig actor state","","","","","","","","Transaction ID type","","Transaction type used in multisig actor","","","","","","Data for a BLAKE2B-256 to be attached to methods …","","","","","","Constructor parameters for multisig actor.","","","","","Propose method call parameters.","","","","","Propose method call return.","TxnID is the ID of the proposed transaction.","Applied indicates if the transaction was applied as …","Code is the exitcode of the transaction, if Applied is …","Ret is the return value of the transaction, if Applied is …","Parameters for approve and cancel multisig functions.","","Optional hash of proposal to ensure an operation can only …","Parameters for approve and cancel multisig functions.","Applied indicates if the transaction was applied as …","Code is the exitcode of the transaction, if Applied is …","Ret is the return value of the transaction, if Applied is …","Add signer params.","","","Remove signer params.","","","Swap signer multisig method params","","","Propose method call parameters","","Lock balance call params.","","","","Multisig actor methods available","","","","","","","","","","Multisig Actor","","Duration of each tipset epoch.","The expected number of block producers in each epoch.","","","","","","","Precision used for making QA power calculations","Quality multiplier for committed capacity (no deals) in a …","Quality multiplier for unverified deals in a sector","Quality multiplier for verified deals in a sector","","The Lane state tracks the latest (highest) voucher nonce …","","","Specifies which <code>lane</code>s to be merged with what <code>nonce</code> on …","","","A given payment channel actor is established by <code>from</code> to …","Channel owner, who has funded the actor.","Recipient of payouts from channel.","Amount successfully redeemed through the payment channel, …","Height at which the channel can be collected.","Height before which the channel <code>ToSend</code> cannot be …","Collections of lane states for the channel, maintained in …","Maximum number of lanes in a channel","","","","Constructor parameters for payment channel actor","","","A voucher is sent by <code>from</code> to <code>to</code> off-chain in order to …","ChannelAddr is the address of the payment channel this …","Min epoch before which the voucher cannot be redeemed","Max epoch beyond which the voucher cannot be redeemed set …","(optional) Used by <code>to</code> to validate","(optional) Specified by <code>from</code> to add a verification method …","Specifies which lane the Voucher merges into (will be …","Set by <code>from</code> to prevent redemption of stale vouchers on a …","Amount voucher can be redeemed for","(optional) Can extend channel min_settle_height if needed","(optional) Set of lanes to be merged into <code>lane</code>","Sender’s signature over the voucher (sign on none)","Modular Verification method","","","","Payment Verification parameters","","","","","","Payment Channel actor methods available","","","","","Payment Channel actor","","Minimum power of an individual miner to meet the …","Maximum number of prove commits a miner can submit in one …","Storage power actor state","","","","","","","","","","","Number of miners having proven the minimum consensus …","A queue of events to be triggered by cron, indexed by …","First epoch in which a cron task may be stored. Cron will …","Claimed power for each miner.","","","","Miner’s proof type used to determine minimum miner size","Sum of raw byte power for a miner’s sectors.","Sum of quality adjusted power for a miner’s sectors.","","","","","Implicit termination after all deals expire","Unscheduled explicit termination by the miner","Implicit termination due to unrecovered fault","","","","","","","","","","","Canonical ID-based address for the actor.","Re-org safe address for created actor.","","","","","","","","","","","","Storage power actor methods available","Constructor for Storage Power Actor","","","","","","","","Storage Power Actor","","Floor(e^(ln[1 + 200%] / epochsInYear) * 2^128 Q.128 …","","1EiB","","","","","","","Reward actor state","Target CumsumRealized needs to reach for …","CumsumRealized is cumulative sum of network power capped …","Ceiling of real effective network time <code>theta</code> based on …","EffectiveBaselinePower is the baseline power at the …","The reward to be paid in per WinCount to block producers. …","Smoothed <code>this_epoch_reward</code>.","The baseline power the network is targeting at st.Epoch.","Epoch tracks for which epoch the Reward was computed.","","","","Defines vestion function type for reward actor.","","","","","","","","","","","PenaltyMultiplier is the factor miner penaltys are scaled …","Reward actor methods available","","","","","Reward Actor","","","","","","","","","","Distinguished AccountActor that is the destination of all …","","Defines first available ID address after builtin actors","","System actor methods.","","System actor state.","System actor.","","","","","","","","","","","","DataCap is an integer number of bytes. We can introduce …","","Address of verified client.","Number of bytes to use.","","","Account actor methods available","","","","","","","","","","","","","","","","","","","","Set of actor code types that can represent external …","Returns true if the code <code>Cid</code> belongs to a builtin actor.","Returns true if the code belongs to a singleton actor.","Returns true if the code belongs to an account actor.","Tests whether a code CID represents an actor that can be …","Duration of each tipset epoch.","The expected number of block producers in each epoch.","","","","","","","Precision used for making QA power calculations","Quality multiplier for committed capacity (no deals) in a …","Quality multiplier for unverified deals in a sector","Quality multiplier for verified deals in a sector","Returns the minimum storage power required for each seal …","","","","","","","","","Distinguished AccountActor that is the destination of all …","","Defines first available ID address after builtin actors","Convenience macro for generating Actor Errors","The error type that gets returned by actor method calls.","State of all actor implementations.","Link to code for the actor.","Link to the state of the actor.","Sequence of the actor.","Tokens available to the actor.","Deal identifier used in market and miner actors","ExitCode defines the exit code from the VM execution.","","Indicates failure to find an actor in the state tree.","Indicates failure to find the code for an actor.","Indicates failure to find a method in an actor.","Used for catching panics currently. (marked as …","Indicates a message sender has insufficient funds for a …","Indicates a message invocation out of sequence.","Indicates message execution (including subcalls) used …","Indicates a message execution is forbidden for the caller.","Indicates actor code performed a disallowed operation. …","Indicates an invalid argument passed to a runtime method.","Reserved exit codes, do not use.","","","","","Indicates a method parameter is invalid.","Indicates a requested resource does not exist.","Indicates an action is disallowed.","Indicates a balance of funds is insufficient.","Indicates an actor’s internal state is invalid.","Indicates de/serialization failure within actor code.","Power actor specific exit code.","","Method number indicator for calling actor methods.","Serialized bytes to be used as parameters into actor …","Token type to be used within the VM.","Map type to be used within actors. The underlying type is …","Deal weight","Create a hamt with a custom bitwidth.","Create a map with a root cid.","Create a map with a root cidonstructor for Account actor","","","Allocates a new ID address and stores a mapping of the …","ResolveAddress resolves an address to an ID-address, if …","Init actor constructor","Exec init actor","","Computes weight for a deal proposal, which is a function …","","","","","","","","Adds values to the queue entry for an epoch.","","Cut cuts the elements from the bits in the given bitfield …","","Removes and returns all values with keys less than or …","","","","","","","","","","","","Adds some partition numbers to the set expiring at an …","PopExpiredSectors terminates expired sectors from all …","Adds sectors to a deadline. It’s the caller’s …","","","","RemovePartitions removes the specified partitions, …","","","Processes all PoSt submissions, marking unproven sectors …","","","","","Processes a series of posts, recording proven partitions …","","","RescheduleSectorExpirations reschedules the expirations …","Returns the deadline and partition index for a sector …","","Adds sectors and power to the expiration set in place.","Removes sectors and power from the expiration set in …","A set is empty if it has no sectors. The power and pledge …","Counts all sectors in the expiration set.","validates a set of assertions that must hold for …","Loads a queue root.","Adds a collection of sectors to their on-time target …","Reschedules some sectors to a new (quantized) expiration …","Re-schedules sectors to expire at an early expiration …","Re-schedules <em>all</em> sectors to expire at an early expiration …","Removes sectors from any queue entries in which they …","Removes some sectors and adds some others. The sectors …","Remove some sectors from the queue. The sectors may be …","Removes and aggregates entries from the queue up to and …","","Live sectors are those that are not terminated (but may …","Active sectors are those that are neither terminated nor …","Active power is power of non-faulty sectors.","AddSectors adds new sectors to the partition. The sectors …","marks a set of sectors faulty","Declares a set of sectors faulty. Already faulty sectors …","Removes sector numbers from faults and thus from …","Activates unproven sectors, returning the activated power.","Declares sectors as recovering. Non-faulty and already …","Removes sectors from recoveries and recovering power. …","RescheduleExpirations moves expiring sectors to the …","Replaces a number of “old” sectors with new ones. The …","Record the epoch of any sectors expiring early, for …","Marks a collection of sectors as terminated. The sectors …","PopExpiredSectors traverses the expiration queue up to …","Marks all non-faulty sectors in the partition as faulty …","","Discovers how skipped faults declared during post …","Test invariants about the partition power are valid.","","","","","","Check validates all bitfields and counts the number of …","Counts the number of partitions & sectors within the map.","Records the given sector bitfield at the given …","Records the given sectors at the given deadline/partition …","Returns a sorted vec of deadlines in the map.","Walks the deadlines in deadline order.","Records the given sectors at the given partition.","Records the given sector bitfield at the given partition …","Counts the number of partitions & sectors within the map.","Returns a sorted vec of partitions in the map.","Walks the partitions in the map, in order of increasing …","","","","","","","","Loads info for a set of sectors to be proven. If any of …","Loads sector info for a sequence of sectors, substituting …","","","","Returns deadline calculations for the current (according …","","","Returns deadline calculations for the current (according …","","","Stores a pre-committed sector info, failing if the sector …","","Gets and returns the requested pre-committed sectors, …","","","","","","","Returns the deadline and partition index for a sector …","Schedules each sector to expire at its next deadline end. …","Assign new sectors to deadlines.","Pops up to <code>max_sectors</code> early terminated sectors from all …","","Loads sector info for a sequence of sectors.","","","Loads the vesting funds table from the store.","Saves the vesting table to the store.","","","","","First vests and unlocks the vested funds AND then locks …","Draws from vesting table and unlocked funds to repay up …","Repays the full miner actor fee debt.  Returns the amount …","Unlocks an amount of funds that have <em>not yet vested</em>, if …","Unlocks all vesting funds that have vested before the …","CheckVestedFunds returns the amount of vested funds that …","Unclaimed funds that are not locked – includes funds …","Unclaimed funds. Actor balance - (locked funds, precommit …","","pre-commit expiry","","","","","","Returns true if we’re below the partition/sector limit. …","","","","","","","","Checks if <code>address</code> is in the list of signers","Set locked amount in multisig state.","Returns amount locked in multisig contract","Iterates all pending transactions and removes an address …","","Constructor for Multisig actor","Multisig actor propose function","Multisig actor approve function","Multisig actor cancel function","Multisig actor function to add signers to multisig","Multisig actor function to remove signers to multisig","Multisig actor function to swap signers to multisig","Multisig actor function to change number of approvals …","Multisig actor function to change number of approvals …","","","Constructor for Payment channel actor","","","","","","Checks power actor state for if miner meets minimum …","","","","","","","System actor constructor.","","Constructor for Registry Actor","","","","Called by StorageMarketActor during PublishStorageDeals. …","Called by HandleInitTimeoutDeals from StorageMarketActor …","Initializes a new empty balance table","Initializes a balance table from a root Cid","Retrieve root from balance table","Gets token amount for given address in balance table","Adds token amount to previously initialized account.","Subtracts up to the specified amount from a balance, …","Subtracts value from a balance, and errors if full amount …","Returns total balance held by this balance table","Initializes a new empty multimap. The outer_bitwidth is …","Initializes a multimap from a root Cid","Retrieve root from the multimap.","Adds a value for a key.","Gets the Array of value type <code>V</code> using the multimap store.","Removes all values for a key.","Iterates through all values in the array at a given key.","Iterates through all arrays in the multimap","Initializes a new empty Set with the default bitwidth.","Initializes a new empty Set given a bitwidth.","Initializes a Set from a root Cid.","Retrieve root from the Set.","Adds key to the set.","Checks if key exists in the set.","Deletes key from set.","Iterates through all keys in the set.","Collects all keys from the set into a vector.","Initializes a new empty SetMultimap.","Initializes a SetMultimap from a root Cid.","Retrieve root from the SetMultimap.","Puts the DealID in the hash set of the key.","Puts slice of DealIDs in the hash set of the key.","Gets the set at the given index of the <code>SetMultimap</code>","Removes a DealID from a key hash set.","Removes set at index.","Iterates through keys and converts them to a DealID to …","Create a new filter estimate given two Q.0 format ints.","Returns the Q.0 position estimate of the filter","Extrapolate filter “position” delta epochs in the …","","","","","Returns true if error is fatal.","Returns the exit code of the error.","Returns true when the exit code is <code>Ok</code>.","Error message of the actor error.","Prefix error message with a string message.","Constructor for actor state","Safely deducts funds from an Actor","Deposits funds to an Actor","returns true if the exit code was a success","Constructor if data is encoded already","Contructor for encoding Cbor encodable structure.","Returns serialized bytes.","Deserializes the serialized bytes into a defined type."],"i":[0,0,0,1,1,0,2,2,2,2,0,3,3,0,4,4,4,4,0,5,5,0,6,6,0,7,7,7,0,8,8,8,8,8,8,0,9,9,9,0,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,0,0,0,0,0,14,0,15,15,0,0,0,16,16,0,17,0,18,18,0,19,0,0,0,20,20,20,0,21,0,22,22,0,23,23,0,24,24,0,0,0,0,25,25,25,25,25,25,25,25,25,25,25,0,26,26,0,27,27,27,0,28,28,28,28,28,28,28,28,28,28,28,0,0,0,29,29,0,30,30,0,31,31,0,32,0,33,0,34,0,35,35,0,36,0,37,0,38,38,38,0,39,39,0,40,40,0,41,41,0,0,0,42,42,42,42,42,42,42,42,42,0,0,0,0,0,43,0,0,44,0,45,45,45,45,45,45,45,45,0,0,46,46,46,46,0,47,47,47,47,47,47,47,0,0,0,0,0,0,0,48,48,48,48,48,0,49,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,50,50,50,50,50,50,50,50,0,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,52,52,52,0,0,0,0,0,0,53,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,55,55,55,55,55,0,56,56,56,56,56,56,56,56,56,56,56,0,57,57,57,0,0,0,0,0,58,58,58,58,58,58,0,59,0,60,60,0,61,61,61,0,62,62,0,63,0,64,0,65,0,66,66,0,67,67,67,67,67,0,68,68,0,69,0,70,0,71,71,71,71,0,72,0,73,73,73,0,74,0,75,0,76,76,76,0,77,0,78,78,78,0,79,79,0,80,0,81,81,81,0,82,0,83,83,0,0,84,84,84,84,84,84,84,84,84,84,0,85,85,85,85,85,0,86,86,86,86,86,86,86,86,86,86,86,86,86,0,87,87,0,88,88,0,89,89,0,90,90,0,91,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,0,0,93,93,93,93,93,93,93,0,94,0,95,95,95,95,95,0,96,96,96,96,96,0,97,97,97,97,0,98,98,98,98,0,99,99,99,99,0,100,100,0,101,101,101,0,102,102,0,103,103,0,104,104,0,105,0,106,106,106,0,107,107,107,107,107,107,107,107,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,0,109,109,0,110,110,110,110,110,110,0,0,0,0,0,111,111,0,112,112,112,112,112,112,112,112,112,112,112,0,113,113,113,0,114,114,0,115,115,0,116,116,116,116,0,0,0,0,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,0,118,118,118,0,119,119,0,0,0,0,0,0,0,0,120,120,120,120,120,0,121,121,0,122,122,0,123,123,0,124,124,124,124,0,125,125,125,125,125,125,125,125,0,0,0,0,0,0,126,126,126,126,126,0,127,127,127,127,127,127,127,127,127,127,127,0,128,128,0,129,129,129,129,0,130,130,0,0,131,131,131,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,133,133,133,0,0,134,134,0,0,0,0,135,135,0,0,0,136,136,136,136,136,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,137,137,137,0,0,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,0,0,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,139,139,139,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,144,144,144,144,144,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,146,146,146,146,146,147,147,147,147,147,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,152,152,152,17,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,153,153,153,153,153,153,153,153,153,153,153,153,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,154,154,154,154,154,154,154,154,154,154,154,154,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,155,155,155,155,155,155,155,155,155,155,155,155,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,156,156,156,156,156,156,156,156,156,156,156,156,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,157,157,157,157,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,158,158,158,158,158,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,159,159,159,159,159,159,159,159,159,159,159,159,160,160,160,160,160,160,160,160,160,160,160,160,53,53,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,161,161,161,161,161,161,161,161,161,161,161,161,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,162,162,162,162,162,162,162,162,162,162,162,162,163,163,163,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,165,165,165,165,165,110,110,110,110,110,110,110,110,110,110,110,110,108,108,108,108,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,109,109,109,109,109,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,166,166,166,166,166,166,166,166,166,166,166,166,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,167,167,167,167,167,167,167,167,167,167,167,167,168,168,168,168,168,168,168,168,168,168,168,168,169,169,169,169,169,169,169,169,169,169,169,169,170,170,170,170,170,170,170,170,170,170,170,170,127,127,127,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,128,128,128,128,128,126,126,126,126,126,126,126,126,126,126,126,126,126,126,129,129,129,129,129,129,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,131,131,131,131,171,171,171,171,171,171,171,171,171,171,171,171,172,172,172,172,172,172,172,172,172,172,172,172,173,173,173,173,173,173,173,173,173,173,173,173,174,174,174,174,174,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,175,175,175,175,176,176,176,176,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,177,177,177,177,178,178,178,178,178,178,178,178,178,178,178,178,179,179,179,179,179,179,179,179,179,179,179,179,180,180,180,180,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,181,181,181,181,132,132,132,132,132,132,132,132,132,132,132,132,182,182,182,182,182,182,182,182,182,182,182,182,183,183,183,183,183,183,183,183,183,183,183,183,133,133,133,133,133,133,133,133,133,133,133,133,184,184,184,184,184,184,184,184,184,184,184,184,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,136,136,136,136,185,185,185,185,185,185,185,185,185,185,185,185,186,186,186,186,186,186,186,186,186,186,186,186,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,187,187,187,187,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,188,188,188,188,189,189,189,189,189,189,189,189,189,189,189,189,12,12,12,12,12,12,12,12,12,12,12,12,12,12,190,190,190,190,190,190,190,190,190,190,190,190,191,191,191,191,191,191,191,191,191,191,191,191,192,192,192,192,192,192,192,192,192,192,192,192,193,193,193,193,193,193,193,193,193,193,193,193,194,194,194,194,194,194,194,194,194,194,194,194,195,195,195,195,195,195,195,195,195,195,195,195,196,196,196,196,196,196,196,196,196,196,196,196,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,137,198,138,197,198,197,197,198,198,137,137,197,197,138,197,198,198,138,197,137,138,137,198,138,138,138,198,137,198,115,16,25,26,27,48,50,51,54,84,85,86,87,89,93,94,95,108,109,112,113,118,119,128,126,129,130,134,135,12,17,19,28,37,38,48,51,159,160,57,91,94,108,109,117,127,182,1,12,16,16,25,25,26,26,27,27,51,51,56,56,83,83,84,84,85,85,86,86,87,87,89,89,95,95,108,108,109,109,112,112,113,113,118,118,128,126,126,129,129,130,130,134,134,135,135,188,12,12,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,163,164,165,168,169,170,172,173,174,175,176,177,178,179,180,181,184,191,192,193,194,195,196,16,19,25,26,27,48,51,56,60,83,84,85,86,87,88,89,94,95,96,110,108,109,112,113,118,119,128,126,129,130,134,135,188,12,51,51,57,51,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,163,164,165,168,169,170,172,173,174,175,176,177,178,179,180,181,184,191,192,193,194,195,196,14,17,16,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,45,156,46,48,50,51,160,54,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,110,108,109,111,112,113,114,115,117,118,119,120,121,122,123,124,127,128,126,129,130,182,133,134,135,1,2,3,4,5,6,7,8,9,12,14,17,16,19,20,21,22,23,25,26,27,28,29,30,32,33,34,35,37,38,39,40,44,45,156,46,48,50,51,160,54,56,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,95,97,98,99,100,101,102,103,104,105,106,110,108,109,111,112,113,114,115,117,118,119,120,121,122,123,124,127,128,126,129,130,182,133,134,135,1,2,3,4,5,6,7,8,9,12,15,15,18,18,24,24,42,42,92,92,107,107,116,116,125,125,128,128,131,131,132,132,136,136,10,10,139,153,154,155,161,162,166,167,171,183,185,11,139,139,20,20,20,154,154,25,25,25,25,25,28,28,155,43,43,43,43,43,43,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,44,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,159,159,159,159,159,159,159,160,160,160,160,160,160,160,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,56,57,57,57,57,91,91,91,91,161,93,93,93,93,94,162,162,162,162,162,162,162,162,162,110,112,166,166,166,166,117,117,117,117,117,117,127,127,126,183,133,185,185,185,185,185,185,186,186,186,186,186,186,186,186,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,188,189,189,189,189,189,189,189,189,189,12,12,12,190,190,197,197,197,197,197,197,197,137,137,137,138,198,198,198,198],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["sendargs",3]],[["result",4],["sendreturn",3],["actorerror",3]]],[[]],[[["callervalidationargs",3]],[["actorerror",3],["result",4]]],[[["createactorargs",3]],[["actorerror",3],["result",4]]],[[["address",3]],[["resolveaddressresponse",3],["result",4],["actorerror",3]]],[[["address",3]],[["actorerror",3],["result",4]]],[[["mutatestateargs",3]],[["actorerror",3],["result",4]]],[[["abortwithargs",3]],[["actorerror",3],["result",4]]],[[],[["result",4],["actorerror",3],["inspectruntimereturn",3]]],null,null,[[["bigint",3]],["bigint",3]],[[],[["result",4],["vec",3],["parsebiginterror",3]]],null,null,null,null,null,null,null,null,null,null,null,[[["filterestimate",3],["chainepoch",6]],["bigint",3]],[[["bigint",3]],["bigint",3]],null,null,null,[[["exitcode",4]],["actorerror",3]],[[],["actorerror",3]],[[],[["box",3],["stderror",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["chainepoch",6],["address",3],["state",3]],[["result",4],["box",3]]],[[["chainepoch",6],["dealarray",6],["address",3]],[["result",4],["box",3]]],null,null,null,[[["sectoronchaininfo",3],["vec",3],["u64",15]],[["vec",3],["string",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["chainepoch",6]],["deadlineinfo",3]],[[["usize",15],["chainepoch",6]],["bool",15]],[[["deadlineinfo",3]],["quantspec",3]],[[["usize",15],["chainepoch",6]],["bool",15]],[[["usize",15],["chainepoch",6]],["bool",15]],[[["chainepoch",6]],["deadlineinfo",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["filterestimate",3],["storagepower",6],["chainepoch",6]],["tokenamount",6]],[[["filterestimate",3],["storagepower",6]],["tokenamount",6]],[[["filterestimate",3],["storagepower",6]],["tokenamount",6]],[[["filterestimate",3],["storagepower",6],["tokenamount",6],["chainepoch",6]],["tokenamount",6]],[[["filterestimate",3],["storagepower",6]],["tokenamount",6]],[[["filterestimate",3],["storagepower",6]],["tokenamount",6]],[[["storagepower",6],["filterestimate",3],["tokenamount",6]],["tokenamount",6]],[[["tokenamount",6]],["tokenamount",6]],[[["tokenamount",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]],["u64",15]],null,null,null,[[["networkversion",4],["registeredsealproof",4]],["bool",15]],[[["networkversion",4],["registeredsealproof",4]],["bool",15]],[[["registeredsealproof",4]],[["option",4],["chainepoch",6]]],[[["networkversion",4],["registeredsealproof",4]],[["option",4],["chainepoch",6]]],null,null,null,null,null,null,null,null,null,null,[[["dealweight",6],["chainepoch",6],["sectorsize",4]],["storagepower",6]],[[["sectorsize",4],["sectoronchaininfo",3]],["storagepower",6]],[[["sectorsize",4]],["u64",15]],null,null,null,null,null,null,[[["tokenamount",6],["chainepoch",6]],["tokenamount",6]],[[["registeredpostproof",4],["powerpair",3]],["tokenamount",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["map",6],["address",3],["claim",3]],[["result",4],["box",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,[[["registeredpostproof",4]],[["storagepower",6],["result",4],["string",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u32",15]],["map",6]],[[["cid",3]],[["result",4],["map",6],["hamterror",4]]],[[["u32",15],["cid",3]],[["result",4],["map",6],["hamterror",4]]],[[["u64",15]],["byteskey",3]],[[],[["uvarinterror",4],["result",4],["u64",15]]],[[["serialized",3],["cid",3],["methodnum",6]],[["option",4],["result",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[],["u64",15]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["u64",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[["error",3]],["actorerror",3]],[[["error",3]],["actorerror",3]],[[["serialized",3]],["bool",15]],[[["serialized",3]],["bool",15]],[[["actorstate",3]],["bool",15]],[[["actorstate",3]],["bool",15]],[[["actorerror",3]],["bool",15]],[[["actorerror",3]],["bool",15]],[[["exitcode",4]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[],["serialized",3]],[[],["serialized",3]],[[],["exitcode",4]],[[],["actorerror",3]],[[],["actorstate",3]],[[],[["result",4],["exitcode",4]]],[[],[["result",4],["actorstate",3]]],[[],[["serialized",3],["result",4]]],[[["i64",15]],[["option",4],["exitcode",4]]],[[["u64",15]],[["option",4],["exitcode",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["signedvoucher",3]]],[[],["entry",3]],[[],["dealproposal",3]],[[],["clientdealproposal",3]],[[],["dealstate",3]],[[],["expirationset",3]],[[],["partition",3]],[[],["powerpair",3]],[[],["state",3]],[[],["sectorprecommitinfo",3]],[[],["sectorprecommitonchaininfo",3]],[[],["sectoronchaininfo",3]],[[],["fault",3]],[[],["disputewindowedpostparams",3]],[[],["state",3]],[[],["txnid",3]],[[],["transaction",3]],[[],["lanestate",3]],[[],["merge",3]],[[],["signedvoucher",3]],[[],["modverifyparams",3]],[[],["claim",3]],[[],["cronevent",3]],[[],["vestingfunction",4]],[[],["reward",3]],[[],["awardblockrewardparams",3]],[[],["thisepochrewardreturn",3]],[[],["verifierparams",3]],[[],["bytesparams",3]],[[],["filterestimate",3]],[[],["state",3]],[[],["constructorparams",3]],[[],["state",3]],[[],["verifydealsforactivationreturn",3]],[[],["sectorweights",3]],[[],["expirationset",3]],[[],["powerpair",3]],[[],["deadlinesectormap",3]],[[],["partitionsectormap",3]],[[],["terminationresult",3]],[[],["vestingfunds",3]],[[],["txnid",3]],[[],["lanestate",3]],[[],["merge",3]],[[],["state",3]],[[],["state",3]],[[],["state",3]],[[],["state",3]],[[],["filterestimate",3]],[[["entry",3]],["bool",15]],[[["entry",3]],["bool",15]],[[["dealproposal",3]],["bool",15]],[[["dealproposal",3]],["bool",15]],[[["clientdealproposal",3]],["bool",15]],[[["clientdealproposal",3]],["bool",15]],[[["dealstate",3]],["bool",15]],[[["dealstate",3]],["bool",15]],[[["powerpair",3]],["bool",15]],[[["powerpair",3]],["bool",15]],[[["minerinfo",3]],["bool",15]],[[["minerinfo",3]],["bool",15]],[[["workerkeychange",3]],["bool",15]],[[["workerkeychange",3]],["bool",15]],[[["sectorprecommitinfo",3]],["bool",15]],[[["sectorprecommitinfo",3]],["bool",15]],[[["sectorprecommitonchaininfo",3]],["bool",15]],[[["sectorprecommitonchaininfo",3]],["bool",15]],[[["sectoronchaininfo",3]],["bool",15]],[[["sectoronchaininfo",3]],["bool",15]],[[["fault",3]],["bool",15]],[[["fault",3]],["bool",15]],[[["disputewindowedpostparams",3]],["bool",15]],[[["disputewindowedpostparams",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["lanestate",3]],["bool",15]],[[["lanestate",3]],["bool",15]],[[["merge",3]],["bool",15]],[[["merge",3]],["bool",15]],[[["signedvoucher",3]],["bool",15]],[[["signedvoucher",3]],["bool",15]],[[["modverifyparams",3]],["bool",15]],[[["modverifyparams",3]],["bool",15]],[[["claim",3]],["bool",15]],[[["claim",3]],["bool",15]],[[["vestingfunction",4]],["bool",15]],[[["reward",3]],["bool",15]],[[["reward",3]],["bool",15]],[[["awardblockrewardparams",3]],["bool",15]],[[["awardblockrewardparams",3]],["bool",15]],[[["thisepochrewardreturn",3]],["bool",15]],[[["thisepochrewardreturn",3]],["bool",15]],[[["verifierparams",3]],["bool",15]],[[["verifierparams",3]],["bool",15]],[[["bytesparams",3]],["bool",15]],[[["bytesparams",3]],["bool",15]],[[],["bool",15]],[[["filterestimate",3]],["bool",15]],[[["filterestimate",3]],["bool",15]],[[],["cid",3]],[[],["cid",3]],[[],["cid",3]],[[],["cid",3]],[[],["cid",3]],[[],["cid",3]],[[],["cid",3]],[[],["cid",3]],[[],["cid",3]],[[],["cid",3]],[[],["cid",3]],[[],["cid",3]],[[]],[[],["bigint",3]],[[],["bigint",3]],[[],["bigint",3]],[[],["bigint",3]],[[],["bigint",3]],[[],["storagepower",6]],[[],["storagepower",6]],[[],["storagepower",6]],[[],["address",3]],[[],["address",3]],[[],["address",3]],[[],["address",3]],[[],["address",3]],[[],["address",3]],[[],["address",3]],[[],["address",3]],[[],["address",3]],[[],["address",3]],[[],["storagepower",6]],[[],["vec",3]],[[],["vec",3]],[[],["bigint",3]],[[],["bigint",3]],[[],["bigint",3]],[[],["bigint",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["serialized",3],["methodnum",6]],[["serialized",3],["actorerror",3],["result",4]]],[[["address",3]],[["actorerror",3],["result",4]]],[[],[["result",4],["actorerror",3],["address",3]]],[[["string",3]],[["box",3],["result",4]]],[[["address",3]],[["hamterror",4],["result",4],["address",3]]],[[["address",3]],[["box",3],["option",4],["result",4]]],[[["constructorparams",3]],[["actorerror",3],["result",4]]],[[["execparams",3]],[["execreturn",3],["actorerror",3],["result",4]]],[[],["chainepoch",6]],[[],["dealweight",6]],[[],["tokenamount",6]],[[],["tokenamount",6]],[[],["tokenamount",6]],[[],[["box",3],["result",4]]],[[],["tokenamount",6]],[[],[["actorerror",3],["result",4]]],[[["quantspec",3],["cid",3]],[["result",4],["amterror",4]]],[[["bitfield",3],["chainepoch",6]],[["result",4],["box",3]]],[[["chainepoch",6]],[["result",4],["box",3]]],[[["bitfield",3]],[["result",4],["box",3]]],[[["hashmap",3]],[["result",4],["box",3]]],[[["chainepoch",6]],[["result",4],["box",3]]],[[["cid",3]]],[[["usize",15]],[["result",4],["box",3],["deadline",3]]],[[],[["result",4],["box",3]]],[[["usize",15],["deadline",3]],[["result",4],["box",3]]],[[],[["box",3],["result",4]]],[[],[["box",3],["result",4],["amt",3]]],[[],[["box",3],["amt",3],["result",4]]],[[],[["box",3],["result",4],["amt",3]]],[[],[["box",3],["amt",3],["result",4]]],[[["usize",15]],[["box",3],["result",4],["partition",3]]],[[["usize",15]],[["box",3],["result",4],["partition",3]]],[[["quantspec",3],["chainepoch",6]],[["result",4],["box",3]]],[[["quantspec",3],["chainepoch",6]],[["expirationset",3],["result",4],["box",3]]],[[["u64",15],["bool",15],["sectorsize",4],["quantspec",3]],[["box",3],["result",4],["powerpair",3]]],[[["u64",15]],[["box",3],["result",4]]],[[["quantspec",3],["chainepoch",6]],[["result",4],["box",3]]],[[["partitionsectormap",3],["chainepoch",6],["sectorsize",4],["quantspec",3],["sectors",3]],[["box",3],["result",4],["powerpair",3]]],[[["bitfield",3],["quantspec",3]],[["box",3],["result",4]]],[[["partitionsectormap",3],["chainepoch",6],["sectorsize",4],["quantspec",3],["sectors",3]],[["box",3],["result",4],["powerpair",3]]],[[["sectorsize",4],["partitionsectormap",3],["sectors",3]],[["result",4],["box",3]]],[[["quantspec",3],["chainepoch",6]],[["result",4],["actorerror",3]]],[[],[["result",4],["box",3]]],[[],[["str",15],["result",4]]],[[["bitfield",3]],[["result",4],["disputeinfo",3],["box",3]]],[[],["bool",15]],[[["chainepoch",6],["sectorsize",4],["quantspec",3],["sectors",3]],[["result",4],["box",3],["postresult",3]]],[[["bitfield",3]],[["result",4],["box",3]]],[[["u64",15]],[["box",3],["result",4]]],[[["partitionsectormap",3],["chainepoch",6],["sectorsize",4],["quantspec",3],["sectors",3]],[["result",4],["box",3],["vec",3]]],[[["sectornumber",6]],[["box",3],["result",4]]],[[]],[[["bitfield",3],["tokenamount",6],["powerpair",3]]],[[["bitfield",3],["tokenamount",6],["powerpair",3]],[["result",4],["box",3]]],[[],["bool",15]],[[],["usize",15]],[[],[["str",15],["result",4]]],[[["quantspec",3],["cid",3]],[["result",4],["amterror",4]]],[[["sectorsize",4]],[["result",4],["box",3]]],[[["sectorsize",4],["chainepoch",6]],[["result",4],["box",3]]],[[["sectorsize",4],["chainepoch",6]],[["box",3],["result",4],["powerpair",3]]],[[["chainepoch",6]],[["result",4],["box",3]]],[[["sectoronchaininfo",3],["sectorsize",4],["vec",3]],[["box",3],["result",4],["powerpair",3]]],[[["sectorsize",4]],[["box",3],["result",4]]],[[["bitfield",3],["sectorsize",4]],[["box",3],["result",4]]],[[["chainepoch",6]],[["expirationset",3],["result",4],["box",3]]],[[],[["box",3],["result",4]]],[[],["bitfield",3]],[[],["bitfield",3]],[[],["powerpair",3]],[[["bool",15],["sectorsize",4],["quantspec",3]],[["box",3],["result",4],["powerpair",3]]],[[["bitfield",3],["chainepoch",6],["sectorsize",4],["quantspec",3]],[["box",3],["result",4]]],[[["chainepoch",6],["unvalidatedbitfield",4],["sectorsize",4],["sectors",3],["quantspec",3]],[["box",3],["result",4]]],[[["sectorsize",4],["quantspec",3],["sectors",3]],[["box",3],["result",4],["powerpair",3]]],[[],["powerpair",3]],[[["sectorsize",4],["sectors",3],["unvalidatedbitfield",4]],[["result",4],["box",3]]],[[["bitfield",3],["powerpair",3]]],[[["unvalidatedbitfield",4],["chainepoch",6],["sectorsize",4],["sectors",3],["quantspec",3]],[["result",4],["box",3],["vec",3]]],[[["sectorsize",4],["quantspec",3]],[["box",3],["result",4]]],[[["bitfield",3],["chainepoch",6]],[["result",4],["box",3]]],[[["unvalidatedbitfield",4],["chainepoch",6],["sectorsize",4],["sectors",3],["quantspec",3]],[["expirationset",3],["result",4],["box",3]]],[[["quantspec",3],["chainepoch",6]],[["expirationset",3],["result",4],["box",3]]],[[["quantspec",3],["chainepoch",6]],[["result",4],["box",3]]],[[["u64",15]],[["box",3],["result",4]]],[[["chainepoch",6],["sectorsize",4],["quantspec",3],["sectors",3],["unvalidatedbitfield",4]],[["box",3],["result",4]]],[[],[["str",15],["result",4]]],[[],[["str",15],["result",4]]],[[],[["string",3],["result",4]]],[[]],[[],["bool",15]],[[]],[[["u64",15]],[["string",3],["result",4]]],[[],[["string",3],["result",4]]],[[["usize",15],["unvalidatedbitfield",4]],[["string",3],["result",4]]],[[["usize",15]],[["string",3],["result",4]]],[[],[["usize",15],["vec",3]]],[[]],[[["usize",15],["vec",3],["u64",15]],[["string",3],["result",4]]],[[["usize",15],["unvalidatedbitfield",4]],[["string",3],["result",4]]],[[],[["string",3],["result",4]]],[[],[["usize",15],["vec",3]]],[[]],[[],["usize",15]],[[],["bool",15]],[[["cid",3]],[["result",4],["amterror",4]]],[[],[["result",4],["vec",3],["actorerror",3]]],[[["sectornumber",6]],[["box",3],["result",4],["option",4]]],[[["sectoronchaininfo",3],["vec",3]],[["result",4],["box",3]]],[[["sectornumber",6]],[["sectoronchaininfo",3],["box",3],["result",4]]],[[["bitfield",3]],[["result",4],["box",3],["vec",3]]],[[["bitfield",3],["sectornumber",6]],[["result",4],["box",3],["vec",3]]],[[["usize",15],["cid",3],["chainepoch",6]],[["box",3],["result",4]]],[[],[["result",4],["minerinfo",3],["box",3]]],[[["minerinfo",3]],[["result",4],["box",3]]],[[["chainepoch",6]],["deadlineinfo",3]],[[["chainepoch",6]],["deadlineinfo",3]],[[["chainepoch",6]],["chainepoch",6]],[[["usize",15]],["quantspec",3]],[[["sectornumber",6]],[["actorerror",3],["result",4]]],[[["bitfield",3]],[["actorerror",3],["result",4]]],[[["sectorprecommitonchaininfo",3]],[["result",4],["box",3]]],[[["sectornumber",6]],[["hamterror",4],["result",4],["option",4]]],[[],[["vec",3],["result",4],["box",3]]],[[],[["result",4],["hamterror",4]]],[[["sectornumber",6]],[["result",4],["bool",15],["box",3]]],[[["sectoronchaininfo",3],["vec",3]],[["result",4],["box",3]]],[[["sectornumber",6]],[["box",3],["result",4],["option",4]]],[[["bitfield",3]],[["result",4],["amterror",4]]],[[],[["result",4],["box",3]]],[[["sectornumber",6]],[["box",3],["result",4]]],[[["sectorsize",4],["deadlinesectormap",3],["chainepoch",6]],[["result",4],["box",3],["vec",3]]],[[["vec",3],["chainepoch",6],["sectoronchaininfo",3],["u64",15],["sectorsize",4]],[["result",4],["box",3]]],[[["u64",15]],[["box",3],["result",4]]],[[["usize",15],["sectornumber",6]],[["result",4],["box",3]]],[[["bitfield",3]],[["result",4],["box",3],["vec",3]]],[[],[["deadlines",3],["result",4],["actorerror",3]]],[[["deadlines",3]],[["result",4],["box",3]]],[[],[["box",3],["vestingfunds",3],["result",4]]],[[["vestingfunds",3]],[["result",4],["box",3]]],[[],["bool",15]],[[["tokenamount",6]],[["string",3],["result",4]]],[[["tokenamount",6]],[["string",3],["result",4]]],[[["tokenamount",6]],[["string",3],["result",4]]],[[["vestspec",3],["tokenamount",6],["chainepoch",6]],[["tokenamount",6],["box",3],["result",4]]],[[["tokenamount",6],["chainepoch",6]],[["result",4],["box",3]]],[[["tokenamount",6]],[["tokenamount",6],["box",3],["result",4]]],[[["tokenamount",6],["chainepoch",6]],[["tokenamount",6],["box",3],["result",4]]],[[["chainepoch",6]],[["tokenamount",6],["box",3],["result",4]]],[[["chainepoch",6]],[["tokenamount",6],["box",3],["result",4]]],[[["tokenamount",6]],[["tokenamount",6],["string",3],["result",4]]],[[["tokenamount",6]],[["tokenamount",6],["string",3],["result",4]]],[[["tokenamount",6]],[["string",3],["result",4]]],[[],["quantspec",3]],[[["sectornumber",6],["chainepoch",6]],[["result",4],["box",3]]],[[["chainepoch",6]],[["tokenamount",6],["box",3],["result",4]]],[[["chainepoch",6]],[["advancedeadlineresult",3],["box",3],["result",4]]],[[["vec",3],["bytesde",3],["u8",15],["vec",3],["vec",3],["registeredpostproof",4],["address",3]],[["actorerror",3],["result",4]]],[[]],[[["u64",15]],["bool",15]],[[],["bool",15]],[[]],[[]],[[["chainepoch",6]],["tokenamount",6]],[[["vestspec",3],["tokenamount",6],["chainepoch",6]]],[[["tokenamount",6],["chainepoch",6]],["tokenamount",6]],[[["minerconstructorparams",3]],[["actorerror",3],["result",4]]],[[["address",3]],["bool",15]],[[["tokenamount",6],["chainepoch",6]]],[[["chainepoch",6]],["tokenamount",6]],[[["address",3]],[["result",4],["box",3]]],[[],["byteskey",3]],[[["constructorparams",3]],[["actorerror",3],["result",4]]],[[["proposeparams",3]],[["result",4],["actorerror",3],["proposereturn",3]]],[[["txnidparams",3]],[["result",4],["approvereturn",3],["actorerror",3]]],[[["txnidparams",3]],[["actorerror",3],["result",4]]],[[["addsignerparams",3]],[["actorerror",3],["result",4]]],[[["removesignerparams",3]],[["actorerror",3],["result",4]]],[[["swapsignerparams",3]],[["actorerror",3],["result",4]]],[[["changenumapprovalsthresholdparams",3]],[["actorerror",3],["result",4]]],[[["lockbalanceparams",3]],[["actorerror",3],["result",4]]],[[["cid",3],["address",3]]],[[],[["vec",3],["result",4],["error",3]]],[[["constructorparams",3]],[["actorerror",3],["result",4]]],[[["updatechannelstateparams",3]],[["actorerror",3],["result",4]]],[[],[["actorerror",3],["result",4]]],[[],[["actorerror",3],["result",4]]],[[],[["result",4],["box",3],["state",3]]],[[],["tokenamount",6]],[[["address",3]],[["result",4],["bool",15],["box",3]]],[[["address",3]],[["box",3],["result",4],["option",4]]],[[]],[[["address",3]],[["box",3],["result",4],["option",4]]],[[["storagepower",6]]],[[],["tokenamount",6]],[[["chainepoch",6]],["tokenamount",6]],[[],[["actorerror",3],["result",4]]],[[["address",3]],[["state",3],["result",4],["box",3]]],[[["address",3]],[["actorerror",3],["result",4]]],[[["addverifierparams",6]],[["actorerror",3],["result",4]]],[[["address",3]],[["actorerror",3],["result",4]]],[[["addverifierclientparams",6]],[["actorerror",3],["result",4]]],[[["usebytesparams",6]],[["actorerror",3],["result",4]]],[[["restorebytesparams",6]],[["actorerror",3],["result",4]]],[[]],[[["cid",3]],[["error",4],["result",4]]],[[],[["result",4],["cid",3],["error",4]]],[[["address",3]],[["tokenamount",6],["box",3],["result",4]]],[[["address",3],["tokenamount",6]],[["result",4],["box",3]]],[[["address",3],["tokenamount",6]],[["tokenamount",6],["box",3],["result",4]]],[[["address",3],["tokenamount",6]],[["result",4],["box",3]]],[[],[["tokenamount",6],["box",3],["result",4]]],[[["u32",15],["usize",15]]],[[["u32",15],["cid",3],["usize",15]],[["error",4],["result",4]]],[[],[["result",4],["cid",3],["error",4]]],[[["byteskey",3]],[["result",4],["box",3]]],[[],[["option",4],["box",3],["result",4]]],[[],[["result",4],["box",3]]],[[],[["result",4],["box",3]]],[[],[["result",4],["box",3]]],[[]],[[["u32",15]]],[[["cid",3]],[["error",4],["result",4]]],[[],[["result",4],["cid",3],["error",4]]],[[["byteskey",3]],[["result",4],["error",4]]],[[],[["result",4],["bool",15],["error",4]]],[[],[["option",4],["error",4],["result",4]]],[[],[["result",4],["box",3]]],[[],[["error",4],["result",4],["vec",3]]],[[]],[[["cid",3]],[["error",4],["result",4]]],[[],[["result",4],["cid",3],["error",4]]],[[["dealid",6],["chainepoch",6]],[["result",4],["box",3]]],[[["chainepoch",6]],[["result",4],["box",3]]],[[["chainepoch",6]],[["box",3],["result",4],["option",4]]],[[["dealid",6],["chainepoch",6]],[["result",4],["box",3]]],[[["chainepoch",6]],[["result",4],["box",3]]],[[["chainepoch",6]],[["result",4],["box",3]]],[[["bigint",3]]],[[],["bigint",3]],[[["chainepoch",6]],["bigint",3]],[[["bigint",3],["bigint",3],["filterestimate",3]]],[[["bigint",3],["chainepoch",6]],["filterestimate",3]],[[["exitcode",4],["string",3]],["actorerror",3]],[[["string",3]],["actorerror",3]],[[],["bool",15]],[[],["exitcode",4]],[[],["bool",15]],[[],["str",15]],[[],["actorerror",3]],[[["u64",15],["cid",3],["bigint",3]],["actorstate",3]],[[["bigint",3]],[["result",4],["string",3]]],[[["bigint",3]]],[[],["bool",15]],[[["u8",15],["vec",3],["global",3]],["serialized",3]],[[],[["result",4],["serialized",3],["error",3]]],[[]],[[],[["error",3],["result",4]]]],"p":[[3,"State"],[3,"CreateActorArgs"],[3,"ResolveAddressResponse"],[3,"SendArgs"],[3,"SendReturn"],[3,"MutateStateArgs"],[3,"AbortWithArgs"],[3,"InspectRuntimeReturn"],[3,"CallerValidationArgs"],[4,"Method"],[3,"Actor"],[3,"FilterEstimate"],[8,"ActorDowncast"],[3,"State"],[4,"Method"],[3,"Entry"],[3,"State"],[4,"Method"],[3,"ConstructorParams"],[3,"State"],[3,"ConstructorParams"],[3,"ExecParams"],[3,"ExecReturn"],[4,"Method"],[3,"DealProposal"],[3,"ClientDealProposal"],[3,"DealState"],[3,"State"],[3,"WithdrawBalanceParams"],[3,"OnMinerSectorsTerminateParams"],[3,"OnMinerSectorsTerminateParamsRef"],[3,"PublishStorageDealsParams"],[3,"PublishStorageDealsReturn"],[3,"VerifyDealsForActivationParams"],[3,"SectorDeals"],[3,"VerifyDealsForActivationParamsRef"],[3,"VerifyDealsForActivationReturn"],[3,"SectorWeights"],[3,"ActivateDealsParams"],[3,"ComputeDataCommitmentParams"],[3,"ComputeDataCommitmentParamsRef"],[4,"Method"],[3,"BitFieldQueue"],[3,"Deadlines"],[3,"Deadline"],[3,"DisputeInfo"],[3,"PoStResult"],[3,"ExpirationSet"],[3,"ExpirationQueue"],[3,"Partition"],[3,"PowerPair"],[3,"VestSpec"],[3,"Sectors"],[3,"State"],[3,"AdvanceDeadlineResult"],[3,"MinerInfo"],[3,"TerminationResult"],[3,"MinerConstructorParams"],[3,"CronEventPayload"],[3,"PartitionKey"],[3,"GetControlAddressesReturn"],[3,"ChangeWorkerAddressParams"],[3,"ChangePeerIDParams"],[3,"ChangeMultiaddrsParams"],[3,"ConfirmSectorProofsParams"],[3,"PoStPartition"],[3,"SubmitWindowedPoStParams"],[3,"ProveCommitSectorParams"],[3,"CheckSectorProvenParams"],[3,"ExtendSectorExpirationParams"],[3,"ExpirationExtension"],[3,"TerminateSectorsParams"],[3,"TerminationDeclaration"],[3,"TerminateSectorsReturn"],[3,"DeclareFaultsParams"],[3,"FaultDeclaration"],[3,"DeclareFaultsRecoveredParams"],[3,"RecoveryDeclaration"],[3,"CompactPartitionsParams"],[3,"CompactSectorNumbersParams"],[3,"ReportConsensusFaultParams"],[3,"WithdrawBalanceParams"],[3,"WorkerKeyChange"],[3,"SectorPreCommitInfo"],[3,"SectorPreCommitOnChainInfo"],[3,"SectorOnChainInfo"],[3,"Fault"],[3,"ApplyRewardParams"],[3,"DisputeWindowedPoStParams"],[3,"VestingFund"],[3,"VestingFunds"],[4,"Method"],[3,"State"],[3,"TxnID"],[3,"Transaction"],[3,"ProposalHashData"],[3,"ConstructorParams"],[3,"ProposeParams"],[3,"ProposeReturn"],[3,"TxnIDParams"],[3,"ApproveReturn"],[3,"AddSignerParams"],[3,"RemoveSignerParams"],[3,"SwapSignerParams"],[3,"ChangeNumApprovalsThresholdParams"],[3,"LockBalanceParams"],[4,"Method"],[3,"LaneState"],[3,"Merge"],[3,"State"],[3,"ConstructorParams"],[3,"SignedVoucher"],[3,"ModVerifyParams"],[3,"PaymentVerifyParams"],[3,"UpdateChannelStateParams"],[4,"Method"],[3,"State"],[3,"Claim"],[3,"CronEvent"],[3,"CreateMinerParams"],[3,"CreateMinerReturn"],[3,"UpdateClaimedPowerParams"],[3,"EnrollCronEventParams"],[3,"CurrentTotalPowerReturn"],[4,"Method"],[3,"Reward"],[3,"State"],[4,"VestingFunction"],[3,"AwardBlockRewardParams"],[3,"ThisEpochRewardReturn"],[4,"Method"],[4,"Method"],[3,"State"],[3,"VerifierParams"],[3,"BytesParams"],[4,"Method"],[3,"ActorState"],[4,"ExitCode"],[3,"Actor"],[3,"SYSTEM_ACTOR_CODE_ID"],[3,"INIT_ACTOR_CODE_ID"],[3,"CRON_ACTOR_CODE_ID"],[3,"ACCOUNT_ACTOR_CODE_ID"],[3,"POWER_ACTOR_CODE_ID"],[3,"MINER_ACTOR_CODE_ID"],[3,"MARKET_ACTOR_CODE_ID"],[3,"PAYCH_ACTOR_CODE_ID"],[3,"MULTISIG_ACTOR_CODE_ID"],[3,"REWARD_ACTOR_CODE_ID"],[3,"VERIFREG_ACTOR_CODE_ID"],[3,"CHAOS_ACTOR_CODE_ID"],[3,"CALLER_TYPES_SIGNABLE"],[3,"Actor"],[3,"Actor"],[3,"Actor"],[3,"WindowedPoSt"],[3,"BASE_REWARD_FOR_DISPUTED_WINDOW_POST"],[3,"BASE_PENALTY_FOR_DISPUTED_WINDOW_POST"],[3,"DeadlineSectorMap"],[3,"PartitionSectorMap"],[3,"Actor"],[3,"Actor"],[3,"QUALITY_BASE_MULTIPLIER"],[3,"DEAL_WEIGHT_MULTIPLIER"],[3,"VERIFIED_DEAL_WEIGHT_MULTIPLIER"],[3,"Actor"],[3,"Actor"],[3,"BASELINE_EXPONENT"],[3,"BASELINE_INITIAL_VALUE"],[3,"INIT_BASELINE_POWER"],[3,"Actor"],[3,"SYSTEM_ACTOR_ADDR"],[3,"INIT_ACTOR_ADDR"],[3,"REWARD_ACTOR_ADDR"],[3,"CRON_ACTOR_ADDR"],[3,"STORAGE_POWER_ACTOR_ADDR"],[3,"STORAGE_MARKET_ACTOR_ADDR"],[3,"VERIFIED_REGISTRY_ACTOR_ADDR"],[3,"CHAOS_ACTOR_ADDR"],[3,"BURNT_FUNDS_ACTOR_ADDR"],[3,"RESERVE_ADDRESS"],[3,"State"],[3,"Actor"],[3,"MINIMUM_VERIFIED_DEAL_SIZE"],[3,"Actor"],[3,"BalanceTable"],[3,"Multimap"],[3,"Set"],[3,"SetMultimap"],[3,"AlphaBetaFilter"],[3,"NUM"],[3,"DENOM"],[3,"DEFAULT_ALPHA"],[3,"DEFAULT_BETA"],[3,"LN_2"],[3,"EPSILON"],[3,"ActorError"],[3,"Serialized"]]},\
"forest_address":{"doc":"","t":[0,0,3,12,3,12,5,5,0,5,5,3,12,3,12,5,5,4,13,13,13,13,13,13,13,13,13,13,4,13,13,3,12,4,13,13,13,13,4,13,13,13,13,17,17,17,17,7,3,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["json","vec","AddressJsonVec","0","AddressJsonSlice","0","serialize","deserialize","opt","serialize","deserialize","AddressJson","0","AddressJsonRef","0","serialize","deserialize","Error","UnknownNetwork","UnknownProtocol","InvalidPayload","InvalidLength","InvalidPayloadLength","InvalidBLSLength","InvalidSECPLength","InvalidChecksum","Base32Decoding","NonIDAddress","Network","Mainnet","Testnet","BLSPublicKey","0","Payload","ID","Secp256k1","Actor","BLS","Protocol","ID","Secp256k1","Actor","BLS","PAYLOAD_HASH_LEN","SECP_PUB_LEN","BLS_PUB_LEN","CHECKSUM_HASH_LEN","NETWORK_DEFAULT","Address","from_bytes","new_id","new_secp256k1","new_actor","new_bls","protocol","payload","into_payload","payload_bytes","network","set_network","to_bytes","id","checksum","validate_checksum","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","default","eq","ne","eq","eq","eq","ne","eq","eq","ne","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","hash","hash","from_str","source","from_i64","from_u64","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","to_raw_bytes","new"],"q":["forest_address","forest_address::json","forest_address::json::vec","","","","","","forest_address::json","forest_address::json::opt","","forest_address::json","","","","","","forest_address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_address::json::vec","","","","","","","","","","","","","","forest_address::json","","","","","","","","","","","","","","forest_address","","","","","","","","","","","","","","","","","forest_address::json","forest_address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_address::json","","forest_address::json::vec","","forest_address","forest_address::json","forest_address::json::vec","forest_address",""],"d":["","","Wrapper for serializing and deserializing a Cid vector …","","Wrapper for serializing a cid slice to JSON.","","","","","","","Wrapper for serializing and deserializing a SignedMessage …","","Wrapper for serializing a SignedMessage reference to JSON.","","","","Address error","","","","","","","","","","","Network defines the preconfigured networks to use with …","","","Public key struct used as BLS Address data. This type is …","","Payload is the data of the Address. Variants are the …","ID protocol address.","SECP256K1 key address, 20 byte hash of PublicKey","Actor protocol address, 20 byte hash of actor data","BLS key address, full 48 byte public key","Protocol defines the addressing protocol used to derive …","ID protocol addressing","SECP256K1 key addressing","Actor protocol addressing","BLS key addressing","Hash length of payload for Secp and Actor addresses.","Uncompressed secp public key used for validation of Secp …","BLS public key length used for validation of BLS …","Length of the checksum hash for string encodings.","","Address is the struct that defines the protocol and data …","Creates address from encoded bytes","Generates new address using ID protocol","Generates new address using Secp256k1 pubkey","Generates new address using the Actor protocol","Generates new address using BLS pubkey","Returns protocol for Address","Returns the <code>Payload</code> object from the address, where the …","Converts Address into <code>Payload</code> object, where the …","Returns the raw bytes data payload of the Address","Returns network configuration of Address","Sets the network for the address and returns a mutable …","Returns encoded bytes of Address","Get ID of the address. ID protocol only.","Checksum calculates the 4 byte checksum hash","Validates the checksum against the ingest data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns encoded bytes of Address without the protocol …","Generates payload from raw bytes and protocol."],"i":[0,0,0,1,0,2,0,0,0,0,0,0,3,0,4,0,0,0,5,5,5,5,5,5,5,5,5,5,0,6,6,0,7,0,8,8,8,8,0,9,9,9,9,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,10,5,5,5,5,7,9,9,3,10,6,7,8,9,10,6,5,5,6,7,8,8,9,10,10,7,5,6,7,8,9,10,5,9,10,6,7,8,9,10,10,5,9,9,10,3,4,1,2,10,3,1,8,8],"f":[null,null,null,null,null,null,[[],["result",4]],[[],[["vec",3],["result",4]]],null,[[["option",4]],["result",4]],[[],[["result",4],["option",4]]],null,null,null,null,[[["address",3]],["result",4]],[[],[["result",4],["address",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["error",4],["result",4]]],[[["u64",15]]],[[],[["error",4],["result",4]]],[[]],[[],[["error",4],["result",4]]],[[],["protocol",4]],[[],["payload",4]],[[],["payload",4]],[[],[["vec",3],["u8",15]]],[[],["network",4]],[[["network",4]]],[[],[["vec",3],["u8",15]]],[[],[["error",4],["result",4],["u64",15]]],[[],[["vec",3],["u8",15]]],[[["vec",3],["u8",15]],["bool",15]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["decodeerror",3]]],[[["parseinterror",3]],["error",4]],[[["error",3]],["error",4]],[[["leb128error",4]],["error",4]],[[]],[[["payload",4]]],[[["payload",4]]],[[["address",3]]],[[["addressjson",3]]],[[],["network",4]],[[],["blspublickey",3]],[[],["payload",4]],[[],["protocol",4]],[[],["address",3]],[[]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["network",4]],["bool",15]],[[],["bool",15]],[[["payload",4]],["bool",15]],[[["payload",4]],["bool",15]],[[["protocol",4]],["bool",15]],[[["address",3]],["bool",15]],[[["address",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["error",4],["result",4]]],[[],[["error",8],["option",4]]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["vec",3],["u8",15]]],[[["protocol",4]],[["error",4],["result",4]]]],"p":[[3,"AddressJsonVec"],[3,"AddressJsonSlice"],[3,"AddressJson"],[3,"AddressJsonRef"],[4,"Error"],[4,"Network"],[3,"BLSPublicKey"],[4,"Payload"],[4,"Protocol"],[3,"Address"]]},\
"forest_bigint":{"doc":"","tn":["bigint_ser","json","opt","serialize","deserialize","serialize","deserialize","BigIntSer","0","BigIntDe","0","serialize","deserialize","biguint_ser","BigUintSer","0","BigUintDe","0","serialize","deserialize","ParseBigIntError","TryFromBigIntError","BigUint","ToBigUint","to_biguint","BigInt","Sign","Minus","NoSign","Plus","ToBigInt","to_bigint","Integer","div_floor","mod_floor","div_ceil","gcd","lcm","gcd_lcm","extended_gcd","extended_gcd_lcm","divides","is_multiple_of","is_even","is_odd","div_rem","div_mod_floor","next_multiple_of","prev_multiple_of","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","average_floor","average_ceil","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","average_floor","average_ceil","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from_str_radix","from_str_radix","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","bitand","bitand","bitand","bitand","clone","clone_from","clone","clone_from","clone","clone","clone","eq","eq","ne","eq","ne","eq","eq","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sum","sum","checked_mul","checked_mul","bitor","bitor","bitor","bitor","to_biguint","to_biguint","fmt","fmt","abs","abs_sub","signum","is_positive","is_negative","fmt","fmt","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","one","set_one","is_one","one","set_one","is_one","fmt","fmt","fmt","fmt","fmt","not","fmt","fmt","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","div_rem","div_floor","mod_floor","div_mod_floor","div_ceil","gcd","lcm","gcd_lcm","extended_gcd_lcm","divides","is_multiple_of","is_even","is_odd","next_multiple_of","prev_multiple_of","div_rem","div_floor","mod_floor","div_mod_floor","div_ceil","gcd","lcm","gcd_lcm","divides","is_multiple_of","is_even","is_odd","next_multiple_of","prev_multiple_of","to_bigint","to_bigint","from_i64","from_i128","from_u64","from_u128","from_f64","from_i64","from_i128","from_u64","from_u128","from_f64","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","product","product","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","bitxor","bitxor","bitxor","bitxor","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","checked_div","checked_div","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","nth_root","sqrt","cbrt","nth_root","sqrt","cbrt","fmt","fmt","fmt","fmt","fmt","fmt","description","description","zero","set_zero","is_zero","zero","set_zero","is_zero","bitor_assign","bitor_assign","bitor_assign","bitor_assign","to_i64","to_i128","to_u64","to_u128","to_f32","to_f64","to_i64","to_i128","to_u64","to_u128","to_f32","to_f64","checked_add","checked_add","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","partial_cmp","partial_cmp","partial_cmp","default","default","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","from_str","from_str","neg","neg","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","checked_sub","checked_sub","bitand_assign","bitand_assign","bitand_assign","bitand_assign","cmp","cmp","cmp","hash","hash","hash","clone","clone","default","eq","ne","serialize","serialize","serialize","serialize","deserialize","deserialize","into_original","new","from_slice","assign_from_slice","from_bytes_be","from_bytes_le","parse_bytes","from_radix_be","from_radix_le","to_bytes_be","to_bytes_le","to_u32_digits","to_str_radix","to_radix_be","to_radix_le","bits","pow","modpow","sqrt","cbrt","nth_root","trailing_zeros","new","from_biguint","from_slice","assign_from_slice","from_bytes_be","from_bytes_le","from_signed_bytes_be","from_signed_bytes_le","parse_bytes","from_radix_be","from_radix_le","to_bytes_be","to_bytes_le","to_u32_digits","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_radix_be","to_radix_le","sign","magnitude","into_parts","bits","to_biguint","checked_add","checked_sub","checked_mul","checked_div","pow","modpow","sqrt","cbrt","nth_root","trailing_zeros"],"q":["forest_bigint","forest_bigint::bigint_ser","forest_bigint::bigint_ser::json","forest_bigint::bigint_ser::json::opt","","forest_bigint::bigint_ser::json","","forest_bigint::bigint_ser","","","","","","forest_bigint","forest_bigint::biguint_ser","","","","","","forest_bigint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_bigint::bigint_ser","","","","","","","","","","","","","","","","forest_bigint::biguint_ser","","","","","","","","","","","","","","","","forest_bigintforest_bigint::bigint_ser","forest_bigint::biguint_ser","forest_bigint::bigint_ser","","","","","forest_bigint::biguint_ser","","forest_bigint::bigint_ser","forest_bigint::biguint_ser","forest_bigint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","Serializes BigInt as String","Deserializes String into BigInt.","Wrapper for serializing big ints to match filecoin spec. …","","Wrapper for deserializing as BigInt from bytes.","","Serializes big int as bytes following Filecoin spec.","Deserializes bytes into big int.","","Wrapper for serializing big ints to match filecoin spec. …","","Wrapper for deserializing as BigUint from bytes.","","","","","The error type returned when a checked conversion …","A big unsigned integer type.","A generic trait for converting a value to a <code>BigUint</code>.","Converts the value of <code>self</code> to a <code>BigUint</code>.","A big signed integer type.","A Sign is a <code>BigInt</code>’s composing element.","","","","A generic trait for converting a value to a <code>BigInt</code>. This …","Converts the value of <code>self</code> to a <code>BigInt</code>.","","Floored integer division.","Floored integer modulo, satisfying:","Ceiled integer division.","Greatest Common Divisor (GCD).","Lowest Common Multiple (LCM).","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","Deprecated, use <code>is_multiple_of</code> instead.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is even.","Returns <code>true</code> if the number is odd.","Simultaneous truncated integer division and modulus. …","Simultaneous floored integer division and modulus. …","Rounds up to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","","","","","","","","","","","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","","","","","","","","","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</codealculates the Greatest Common Divisor (GCD) of the …","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest common divisor, least common multiple, and …","Deprecated, use <code>is_multiple_of</code> instead.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Rounds up to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","","Calculates the Greatest Common Divisor (GCD) of the …","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Deprecated, use <code>is_multiple_of</code> instead.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Rounds up to nearest multiple of argument.","Rounds down to nearest multiple of argumentegate Sign value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the original value, if available. The value will …","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigUint</code>.","Assign a value to a <code>BigUint</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Returns the byte representation of the <code>BigUint</code> in …","Returns the byte representation of the <code>BigUint</code> in …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","Returns the integer formatted as a string in the given …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in …","Determines the fewest bits necessary to express the …","Returns <code>self ^ exponent</code>.","Returns <code>(self ^ exponent) % modulus</code>.","Returns the truncated principal square root of <code>self</code> – …","Returns the truncated principal cube root of <code>self</code> – see …","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","Returns the number of least-significant bits that are …","Creates and initializes a BigInt.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Reinitializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code> from an array of bytes in…","Creates and initializes a <code>BigInt</code> from an array of bytes …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the sign and the <code>u32</code> digits representation of the …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in …","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Determines the fewest bits necessary to express the <code>BigInt</code>…","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","","","Returns <code>self ^ exponent</code>.","Returns <code>(self ^ exponent) mod modulus</code>","Returns the truncated principal square root of <code>self</code> – …","Returns the truncated principal cube root of <code>self</code> – see …","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","Returns the number of least-significant bits that are …"],"i":[0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,3,0,4,0,0,0,0,0,0,5,0,0,6,6,6,0,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,6,6,6,6,6,6,6,6,6,12,11,12,12,12,12,11,11,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,11,12,11,12,11,12,12,12,11,11,12,12,12,12,12,12,12,11,12,11,11,12,11,11,12,12,10,9,6,11,10,10,9,9,6,12,12,11,11,11,11,11,12,11,12,12,12,11,12,11,12,11,12,11,11,11,11,12,11,12,11,11,11,11,12,12,12,12,11,11,11,12,12,11,12,12,12,12,12,11,11,12,12,12,11,12,11,12,11,12,12,11,12,11,11,12,12,12,12,12,12,12,11,11,12,12,12,12,11,12,11,11,12,11,11,12,12,12,12,12,12,11,11,11,12,12,11,12,12,11,12,12,12,12,12,12,11,12,11,12,11,12,12,12,12,12,11,11,11,12,9,10,6,11,12,11,12,12,11,11,12,12,11,12,12,12,11,11,11,11,12,12,11,12,12,11,11,11,12,11,11,12,12,12,11,11,12,12,11,12,12,12,11,11,11,12,11,11,12,11,12,12,12,11,11,11,11,12,12,12,12,11,11,12,12,12,11,11,11,12,12,11,11,11,11,11,12,12,12,11,11,11,12,12,12,11,12,11,11,12,12,12,12,12,12,11,11,11,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,12,12,11,11,12,11,12,11,12,11,12,12,11,12,12,12,12,11,11,12,12,12,12,12,11,12,12,11,11,12,11,11,12,12,12,11,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,11,11,11,11,11,11,12,11,12,11,11,12,11,11,12,12,12,12,12,11,12,11,11,12,12,12,12,11,12,11,12,12,12,11,11,11,12,12,11,12,11,12,11,12,12,11,12,11,12,11,12,12,12,12,12,12,12,11,11,11,12,11,12,12,11,11,11,11,11,12,12,12,12,11,11,12,12,11,12,12,12,11,12,11,12,11,11,11,11,11,12,12,11,12,12,12,12,11,11,12,11,12,12,11,12,11,11,11,11,12,12,12,12,10,9,11,11,12,9,10,11,11,11,12,12,12,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,12,11,12,11,12,12,11,12,12,11,11,12,12,12,12,12,12,11,12,12,12,11,12,12,11,12,11,11,12,12,12,12,12,12,11,12,12,11,11,12,11,11,11,12,6,12,11,12,11,12,12,11,12,12,12,12,11,12,12,11,12,12,12,11,11,11,12,11,12,12,11,12,6,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,12,12,12,12,12,12,12,11,11,11,12,12,12,12,11,11,11,11,12,12,12,12,11,12,11,11,11,11,12,11,11,12,12,12,11,12,12,12,11,12,12,12,11,12,11,11,12,12,11,12,11,11,11,12,12,11,12,11,12,11,11,11,12,12,12,12,11,11,11,12,12,11,12,11,12,12,12,11,11,12,12,11,12,11,6,12,12,12,12,12,11,11,12,11,12,12,12,12,12,11,12,12,12,11,11,12,11,12,11,12,12,11,6,11,12,6,2,4,2,2,2,1,2,3,4,2,4,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"f":[null,null,null,[[["option",4]],["result",4]],[[],[["result",4],["option",4]]],[[["bigint",3]],["result",4]],[[],[["bigint",3],["result",4]]],null,null,null,null,[[["bigint",3]],["result",4]],[[],[["bigint",3],["result",4]]],null,null,null,null,null,[[["biguint",3]],["result",4]],[[],[["biguint",3],["result",4]]],null,null,null,null,[[],[["biguint",3],["option",4]]],null,null,null,null,null,null,[[],[["bigint",3],["option",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["extendedgcd",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u32",15],["str",15]],[["parsebiginterror",3],["result",4],["bigint",3]]],[[["u32",15],["str",15]],[["result",4],["biguint",3],["parsebiginterror",3]]],[[["bigint",3]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["i64",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["u16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["isize",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["u8",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]],["bigint",3]],[[],["biguint",3]],[[["biguint",3]]],[[],["bigint",3]],[[["bigint",3]]],[[],["tryfrombiginterror",3]],[[],["parsebiginterror",3]],[[],["sign",4]],[[["biguint",3]],["bool",15]],[[["tryfrombiginterror",3]],["bool",15]],[[["tryfrombiginterror",3]],["bool",15]],[[["parsebiginterror",3]],["bool",15]],[[["parsebiginterror",3]],["bool",15]],[[["sign",4]],["bool",15]],[[["bigint",3]],["bool",15]],[[["i128",15]]],[[["u64",15]]],[[["i16",15]]],[[["u16",15]]],[[["i32",15]]],[[["usize",15]]],[[["u32",15]]],[[["i128",15]]],[[["u16",15]]],[[["i32",15]]],[[["u32",15]]],[[["u32",15]]],[[["i64",15]]],[[["u16",15]]],[[["i16",15]]],[[["i64",15]]],[[["i8",15]]],[[["isize",15]]],[[["i16",15]]],[[["u8",15]]],[[["u32",15]]],[[["i64",15]]],[[["usize",15]]],[[["i8",15]]],[[["i64",15]]],[[["i8",15]]],[[["i32",15]]],[[["i128",15]]],[[["i128",15]]],[[["u16",15]]],[[["u8",15]]],[[["i16",15]]],[[["u8",15]]],[[["u128",15]]],[[["i8",15]]],[[["u8",15]]],[[["i32",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15]]],[[["isize",15]]],[[["usize",15]]],[[["isize",15]]],[[["isize",15]]],[[["u128",15]]],[[["u128",15]]],[[["u64",15]]],[[["u64",15]]],[[],["biguint",3]],[[],["bigint",3]],[[["biguint",3]],[["biguint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[],[["biguint",3],["option",4]]],[[],[["biguint",3],["option",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["bigint",3]],[[["bigint",3]],["bigint",3]],[[],["bigint",3]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["i16",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i16",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u64",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["isize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["i128",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[],["bigint",3]],[[]],[[],["bool",15]],[[],["biguint",3]],[[]],[[],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["bigint",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[["bigint",3]]],[[["biguint",3]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u128",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["i128",15]]],[[["u128",15]]],[[["u16",15]]],[[["u8",15]]],[[["i32",15]]],[[["u128",15]]],[[["u32",15]]],[[["u16",15]]],[[["i128",15]]],[[["u16",15]]],[[["u64",15]]],[[["u8",15]]],[[["i128",15]]],[[["u128",15]]],[[["isize",15]]],[[["i8",15]]],[[["i128",15]]],[[["i8",15]]],[[["u32",15]]],[[["i8",15]]],[[["i64",15]]],[[["isize",15]]],[[["u128",15]]],[[["i16",15]]],[[["usize",15]]],[[["u8",15]]],[[["usize",15]]],[[["i32",15]]],[[["u16",15]]],[[["isize",15]]],[[["i8",15]]],[[["u64",15]]],[[["u32",15]]],[[["u64",15]]],[[["usize",15]]],[[["u32",15]]],[[["i16",15]]],[[["i32",15]]],[[["i16",15]]],[[["i64",15]]],[[["i64",15]]],[[["u8",15]]],[[["usize",15]]],[[["i32",15]]],[[["isize",15]]],[[["i16",15]]],[[["i64",15]]],[[["u64",15]]],[[["u16",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["isize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["i128",15]],["bigint",3]],[[["bigint",3]]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["bigint",3]],["bool",15]],[[["bigint",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]]],[[["biguint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[],[["bigint",3],["option",4]]],[[],[["bigint",3],["option",4]]],[[["i64",15]],[["biguint",3],["option",4]]],[[["i128",15]],[["biguint",3],["option",4]]],[[["u64",15]],[["biguint",3],["option",4]]],[[["u128",15]],[["biguint",3],["option",4]]],[[["f64",15]],[["biguint",3],["option",4]]],[[["i64",15]],[["bigint",3],["option",4]]],[[["i128",15]],[["bigint",3],["option",4]]],[[["u64",15]],[["bigint",3],["option",4]]],[[["u128",15]],[["bigint",3],["option",4]]],[[["f64",15]],[["bigint",3],["option",4]]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["isize",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["i32",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["u16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["i8",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u64",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[],["biguint",3]],[[],["bigint",3]],[[["i32",15]]],[[["i8",15]]],[[["u8",15]]],[[["i64",15]]],[[["u32",15]]],[[["bigint",3]]],[[["bigint",3]]],[[["i128",15]]],[[["u16",15]]],[[["isize",15]]],[[["u32",15]]],[[["u64",15]]],[[["i16",15]]],[[["u128",15]]],[[["usize",15]]],[[["u64",15]]],[[["u128",15]]],[[["biguint",3]]],[[["u8",15]]],[[["biguint",3]]],[[["usize",15]]],[[["u16",15]]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["u64",15]]],[[["u32",15]]],[[["u16",15]]],[[["i16",15]]],[[["u64",15]]],[[["bigint",3]]],[[["isize",15]]],[[["biguint",3]]],[[["i32",15]]],[[["biguint",3]]],[[["usize",15]]],[[["i128",15]]],[[["u32",15]]],[[["u128",15]]],[[["i64",15]]],[[["u8",15]]],[[["u8",15]]],[[["u128",15]]],[[["usize",15]]],[[["i8",15]]],[[["bigint",3]]],[[["u16",15]]],[[["u32",15]]],[[["u16",15]]],[[["isize",15]]],[[["u128",15]]],[[["usize",15]]],[[["i16",15]]],[[["biguint",3]]],[[["i128",15]]],[[["u64",15]]],[[["bigint",3]]],[[["u8",15]]],[[["u128",15]]],[[["bigint",3]]],[[["biguint",3]]],[[["u32",15]]],[[["u8",15]]],[[["u64",15]]],[[["i32",15]]],[[["u16",15]]],[[["i8",15]]],[[["usize",15]]],[[["i64",15]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["biguint",3],["option",4]]],[[["i64",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["isize",15]],["bigint",3]],[[["i8",15]],["biguint",3]],[[["u64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i32",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["isize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["u128",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["isize",15]],["biguint",3]],[[["i64",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["i32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["i16",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i128",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["u128",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["i16",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i64",15]],["biguint",3]],[[["u16",15]],["bigint",3]],[[["i8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[],["biguint",3]],[[],["biguint",3]],[[["u32",15]],["bigint",3]],[[],["bigint",3]],[[],["bigint",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["str",15]],[[],["str",15]],[[],["biguint",3]],[[]],[[],["bool",15]],[[],["bigint",3]],[[]],[[],["bool",15]],[[["biguint",3]]],[[["biguint",3]]],[[["bigint",3]]],[[["bigint",3]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u128",15]]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u128",15]]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["biguint",3],["option",4]]],[[["bigint",3]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["u64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["i128",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["i64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["i32",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["i16",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["biguint",3]],[["ordering",4],["option",4]]],[[["bigint",3]],[["ordering",4],["option",4]]],[[["sign",4]],[["ordering",4],["option",4]]],[[],["bigint",3]],[[],["biguint",3]],[[["isize",15]]],[[["u64",15]]],[[["u8",15]]],[[["bigint",3]]],[[["u16",15]]],[[["i32",15]]],[[["i128",15]]],[[["u32",15]]],[[["bigint",3]]],[[["biguint",3]]],[[["i16",15]]],[[["u64",15]]],[[["u8",15]]],[[["u128",15]]],[[["i8",15]]],[[["usize",15]]],[[["usize",15]]],[[["biguint",3]]],[[["u32",15]]],[[["i64",15]]],[[["u128",15]]],[[["u16",15]]],[[["str",15]],[["parsebiginterror",3],["result",4],["bigint",3]]],[[["str",15]],[["result",4],["biguint",3],["parsebiginterror",3]]],[[],["bigint",3]],[[],["sign",4]],[[["bigint",3]],[["biguint",3],["tryfrombiginterror",3],["result",4]]],[[["isize",15]],[["biguint",3],["result",4],["tryfrombiginterror",3]]],[[["i32",15]],[["biguint",3],["result",4],["tryfrombiginterror",3]]],[[["i128",15]],[["biguint",3],["result",4],["tryfrombiginterror",3]]],[[["i64",15]],[["biguint",3],["result",4],["tryfrombiginterror",3]]],[[["bigint",3]],[["biguint",3],["result",4],["tryfrombiginterror",3]]],[[["i8",15]],[["biguint",3],["result",4],["tryfrombiginterror",3]]],[[["i16",15]],[["biguint",3],["result",4],["tryfrombiginterror",3]]],[[["u32",15]]],[[["biguint",3]]],[[["u128",15]]],[[["i16",15]]],[[["u16",15]]],[[["u128",15]]],[[["u8",15]]],[[["u16",15]]],[[["i64",15]]],[[["bigint",3]]],[[["i128",15]]],[[["i8",15]]],[[["u8",15]]],[[["i32",15]]],[[["usize",15]]],[[["biguint",3]]],[[["u32",15]]],[[["bigint",3]]],[[["u64",15]]],[[["isize",15]]],[[["usize",15]]],[[["u64",15]]],[[["isize",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["i64",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i128",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i8",15]],["biguint",3]],[[["u8",15]],["bigint",3]],[[["i8",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["u8",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["i32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["u64",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["isize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["i16",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["sign",4]],["sign",4]],[[["bigint",3]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["biguint",3]],[["biguint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["bigint",3]]],[[["bigint",3]],["ordering",4]],[[["biguint",3]],["ordering",4]],[[["sign",4]],["ordering",4]],[[]],[[]],[[]],[[],["bigintde",3]],[[],["biguintde",3]],[[],["bigintde",3]],[[["bigintde",3]],["bool",15]],[[["bigintde",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["vec",3],["u32",15],["global",3]],["biguint",3]],[[],["biguint",3]],[[]],[[],["biguint",3]],[[],["biguint",3]],[[["u32",15]],[["biguint",3],["option",4]]],[[["u32",15]],[["biguint",3],["option",4]]],[[["u32",15]],[["biguint",3],["option",4]]],[[],[["vec",3],["global",3],["u8",15]]],[[],[["vec",3],["global",3],["u8",15]]],[[],[["vec",3],["u32",15],["global",3]]],[[["u32",15]],["string",3]],[[["u32",15]],[["vec",3],["global",3],["u8",15]]],[[["u32",15]],[["vec",3],["global",3],["u8",15]]],[[],["u64",15]],[[["u32",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[],["biguint",3]],[[],["biguint",3]],[[["u32",15]],["biguint",3]],[[],[["option",4],["u64",15]]],[[["vec",3],["u32",15],["sign",4],["global",3]],["bigint",3]],[[["biguint",3],["sign",4]],["bigint",3]],[[["sign",4]],["bigint",3]],[[["sign",4]]],[[["sign",4]],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["bigint",3]],[[],["bigint",3]],[[["u32",15]],[["bigint",3],["option",4]]],[[["u32",15],["sign",4]],[["bigint",3],["option",4]]],[[["u32",15],["sign",4]],[["bigint",3],["option",4]]],[[]],[[]],[[]],[[],[["vec",3],["global",3],["u8",15]]],[[],[["vec",3],["global",3],["u8",15]]],[[["u32",15]],["string",3]],[[["u32",15]]],[[["u32",15]]],[[],["sign",4]],[[],["biguint",3]],[[]],[[],["u64",15]],[[],[["biguint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["u32",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[],["bigint",3]],[[],["bigint",3]],[[["u32",15]],["bigint",3]],[[],[["option",4],["u64",15]]]],"p":[[3,"BigIntSer"],[3,"BigIntDe"],[3,"BigUintSer"],[3,"BigUintDe"],[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[8,"Integer"],[3,"ParseBigIntError"],[3,"TryFromBigIntError"],[3,"BigUint"],[3,"BigInt"]]},\
"forest_bitfield":{"doc":"","t":[0,8,11,11,11,11,11,11,11,3,3,3,11,5,0,3,12,3,12,4,13,13,8,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["iter","RangeIterator","union","intersection","difference","symmetric_difference","cut","skip_bits","take_bits","Skip","Take","Ranges","new","ranges_from_bits","json","BitFieldJson","0","BitFieldJsonRef","0","UnvalidatedBitField","Validated","Unvalidated","Validate","validate","BitField","new","from_ranges","set","unset","get","first","iter","bounded_iter","ranges","is_empty","slice","len","cut","union","contains_any","contains_all","bitfield","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","next","next","next","clone","default","eq","eq","ne","fmt","fmt","fmt","sub_assign","bitand_assign","bitor_assign","bitxor_assign","from_iter","from_iter","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","from_bytes","to_bytes","validate_mut"],"q":["forest_bitfield","forest_bitfield::iter","","","","","","","","","","","","","forest_bitfield","forest_bitfield::json","","","","forest_bitfield","","","","","","","","","","","","","","","","","","","","","","","forest_bitfield::iter","","","","","","","","","","","","","","","","","","","","","","","","forest_bitfield","","","","","","","forest_bitfield::json","","","","","","","","","","","","","","forest_bitfield","","","","","","","","","","","forest_bitfield::json","forest_bitfield::iter","","","forest_bitfield","","","forest_bitfield::json","","forest_bitfield","","forest_bitfield::json","forest_bitfield","","","","","","","","forest_bitfield::json","","forest_bitfield","","forest_bitfield::json","forest_bitfield","",""],"d":["","A trait for iterators over <code>Range<usize></code>.","Returns a new <code>RangeIterator</code> over the bits that are in <code>self</code>…","Returns a new <code>RangeIterator</code> over the bits that are in …","Returns a new <code>RangeIterator</code> over the bits that are in <code>self</code>…","Returns a new <code>RangeIterator</code> over the bits that are in <code>self</code>…","Returns a new <code>RangeIterator</code> over the bits in <code>self</code> that …","Returns a new <code>RangeIterator</code> over the bits in <code>self</code> after …","Returns a new <code>RangeIterator</code> over the first <code>n</code> bits in <code>self</code>.","A <code>RangeIterator</code> that skips over <code>n</code> bits of antoher …","A <code>RangeIterator</code> that iterates over the first <code>n</code> bits of …","A <code>RangeIterator</code> that wraps a regular iterator over …","Creates a new <code>Ranges</code> instance.","Returns a <code>RangeIterator</code> which ranges contain the values …","","","","Wrapper for serializing a UnsignedMessage reference to …","","A bit field that may not yet have been validated for …","","","A trait for types that can produce a <code>&BitField</code> (or fail …","","A bit field with buffered insertion/removal that …","Creates an empty bit field.","Creates a new bit field from a <code>RangeIterator</code>.","Adds the bit at a given index to the bit field.","Removes the bit at a given index from the bit field.","Returns <code>true</code> if the bit field contains the bit at a given …","Returns the index of the lowest bit present in the bit …","Returns an iterator over the indices of the bit field’s …","Returns an iterator over the indices of the bit field’s …","Returns an iterator over the ranges of set bits that make …","Returns <code>true</code> if the bit field is empty.","Returns a slice of the bit field with the start index of …","Returns the number of set bits in the bit field.","Returns a new bit field containing the bits in <code>self</code> that …","Returns the union of the given bit fields as a new bit …","Returns true if <code>self</code> overlaps with <code>other</code>.","Returns true if the <code>self</code> is a superset of <code>other</code>.","Constructs a <code>BitField</code> from a given list of 1s and 0s.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decodes RLE+ encoded bytes into a bit field.","Turns a bit field into its RLE+ encoded form.","Validates the RLE+ encoding of the bit field, returning a …"],"i":[0,0,1,1,1,1,1,1,1,0,0,0,2,0,0,0,3,0,4,0,5,5,0,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,3,3,3,3,3,3,3,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,7,5,7,3,8,9,2,7,7,7,3,3,5,7,3,7,7,7,7,7,7,7,5,3,4,7,5,3,7,7,5],"f":[null,null,[[["rangeiterator",8]],[["rangeiterator",8],["union",3],["combine",3]]],[[["rangeiterator",8]],[["rangeiterator",8],["intersection",3],["combine",3]]],[[["rangeiterator",8]],[["combine",3],["difference",3],["rangeiterator",8]]],[[["rangeiterator",8]],[["rangeiterator",8],["symmetricdifference",3],["combine",3]]],[[["rangeiterator",8]],[["combine",3],["cut",3],["rangeiterator",8]]],[[["usize",15]],["skip",3]],[[["usize",15]],["take",3]],null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,[[],[["result",4],["str",15],["bitfield",3]]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[],[["usize",15],["option",4]]],[[]],[[["usize",15]],[["result",4],["str",15]]],[[]],[[],["bool",15]],[[["usize",15]],[["str",15],["result",4]]],[[],["usize",15]],[[]],[[]],[[["bitfield",3]],["bool",15]],[[["bitfield",3]],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["bitfield",3]]],[[["bitfieldjson",3]]],[[["bitfield",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bitfield",3]],[[],["bitfield",3]],[[],["bool",15]],[[["bitfieldjson",3]],["bool",15]],[[["bitfieldjson",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bitfield",3]]],[[["bitfield",3]]],[[["bitfield",3]]],[[["bitfield",3]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["str",15],["result",4]]],[[],[["vec",3],["u8",15]]],[[],[["result",4],["bitfield",3],["str",15]]]],"p":[[8,"RangeIterator"],[3,"Ranges"],[3,"BitFieldJson"],[3,"BitFieldJsonRef"],[4,"UnvalidatedBitField"],[8,"Validate"],[3,"BitField"],[3,"Skip"],[3,"Take"]]},\
"forest_blocks":{"doc":"","t":[0,0,0,5,5,3,12,3,12,5,5,3,12,12,11,0,0,3,12,3,12,5,5,3,12,12,12,0,0,0,5,5,3,12,3,12,5,5,3,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,5,5,3,12,3,12,5,5,3,12,11,0,0,3,12,5,5,0,3,12,3,12,5,5,3,12,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,17,3,12,12,12,3,12,12,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["election_proof","json","opt","serialize","deserialize","ElectionProofJson","0","ElectionProofJsonRef","0","serialize","deserialize","ElectionProof","win_count","vrfproof","compute_win_count","gossip_block","json","GossipBlockJson","0","GossipBlockJsonRef","0","serialize","deserialize","GossipBlock","header","bls_messages","secpk_messages","header","json","vec","serialize","deserialize","BlockHeaderJson","0","BlockHeaderJsonRef","0","serialize","deserialize","BlockHeader","signature","BlockHeaderBuilder","parents","weight","epoch","beacon_entries","winning_post_proof","miner_address","messages","message_receipts","state_root","fork_signal","signature","election_proof","timestamp","ticket","bls_aggregate","parent_base_fee","build","builder","parents","weight","epoch","beacon_entries","winning_post_proof","miner_address","messages","message_receipts","state_root","timestamp","ticket","bls_aggregate","cid","parent_base_fee","fork_signal","election_proof","signature","to_sort_key","check_block_signature","is_ticket_winner","validate_block_drand","to_signing_bytes","ticket","json","opt","serialize","deserialize","TicketJson","0","TicketJsonRef","0","serialize","deserialize","Ticket","vrfproof","new","tipset","tipset_keys_json","TipsetKeysJson","0","serialize","deserialize","tipset_json","TipsetJson","0","TipsetJsonRef","0","serialize","deserialize","TipsetKeys","cids","new","cids","Tipset","new","epoch","blocks","into_blocks","min_ticket","min_ticket_block","min_timestamp","len","key","cids","parents","parent_state","weight","FullTipset","new","blocks","into_blocks","into_tipset","key","parent_state","epoch","weight","BLOCK_MESSAGE_LIMIT","Block","header","bls_messages","secp_messages","TxMeta","bls_message_root","secp_message_root","Error","InvalidTipset","NoBlocks","InvalidSignature","Validation","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","get_hash","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","cmp","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","eq","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","marshal_cbor","cid","header","bls_msgs","secp_msgs","cid"],"q":["forest_blocks","forest_blocks::election_proof","forest_blocks::election_proof::json","forest_blocks::election_proof::json::opt","","forest_blocks::election_proof::json","","","","","","forest_blocks::election_proof","","","","forest_blocks","forest_blocks::gossip_block","forest_blocks::gossip_block::json","","","","","","forest_blocks::gossip_block","","","","forest_blocks","forest_blocks::header","forest_blocks::header::json","forest_blocks::header::json::vec","","forest_blocks::header::json","","","","","","forest_blocks::header","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks","forest_blocks::ticket","forest_blocks::ticket::json","forest_blocks::ticket::json::opt","","forest_blocks::ticket::json","","","","","","forest_blocks::ticket","","","forest_blocks","forest_blocks::tipset","forest_blocks::tipset::tipset_keys_json","","","","forest_blocks::tipset","forest_blocks::tipset::tipset_json","","","","","","forest_blocks::tipset","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::election_proof::json","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::election_proof","","","","","","","","","","","","","","forest_blocks","","","","","","","","","","","","","forest_blocks::gossip_block::json","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::gossip_block","","","","","","","","","","","","","","forest_blocks::header::json","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::header","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::ticket::json","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::ticket","","","","","","","","","","","","","","forest_blocks::tipset::tipset_keys_json","","","","","","","","","","","","forest_blocks::tipset::tipset_json","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks::tipset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_blocks","forest_blocks::header","forest_blocks::tipset","","forest_blocks::tipset::tipset_keys_json","forest_blocks::tipset::tipset_json","","forest_blocks","forest_blocks::election_proof","forest_blocks::gossip_block","forest_blocks::header","","forest_blocks::ticket","forest_blocks::tipset","","","forest_blocks::election_proof","forest_blocks::header","forest_blocks::ticket","forest_blocks::tipset","forest_blocks::election_proof","forest_blocks","","forest_blocks::election_proof","","forest_blocks","","forest_blocks::header","forest_blocks::ticket","","forest_blocks::tipset","","","","forest_blocks::election_proof","forest_blocks","forest_blocks::election_proof","forest_blocks","forest_blocks::gossip_block","forest_blocks::header","forest_blocks::ticket","forest_blocks::tipset","","","forest_blocks::tipset::tipset_json","forest_blocks","forest_blocks::header","forest_blocks::tipset","forest_blocks","forest_blocks::election_proof","forest_blocks::election_proof::json","","forest_blocks::gossip_block","forest_blocks::gossip_block::json","","forest_blocks::header::json","","forest_blocks::header","forest_blocks::ticket","forest_blocks::ticket::json","","forest_blocks::tipset","forest_blocks::tipset::tipset_keys_json","forest_blocks::tipset::tipset_json","","forest_blocks","forest_blocks::election_proof","forest_blocks::election_proof::json","forest_blocks::gossip_block","forest_blocks::gossip_block::json","forest_blocks::header::json","forest_blocks::header","forest_blocks::ticket","forest_blocks::ticket::json","forest_blocks::tipset","forest_blocks::tipset::tipset_keys_json","forest_blocks::tipset::tipset_json","forest_blocks::header","","forest_blocks","","",""],"d":["","","","","","Wrapper for serializing and deserializing a ElectionProof …","","Wrapper for serializing a ElectionProof reference to JSON.","","","","Proofs generated by a miner which determines the reward …","","","Uses VRFProof to compute number of wins. The algorithm is …","","","Wrapper for serializing and deserializing a GossipBlock …","","Wrapper for serializing a GossipBlock reference to JSON.","","","","Block message used as serialized gossipsub messages for …","","","","","","","","","","","Wrapper for serializing a BlockHeader reference to JSON.","","","","Header of a block","","Builder for <code>BlockHeader</code>.","Parents is the set of parents this block was based on. …","weight is the aggregate chain weight of the parent set","epoch is the period in which a new block is generated. …","BeaconEntries contain the verifiable oracle randomness …","PoStProofs are the winning post proofs","miner_address is the address of the miner actor that …","messages contains the Cid to the merkle links for …","message_receipts is the Cid of the root of an array of …","state_root is a cid pointer to the parent state root …","","","","timestamp, in seconds since the Unix epoch, at which this …","the ticket submitted with this block","aggregate signature of miner in block","the base fee of the parent block","Builds a new <code>BlockHeader</code>.","Generates a BlockHeader builder as a constructor","Getter for BlockHeader parents","Getter for BlockHeader weight","Getter for BlockHeader epoch","Getter for Drand BeaconEntry","Getter for winning PoSt proof","Getter for BlockHeader miner_address","Getter for BlockHeader messages","Getter for BlockHeader message_receipts","Getter for BlockHeader state_root","Getter for BlockHeader timestamp","Getter for BlockHeader ticket","Getter for BlockHeader bls_aggregate","Getter for BlockHeader cid","Getter for BlockHeader parent_base_fee","Getter for BlockHeader fork_signal","Getter for BlockHeader epost_verify","Getter for BlockHeader signature","Key used for sorting headers and blocks.","Check to ensure block signature is valid","Returns true if (h(vrfout) * totalPower) < (e * …","Validates if the current header’s Beacon entries are …","Serializes the header to bytes for signing purposes i.e. …","","","","","","","","","","","","A Ticket is a marker of a tick of the blockchain’s …","A proof output by running a VRF on the VDFResult of the …","Ticket constructor","","","","","","","","Wrapper for serializing and deserializing a SignedMessage …","","Wrapper for serializing a SignedMessage reference to JSON.","","","","A set of CIDs forming a unique key for a Tipset. Equal …","","","Returns tipset header cids","An immutable set of blocks at the same height with the …","Builds a new Tipset from a collection of blocks. A valid …","Returns epoch of the tipset.","Returns all blocks in tipset.","Consumes Tipset to convert into a vector of [BlockHeader].","Returns the smallest ticket of all blocks in the tipset","Returns the block with the smallest ticket of all blocks …","Returns the smallest timestamp of all blocks in the tipset","Returns the number of blocks in the tipset.","Returns a key for the tipset.","Returns slice of Cids for the current tipset","Returns the CIDs of the parents of the blocks in the …","Returns the state root for the tipset parent.","Returns the tipset’s calculated weight","FullTipset is an expanded version of the Tipset that …","","Returns reference to all blocks in a full tipset.","Returns all blocks in a full tipset.","Converts the full tipset into a [Tipset] which removes …","Returns a key for the tipset.","Returns the state root for the tipset parent.","Returns epoch of the tipset.","Returns the tipset’s calculated weight.","Limit of bls and secp messages combined in a block.","A complete Filecoin block. This contains the block header …","","","","Tracks the merkleroots of both secp and bls messages …","","","Blockchain blocks error","Tipset contains invalid data, as described by the string …","The given tipset has no blocks","Invalid signature","Error in validating arbitrary dataeturns reference to the [BlockHeader].","Returns reference to the block’s BLS [UnsignedMessage]s.","Returns reference to the block’s Secp256k1 […","Returns block’s cid. This cid is the same as the […"],"i":[0,0,0,0,0,0,1,0,2,0,0,0,3,3,3,0,0,0,4,0,5,0,0,0,6,6,6,0,0,0,0,0,0,7,0,8,0,0,0,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,11,0,12,0,0,0,13,13,0,0,0,14,0,0,0,0,15,0,16,0,0,0,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,0,0,20,20,20,0,21,21,0,22,22,22,22,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,22,22,22,22,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,22,9,18,17,14,15,16,20,3,6,9,10,13,17,18,19,3,10,13,17,3,20,20,3,3,22,22,9,13,13,17,17,18,19,3,20,3,22,6,9,13,17,18,19,15,22,9,17,21,3,1,2,6,4,5,7,8,9,13,11,12,17,14,15,16,21,3,1,6,4,7,9,13,11,17,14,15,9,9,20,20,20,20],"f":[null,null,null,[[["option",4]],["result",4]],[[],[["result",4],["option",4]]],null,null,null,null,[[["electionproof",3]],["result",4]],[[],[["result",4],["electionproof",3]]],null,null,null,[[["bigint",3]],["i64",15]],null,null,null,null,null,null,[[["gossipblock",3]],["result",4]],[[],[["gossipblock",3],["result",4]]],null,null,null,null,null,null,null,[[],["result",4]],[[],[["result",4],["vec",3]]],null,null,null,null,[[["blockheader",3]],["result",4]],[[],[["result",4],["blockheader",3]]],null,null,null,[[["tipsetkeys",3]]],[[["bigint",3]]],[[["chainepoch",6]]],[[["vec",3],["beaconentry",3]]],[[["vec",3],["postproof",3]]],[[["address",3]]],[[["cid",3]]],[[["cid",3]]],[[["cid",3]]],[[["u64",15]]],[[["option",4],["signature",3]]],[[["option",4],["electionproof",3]]],[[["u64",15]]],[[["option",4],["ticket",3]]],[[["option",4],["signature",3]]],[[["tokenamount",6]]],[[],[["string",3],["result",4],["blockheader",3]]],[[],["blockheaderbuilder",3]],[[],["tipsetkeys",3]],[[],["bigint",3]],[[],["chainepoch",6]],[[]],[[]],[[],["address",3]],[[],["cid",3]],[[],["cid",3]],[[],["cid",3]],[[],["u64",15]],[[],["option",4]],[[],["option",4]],[[],["cid",3]],[[],["bigint",3]],[[],["u64",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["address",3]],[["error",4],["result",4]]],[[["ticket",3],["bigint",3]],["bool",15]],[[["beaconschedule",3],["chainepoch",6],["beaconentry",3]]],[[],[["vec",3],["u8",15]]],null,null,null,[[["option",4]],["result",4]],[[],[["result",4],["option",4]]],null,null,null,null,[[["ticket",3]],["result",4]],[[],[["result",4],["ticket",3]]],null,null,[[["vrfproof",3]]],null,null,null,null,[[["tipsetkeys",3]],["result",4]],[[],[["tipsetkeys",3],["result",4]]],null,null,null,null,null,[[["tipset",3]],["result",4]],[[],[["result",4],["arc",3]]],null,null,[[["vec",3],["cid",3]]],[[]],null,[[["vec",3],["blockheader",3]],[["result",4],["error",4]]],[[],["chainepoch",6]],[[]],[[],[["vec",3],["blockheader",3]]],[[],[["ticket",3],["option",4]]],[[],["blockheader",3]],[[],["u64",15]],[[],["usize",15]],[[],["tipsetkeys",3]],[[]],[[],["tipsetkeys",3]],[[],["cid",3]],[[],["bigint",3]],null,[[["block",3],["vec",3]],[["result",4],["error",4]]],[[]],[[],[["block",3],["vec",3]]],[[],["tipset",3]],[[],["tipsetkeys",3]],[[],["cid",3]],[[],["chainepoch",6]],[[],["bigint",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["timeerr",3]],["error",4]],[[["blockheaderjson",3]]],[[["fulltipset",3]]],[[["tipsetkeysjson",3]]],[[["tipsetkeys",3]]],[[["arc",3],["tipset",3]]],[[["tipset",3]]],[[],["block",3]],[[],["electionproof",3]],[[],["gossipblock",3]],[[],["blockheader",3]],[[],["blockheaderbuilder",3]],[[],["ticket",3]],[[],["tipsetkeys",3]],[[],["tipset",3]],[[],["fulltipset",3]],[[],["electionproof",3]],[[],["blockheaderbuilder",3]],[[],["ticket",3]],[[],["tipsetkeys",3]],[[["electionproof",3]],["ordering",4]],[[["block",3]],["bool",15]],[[["block",3]],["bool",15]],[[["electionproof",3]],["bool",15]],[[["electionproof",3]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[],["bool",15]],[[["ticket",3]],["bool",15]],[[["ticket",3]],["bool",15]],[[["tipsetkeys",3]],["bool",15]],[[["tipsetkeys",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["electionproof",3]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["vec",3],["result",4],["encodingerror",3]]],[[],[["encodingerror",3],["result",4],["cid",3]]],[[],["blockheader",3]],[[]],[[]],[[],["cid",3]]],"p":[[3,"ElectionProofJson"],[3,"ElectionProofJsonRef"],[3,"ElectionProof"],[3,"GossipBlockJson"],[3,"GossipBlockJsonRef"],[3,"GossipBlock"],[3,"BlockHeaderJson"],[3,"BlockHeaderJsonRef"],[3,"BlockHeader"],[3,"BlockHeaderBuilder"],[3,"TicketJson"],[3,"TicketJsonRef"],[3,"Ticket"],[3,"TipsetKeysJson"],[3,"TipsetJson"],[3,"TipsetJsonRef"],[3,"TipsetKeys"],[3,"Tipset"],[3,"FullTipset"],[3,"Block"],[3,"TxMeta"],[4,"Error"]]},\
"forest_car":{"doc":"","t":[4,13,13,13,13,13,3,12,12,11,11,3,12,12,11,11,3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","ParsingError","InvalidFile","Io","Cbor","Other","CarHeader","roots","version","new","write_stream_async","CarReader","reader","header","new","next_block","Block","load_car","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","from","from","clone","default","eq","ne","fmt","fmt","fmt","fmt","source","serialize","deserialize"],"q":["forest_car","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Car utility error","","","","","","CAR file header","","","Creates a new CAR file header","Writes header and stream of data to writer in Car format.","Reads CAR files that are in a BufReader","","","Creates a new CarReader and parses the CarHeader","Returns the next IPLD Block in the buffer","IPLD Block","Loads a CAR buffer into a BlockStore","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,0,2,2,2,2,0,3,3,3,3,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,1,1,1,1,2,4,2,2,2,1,2,4,1,1,2,2],"f":[null,null,null,null,null,null,null,null,null,[[["u64",15],["cid",3],["vec",3]]],[[]],null,null,null,[[]],[[]],null,[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["error",3]]],[[["error",3]]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[["cid",3],["vec",3]]],[[],["block",3]],[[],["carheader",3]],[[["carheader",3]],["bool",15]],[[["carheader",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[],["result",4]],[[],["result",4]]],"p":[[4,"Error"],[3,"CarHeader"],[3,"CarReader"],[3,"Block"]]},\
"forest_cid":{"doc":"","t":[0,0,3,12,3,12,5,5,0,5,5,3,12,3,12,5,5,4,13,13,6,17,17,3,12,12,12,12,4,13,13,13,13,13,13,13,13,13,4,13,13,17,17,17,17,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["json","vec","CidJsonVec","0","CidJsonSlice","0","serialize","deserialize","opt","serialize","deserialize","CidJson","0","CidJsonRef","0","serialize","deserialize","Code","Blake2b256","Identity","Multihash","POSEIDON_BLS12_381_A1_FC1","SHA2_256_TRUNC254_PADDED","Prefix","version","codec","mh_type","mh_len","Error","UnknownCodec","InputTooShort","ParsingError","InvalidCidVersion","InvalidCidV0Codec","InvalidCidV0Multihash","InvalidCidV0Base","VarIntDecodeError","Io","Version","V0","V1","DAG_CBOR","FIL_COMMITMENT_SEALED","FIL_COMMITMENT_UNSEALED","RAW","new_from_cbor","new_from_prefix","Cid","new","new_v1","version","codec","hash","read_bytes","to_bytes","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","hash","from","from","from","from","from","eq","cmp","fmt","clone","try_from","partial_cmp","fmt","fmt","from","from","from","from","clone","clone","clone","clone","default","cmp","eq","eq","ne","eq","ne","partial_cmp","fmt","fmt","fmt","fmt","fmt","hash","try_from","try_from","try_from","try_from","try_from","from_str","digest","multihash_from_digest","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","new_from_bytes","to_bytes","is_v0_str","is_v0_binary"],"q":["forest_cid","forest_cid::json","forest_cid::json::vec","","","","","","forest_cid::json","forest_cid::json::opt","","forest_cid::json","","","","","","forest_cid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_cid::json::vec","","","","","","","","","","","","","","forest_cid::json","","","","","","","","","","","","","","","","forest_cid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_cid::json","forest_cid","","","","","","","","","","","forest_cid::json","forest_cid","","","","","","","","","","","forest_cid::json","","forest_cid::json::vec","","forest_cid","forest_cid::json","forest_cid::json::vec","forest_cid","","","",""],"d":["","","Wrapper for serializing and deserializing a Cid vector …","","Wrapper for serializing a cid slice to JSON.","","","","","","","Wrapper for serializing and deserializing a Cid from JSON.","","Wrapper for serializing a cid reference to JSON.","","","","Multihash generation codes for the Filecoin protocol. …","BLAKE2b-256 (32-byte hash size)","Identity multihash (max 32 bytes)","A Multihash with the same allocated size as the …","Multihash code for Poseidon BLS replica commitments.","Multihash code for Sha2 256 trunc254 padded used in data …","Prefix represents all metadata of a CID, without the …","","","","","Error types","Unknown CID codec.","Input data is too short.","Multibase or multihash codec failure","Invalid CID version.","Invalid CIDv0 codec.","Invalid CIDv0 multihash.","Invalid CIDv0 base encoding.","Varint decode failure.","Io error.","The version of the CID.","CID version 0.","CID version 1.","Cbor [Cid] codec.","Sealed commitment [Cid] codec.","Unsealed commitment [Cid] codec.","Raw [Cid] codec. This represents data that is not encoded …","Constructs a cid with bytes using default version and …","Create a new CID from a prefix and some data.","Content identifier for any Ipld data. This Cid consists …","Create a new CID.","Create a new CIDv1.","Returns the cid version.","Returns the cid codec.","Returns the cid multihash.","Reads the bytes from a byte stream.","Returns the encoded bytes of the <code>Cid</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate new prefix from encoded bytes","Encodes prefix to bytes","Check if the version of <code>data</code> string is CIDv0.","Check if the version of <code>data</code> bytes is CIDv0."],"i":[0,0,0,1,0,2,0,0,0,0,0,0,3,0,4,0,0,0,5,5,0,0,0,0,6,6,6,6,0,7,7,7,7,7,7,7,7,7,0,8,8,0,0,0,0,0,0,0,9,9,9,9,9,9,9,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,8,7,7,7,7,7,8,8,7,8,8,8,7,8,5,5,6,9,5,6,3,9,9,9,5,6,6,9,9,9,5,6,3,9,9,9,5,9,9,9,9,9,5,5,3,4,1,2,9,3,1,9,6,6,8,8],"f":[null,null,null,null,null,null,[[],["result",4]],[[],[["vec",3],["result",4]]],null,[[["option",4]],["result",4]],[[],[["result",4],["option",4]]],null,null,null,null,[[["cid",3]],["result",4]],[[],[["result",4],["cid",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["code",4]],["cid",3]],[[["prefix",3]],[["result",4],["cid",3],["error",4]]],null,[[["multihash",6],["version",4],["u64",15]],[["error",4],["result",4]]],[[["multihash",6],["u64",15]]],[[],["version",4]],[[],["u64",15]],[[],["multihash",6]],[[["read",8]],[["error",4],["result",4]]],[[],[["vec",3],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["error",3]],["error",4]],[[["error",4]],["error",4]],[[["error",4]],["error",4]],[[["readerror",4]],["error",4]],[[["error",4]],["error",4]],[[["version",4]],["bool",15]],[[["version",4]],["ordering",4]],[[["formatter",3]],[["result",4],["error",3]]],[[],["version",4]],[[["u64",15]],[["version",4],["error",4],["result",4]]],[[["version",4]],[["ordering",4],["option",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["blake2bdigest",3]]],[[["identitydigest",3]]],[[["cid",3]]],[[["cidjson",3]]],[[],["code",4]],[[],["prefix",3]],[[],["cidjson",3]],[[],["cid",3]],[[],["cid",3]],[[["cid",3]],["ordering",4]],[[["code",4]],["bool",15]],[[["prefix",3]],["bool",15]],[[["prefix",3]],["bool",15]],[[["cid",3]],["bool",15]],[[["cid",3]],["bool",15]],[[["cid",3]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u64",15]],["result",4]],[[["string",3]],["result",4]],[[["str",15]],["result",4]],[[["vec",3],["u8",15]],["result",4]],[[],["result",4]],[[["str",15]],[["error",4],["result",4]]],[[],["multihash",6]],[[],["multihash",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["error",4],["prefix",3],["result",4]]],[[],[["vec",3],["u8",15]]],[[["str",15]],["bool",15]],[[],["bool",15]]],"p":[[3,"CidJsonVec"],[3,"CidJsonSlice"],[3,"CidJson"],[3,"CidJsonRef"],[4,"Code"],[3,"Prefix"],[4,"Error"],[4,"Version"],[3,"Cid"]]},\
"forest_crypto":{"doc":"","t":[0,0,0,5,5,0,3,12,5,5,3,12,3,12,5,5,17,17,17,17,4,13,13,3,11,11,11,11,11,5,5,0,0,5,5,3,12,11,11,11,5,4,13,13,13,4,13,13,13,13,13,13,13,13,13,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["signature","json","opt","serialize","deserialize","signature_type","SignatureTypeJson","0","serialize","deserialize","SignatureJson","0","SignatureJsonRef","0","serialize","deserialize","BLS_SIG_LEN","BLS_PUB_LEN","SECP_SIG_LEN","SECP_PUB_LEN","SignatureType","Secp256k1","BLS","Signature","new_secp256k1","new_bls","bytes","signature_type","verify","verify_bls_aggregate","ecrecover","vrf","json","serialize","deserialize","VRFProof","0","new","as_bytes","digest","verify_vrf","Error","SigningError","InvalidRecovery","InvalidPubKey","DomainSeparationTag","TicketProduction","ElectionProofProduction","WinningPoStChallengeSeed","WindowedPoStChallengeSeed","SealRandomness","InteractiveSealChallengeSeed","WindowPoStDeadlineAssignment","MarketDealCronSeed","PoStChainCommit","Signer","sign_bytes","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","from","from","from","clone","clone","clone","clone","default","cmp","eq","ne","eq","eq","eq","ne","eq","ne","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","source","from_i64","from_u64","from_i64","from_u64","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","serialize","serialize","serialize","serialize","serialize","serialize"],"q":["forest_crypto","forest_crypto::signature","forest_crypto::signature::json","forest_crypto::signature::json::opt","","forest_crypto::signature::json","forest_crypto::signature::json::signature_type","","","","forest_crypto::signature::json","","","","","","forest_crypto::signature","","","","","","","","","","","","","","","forest_crypto","forest_crypto::vrf","forest_crypto::vrf::json","","forest_crypto::vrf","","","","","","forest_crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_crypto::signature::json::signature_type","","","","","","","","forest_crypto::signature::json","","","","","","","","","","","","","","","","forest_crypto::signature","","","","","","","","","","","","","","","","","","","","forest_crypto::vrf","","","","","","","","","","forest_crypto","","","","","forest_crypto::signature","","forest_crypto::vrf","","","forest_crypto","","","forest_crypto::signature","","","forest_crypto::vrf","","","forest_crypto","","forest_crypto::signature","","forest_crypto::vrf","forest_crypto","","forest_crypto::signature","","forest_crypto","","","forest_crypto::signature","","forest_crypto","forest_crypto::signature","","forest_crypto::signature::json","forest_crypto::signature::json::signature_type","forest_crypto::vrf","forest_crypto::signature","","forest_crypto::signature::json","","forest_crypto::signature::json::signature_type","forest_crypto::vrf"],"d":["","","","","","","","","","","","","Wrapper for serializing a Signature reference to JSON.","","","","BLS signature length in bytes.","BLS Public key length in bytes.","Secp256k1 signature length in bytes.","Secp256k1 Public key length in bytes.","Signature variants for Filecoin signatures.","","","A cryptographic signature, represented in bytes, of any …","Creates a SECP Signature given the raw bytes.","Creates a BLS Signature given the raw bytes.","Returns reference to signature bytes.","Returns [SignatureType] for the signature.","Checks if a signature is valid given data and address.","Aggregates and verifies bls signatures collectively.","Return Address for a message given it’s signing bytes …","","","","","The output from running a VRF proof.","","Creates a VRFProof from a raw vector.","Returns reference to underlying proof bytes.","Compute the blake2b256 digest of the proof.","Verifies raw VRF proof. This VRF proof is a BLS signature.","Crypto error","Failed to produce a signature","Unable to perform ecrecover with the given params","Provided public key is not understood","Specifies a domain for randomness generation.","","","","","","","","","","Signer is a trait which allows a key implementation to …","Function signs any arbitrary data given the [Address].","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,0,0,0,2,0,3,0,0,0,0,0,0,0,4,4,0,5,5,5,5,5,0,0,0,0,0,0,0,6,6,6,6,0,0,7,7,7,0,8,8,8,8,8,8,8,8,8,0,9,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,8,4,5,6,6,6,7,7,8,4,5,5,6,6,6,7,8,4,5,6,7,8,4,5,7,8,8,4,4,8,4,5,2,1,6,4,5,2,3,1,6],"f":[null,null,null,[[["option",4]],["result",4]],[[],[["option",4],["result",4]]],null,null,null,[[["signaturetype",4]],["result",4]],[[],[["result",4],["signaturetype",4]]],null,null,null,null,[[["signature",3]],["result",4]],[[],[["signature",3],["result",4]]],null,null,null,null,null,null,null,null,[[["vec",3],["u8",15]]],[[["vec",3],["u8",15]]],[[]],[[],["signaturetype",4]],[[["address",3]],[["result",4],["string",3]]],[[["signature",3]],["bool",15]],[[],[["error",4],["result",4],["address",3]]],null,null,[[["vrfproof",3]],["result",4]],[[],[["vrfproof",3],["result",4]]],null,null,[[["vec",3],["u8",15]]],[[]],[[]],[[["address",3]],[["result",4],["string",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["address",3]],[["box",3],["result",4],["signature",3]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["addresserror",4]]],[[["error",8],["box",3]],["error",4]],[[["secperror",4]],["error",4]],[[["encodingerror",3]],["error",4]],[[],["domainseparationtag",4]],[[],["signaturetype",4]],[[],["signature",3]],[[],["vrfproof",3]],[[],["vrfproof",3]],[[["vrfproof",3]],["ordering",4]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["domainseparationtag",4]],["bool",15]],[[["signaturetype",4]],["bool",15]],[[["signature",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["vrfproof",3]],["bool",15]],[[["vrfproof",3]],["bool",15]],[[["vrfproof",3]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["error",8],["option",4]]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]]],"p":[[3,"SignatureTypeJson"],[3,"SignatureJson"],[3,"SignatureJsonRef"],[4,"SignatureType"],[3,"Signature"],[3,"VRFProof"],[4,"Error"],[4,"DomainSeparationTag"],[8,"Signer"]]},\
"forest_db":{"doc":"","t":[0,3,3,3,3,12,11,4,13,13,13,13,13,3,8,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["rocks","Options","WriteBatch","DB","RocksDb","db","open","Error","InvalidBulkLen","Unopened","Database","Encoding","Other","MemoryDB","Store","read","write","delete","exists","bulk_read","bulk_write","bulk_delete","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","default","default","drop","drop","drop","clone","fmt","write","delete","read","exists","write","delete","bulk_write","read","exists","from","from","clone","default","eq","fmt","fmt","fmt","fmt","source","increase_parallelism","optimize_level_style_compaction","optimize_universal_style_compaction","create_if_missing","create_missing_column_families","set_error_if_exists","set_paranoid_checks","set_db_paths","set_env","set_compression_type","set_compression_per_level","set_compression_options","set_compaction_readahead_size","set_level_compaction_dynamic_level_bytes","set_merge_operator","add_merge_operator","set_compaction_filter","set_compaction_filter_factory","set_comparator","set_prefix_extractor","add_comparator","optimize_for_point_lookup","set_optimize_filters_for_hits","set_delete_obsolete_files_period_micros","prepare_for_bulk_load","set_max_open_files","set_max_file_opening_threads","set_use_fsync","set_db_log_dir","set_bytes_per_sync","set_wal_bytes_per_sync","set_writable_file_max_buffer_size","set_allow_concurrent_memtable_write","set_enable_write_thread_adaptive_yield","set_max_sequential_skip_in_iterations","set_use_direct_reads","set_use_direct_io_for_flush_and_compaction","set_is_fd_close_on_exec","set_skip_log_error_on_recovery","set_allow_os_buffer","set_table_cache_num_shard_bits","set_target_file_size_multiplier","set_min_write_buffer_number","set_max_write_buffer_number","set_write_buffer_size","set_db_write_buffer_size","set_max_bytes_for_level_base","set_max_bytes_for_level_multiplier","set_max_manifest_file_size","set_target_file_size_base","set_min_write_buffer_number_to_merge","set_level_zero_file_num_compaction_trigger","set_level_zero_slowdown_writes_trigger","set_level_zero_stop_writes_trigger","set_compaction_style","set_universal_compaction_options","set_fifo_compaction_options","set_unordered_write","set_max_subcompactions","set_max_background_jobs","set_max_background_compactions","set_max_background_flushes","set_disable_auto_compactions","set_memtable_huge_page_size","set_max_successive_merges","set_bloom_locality","set_inplace_update_support","set_inplace_update_locks","set_max_bytes_for_level_multiplier_additional","set_skip_checking_sst_file_sizes_on_db_open","set_max_write_buffer_size_to_maintain","set_enable_pipelined_write","set_memtable_factory","set_block_based_table_factory","set_plain_table_factory","set_min_level_to_compress","set_report_bg_io_stats","set_max_total_wal_size","set_wal_recovery_mode","enable_statistics","get_statistics","set_stats_dump_period_sec","set_advise_random_on_open","set_access_hint_on_compaction_start","set_use_adaptive_mutex","set_num_levels","set_memtable_prefix_bloom_ratio","set_max_compaction_bytes","set_wal_dir","set_wal_ttl_seconds","set_wal_size_limit_mb","set_manifest_preallocation_size","set_purge_redundant_kvs_while_flush","set_skip_stats_update_on_db_open","set_keep_log_file_num","set_allow_mmap_writes","set_allow_mmap_reads","set_atomic_flush","set_row_cache","set_ratelimiter","set_max_log_file_size","set_log_file_time_to_roll","set_recycle_log_file_num","set_soft_rate_limit","set_hard_rate_limit","set_soft_pending_compaction_bytes_limit","set_hard_pending_compaction_bytes_limit","set_rate_limit_delay_max_milliseconds","set_arena_block_size","set_dump_malloc_stats","set_memtable_whole_key_filtering","len","size_in_bytes","is_empty","iterate","put","put_cf","merge","merge_cf","delete","delete_cf","delete_range","delete_range_cf","clear","open_default","open","open_for_read_only","open_as_secondary","open_with_ttl","open_cf","open_cf_for_read_only","open_cf_as_secondary","open_cf_descriptors","list_cf","destroy","repair","path","flush_opt","flush","flush_cf_opt","flush_cf","write_opt","write","write_without_wal","get_opt","get","get_cf_opt","get_cf","get_pinned_opt","get_pinned","get_pinned_cf_opt","get_pinned_cf","create_cf","drop_cf","cf_handle","iterator","iterator_opt","iterator_cf_opt","full_iterator","prefix_iterator","iterator_cf","full_iterator_cf","prefix_iterator_cf","raw_iterator","raw_iterator_cf","raw_iterator_opt","raw_iterator_cf_opt","snapshot","put_opt","put_cf_opt","merge_opt","merge_cf_opt","delete_opt","delete_cf_opt","delete_range_cf_opt","put","put_cf","merge","merge_cf","delete","delete_cf","delete_range_cf","compact_range","compact_range_opt","compact_range_cf","compact_range_cf_opt","set_options","property_value","property_value_cf","property_int_value","property_int_value_cf","latest_sequence_number","get_updates_since","try_catch_up_with_primary","ingest_external_file","ingest_external_file_opts","ingest_external_file_cf","ingest_external_file_cf_opts","live_files","delete_file_in_range","delete_file_in_range_cf"],"q":["forest_db","forest_db::rocks","","","","","","forest_db","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_db::rocks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_db","","","","forest_db::rocks","","","","","forest_db","","","","","","","forest_db::rocks","forest_db","","forest_db::rocksd":["","Database-wide options around performance and behavior.","An atomic batch of write operations.","A RocksDB database.","RocksDB instance this satisfies the [Store] interface.","","","Database error","","","","","","A thread-safe <code>HashMap</code> wrapper.","Store interface used as a KV store implementation","Read single value from data store and return <code>None</code> if key …","Write a single value to the data store.","Delete value at key.","Returns <code>Ok(true)</code> if key exists in store","Read slice of keys and return a vector of optional values.","Write slice of KV pairs.","Bulk delete keys from the data store.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","By default, RocksDB uses only one background thread for …","Optimize level style compaction.","Optimize universal style compaction.","If true, the database will be created if it is missing.","If true, any column families that didn’t exist when …","Specifies whether an error should be raised if the …","Enable/disable paranoid checks.","A list of paths where SST files can be put into, with its …","Use the specified object to interact with the environment,…","Sets the compression algorithm that will be used for …","Different levels can have different compression policies. …","Maximum size of dictionaries used to prime the …","If non-zero, we perform bigger reads when doing …","Allow RocksDB to pick dynamic base of bytes for levels. …","","","Sets a compaction filter used to determine if entries …","This is a factory that provides compaction filter objects …","Sets the comparator used to define the order of keys in …","","","","Sets the optimize_filters_for_hits flag","Sets the periodicity when obsolete files get deleted.","Prepare the DB for bulk loading.","Sets the number of open files that can be used by the DB. …","If max_open_files is -1, DB will open all files on …","If true, then every store to stable storage will issue a …","Specifies the absolute info LOG dir.","Allows OS to incrementally sync files to disk while they …","Same as bytes_per_sync, but applies to WAL files.","Sets the maximum buffer size that is used by …","If true, allow multi-writers to update mem tables in …","If true, threads synchronizing with the write batch group …","Specifies whether an iteration->Next() sequentially skips …","Enable direct I/O mode for reading they may or may not …","Enable direct I/O mode for flush and compaction","Enable/dsiable child process inherit open files.","Enable/disable skipping of log corruption error on …","Hints to the OS that it should not buffer disk I/O. …","Sets the number of shards used for table cache.","By default target_file_size_multiplier is 1, which means …","Sets the minimum number of write buffers that will be …","Sets the maximum number of write buffers that are built …","Sets the amount of data to build up in memory (backed by …","Amount of data to build up in memtables across all column …","Control maximum total data size for a level. …","Default: <code>10</code>","The manifest file is rolled over on reaching this limit. …","Sets the target file size for compaction. …","Sets the minimum number of write buffers that will be …","Sets the number of files to trigger level-0 compaction. A …","Sets the soft limit on number of level-0 files. We start …","Sets the maximum number of level-0 files.  We stop writes …","Sets the compaction style.","Sets the options needed to support Universal Style …","Sets the options for FIFO compaction style.","Sets unordered_write to true trades higher write …","Sets maximum number of threads that will concurrently …","Sets maximum number of concurrent background jobs …","Sets the maximum number of concurrent background …","Sets the maximum number of concurrent background memtable …","Disables automatic compactions. Manual compactions can …","SetMemtableHugePageSize sets the page size for huge page …","Sets the maximum number of successive merge operations on …","Control locality of bloom filter probes to improve cache …","Enable/disable thread-safe inplace updates.","Sets the number of locks used for inplace update.","Different max-size multipliers for different levels. …","If true, then DB::Open() will not fetch and check sizes …","The total maximum size(bytes) of write buffers to …","By default, a single write thread queue is maintained. …","Defines the underlying memtable implementation. See …","","Sets the factory as plain table. See official wiki for …","Sets the start level to use compression.","Measure IO stats in compactions and flushes, if <code>true</code>.","Once write-ahead logs exceed this size, we will start …","Recovery mode to control the consistency while replaying …","","","If not zero, dump <code>rocksdb.stats</code> to LOG every …","When set to true, reading SST files will opt out of the …","Specifies the file access pattern once a compaction is …","Enable/disable adaptive mutex, which spins in the user …","Sets the number of levels for this database.","When a <code>prefix_extractor</code> is defined through …","Sets the maximum number of bytes in all compacted files. …","Specifies the absolute path of the directory the …","Sets the WAL ttl in seconds.","Sets the WAL size limit in MB.","Sets the number of bytes to preallocate (via fallocate) …","Enable/disable purging of duplicate/deleted keys when a …","If true, then DB::Open() will not update the statistics …","Specify the maximal number of info log files to be kept.","Allow the OS to mmap file for writing.","Allow the OS to mmap file for reading sst tables.","Guarantee that all column families are flushed together …","Sets global cache for table-level rows. Cache must …","Use to control write rate of flush and compaction. Flush …","Sets the maximal size of the info log file.","Sets the time for the info log file to roll (in seconds).","Controls the recycling of log files.","Sets the soft rate limit.","Sets the hard rate limit.","Sets the threshold at which all writes will be slowed …","Sets the bytes threshold at which all writes are stopped …","Sets the max time a put will be stalled when …","Sets the size of one block in arena memory allocation.","If true, then print malloc stats together with …","Enable whole key bloom filter in memtable. Note this will …","","Return WriteBatch serialized size (in bytes).","","Iterate the put and delete operations within this write …","Insert a value into the database under the given key.","","","","Removes the database entry for key. Does nothing if the …","","Remove database entries from start key to end key.","Remove database entries in column family from start key …","Clear all updates buffered in this batch.","Opens a database with default options.","Opens the database with the specified options.","Opens the database for read only with the specified …","Opens the database as a secondary.","Opens the database with a Time to Live compaction filter.","Opens a database with the given database options and …","Opens a database for read only with the given database …","Opens the database as a secondary with the given database …","Opens a database with the given database options and …","","","","","Flushes database memtables to SST files on the disk.","Flushes database memtables to SST files on the disk using …","Flushes database memtables to SST files on the disk for a …","Flushes database memtables to SST files on the disk for a …","","","","Return the bytes associated with a key value with read …","Return the bytes associated with a key value. If you only …","Return the bytes associated with a key value and the …","Return the bytes associated with a key value and the …","Return the value associated with a key using RocksDB’s …","Return the value associated with a key using RocksDB’s …","Return the value associated with a key using RocksDB’s …","Return the value associated with a key using RocksDB’s …","","","Return the underlying column family handle.","","","Opens an iterator using the provided ReadOptions. This is …","Opens an iterator with <code>set_total_order_seek</code> enabled. This …","","","","","Opens a raw iterator over the database, using the default …","Opens a raw iterator over the given column family, using …","Opens a raw iterator over the database, using the given …","Opens a raw iterator over the given column family, using …","","","","","","","","Removes the database entries in the range <code>[\\\"from\\\", \\\"to\\\")</code> …","","","","","","","Removes the database entries in the range <code>[\\\"from\\\", \\\"to\\\")</code> …","Runs a manual compaction on the Range of keys given. This …","Same as <code>compact_range</code> but with custom options.","Runs a manual compaction on the Range of keys given on the…","Same as <code>compact_range_cf</code> but with custom options.","","Retrieves a RocksDB property by name.","Retrieves a RocksDB property by name, for a specific …","Retrieves a RocksDB property and casts it to an integer.","Retrieves a RocksDB property for a specific column family …","The sequence number of the most recent transaction.","Iterate over batches of write operations since a given …","Tries to catch up with the primary by reading as much as …","Loads a list of external SST files created with …","Loads a list of external SST files created with …","Loads a list of external SST files created with …","Loads a list of external SST files created with …","Returns a list of all table files with their level, start …","Delete sst files whose keys are entirely in the given …","Same as <code>delete_file_in_range</code> but only for specific column …"],"i":[0,0,0,0,0,1,1,0,2,2,2,2,2,0,0,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,1,1,1,1,1,1,1,5,6,5,6,7,5,7,4,4,4,4,1,1,1,1,1,2,2,4,4,2,2,4,1,2,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],"f":[null,null,null,null,null,null,[[],[["result",4],["error",4]]],null,null,null,null,null,null,null,null,[[],[["error",4],["option",4],["result",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["bool",15],["result",4],["error",4]]],[[],[["vec",3],["error",4],["result",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["options",3]],[[],["writebatch",3]],[[]],[[]],[[]],[[],["options",3]],[[["formatter",3]],[["result",4],["error",3]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["error",4],["option",4],["result",4]]],[[],[["bool",15],["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["error",4],["option",4],["result",4]]],[[],[["bool",15],["result",4],["error",4]]],[[["error",3]]],[[["cborerror",3]]],[[]],[[],["memorydb",3]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[["env",3]]],[[["dbcompressiontype",4]]],[[]],[[["i32",15]]],[[["usize",15]]],[[["bool",15]]],[[["option",4],["str",15]]],[[["str",15]]],[[["str",15]]],[[]],[[["str",15]]],[[["slicetransform",3]]],[[["str",15]]],[[["u64",15]]],[[["bool",15]]],[[["u64",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[["bool",15]]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["bool",15]]],[[["bool",15]]],[[["u64",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]]],[[["f64",15]]],[[["usize",15]]],[[["u64",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["dbcompactionstyle",4]]],[[["universalcompactoptions",3]]],[[["fifocompactoptions",3]]],[[["bool",15]]],[[["u32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]]],[[["bool",15]]],[[["usize",15]]],[[]],[[["bool",15]]],[[["i64",15]]],[[["bool",15]]],[[["memtablefactory",4]]],[[["blockbasedoptions",3]]],[[["plaintablefactoryoptions",3]]],[[["i32",15]]],[[["bool",15]]],[[["u64",15]]],[[["dbrecoverymode",4]]],[[]],[[],[["option",4],["string",3]]],[[["u32",15]]],[[["bool",15]]],[[["accesshint",4]]],[[["bool",15]]],[[["i32",15]]],[[["f64",15]]],[[["u64",15]]],[[]],[[["u64",15]]],[[["u64",15]]],[[["usize",15]]],[[["bool",15]]],[[["bool",15]]],[[["usize",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["cache",3]]],[[["i64",15],["i32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["f64",15]]],[[["f64",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]]],[[["usize",15]]],[[["bool",15]]],[[["bool",15]]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[["writebatchiterator",8]]],[[]],[[["columnfamily",3]]],[[]],[[["columnfamily",3]]],[[]],[[["columnfamily",3]]],[[]],[[["columnfamily",3]]],[[]],[[],[["result",4],["db",3],["error",3]]],[[["options",3]],[["result",4],["db",3],["error",3]]],[[["bool",15],["options",3]],[["result",4],["db",3],["error",3]]],[[["options",3]],[["result",4],["db",3],["error",3]]],[[["options",3],["duration",3]],[["result",4],["db",3],["error",3]]],[[["options",3]],[["result",4],["db",3],["error",3]]],[[["bool",15],["options",3]],[["result",4],["db",3],["error",3]]],[[["options",3]],[["result",4],["db",3],["error",3]]],[[["options",3]],[["result",4],["db",3],["error",3]]],[[["options",3]],[["vec",3],["result",4],["error",3]]],[[["options",3]],[["result",4],["error",3]]],[[["options",3]],[["result",4],["error",3]]],[[],["path",3]],[[["flushoptions",3]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["flushoptions",3],["columnfamily",3]],[["result",4],["error",3]]],[[["columnfamily",3]],[["result",4],["error",3]]],[[["writeoptions",3],["writebatch",3]],[["result",4],["error",3]]],[[["writebatch",3]],[["result",4],["error",3]]],[[["writebatch",3]],[["result",4],["error",3]]],[[["readoptions",3]],[["error",3],["result",4],["option",4]]],[[],[["error",3],["result",4],["option",4]]],[[["readoptions",3],["columnfamily",3]],[["error",3],["result",4],["option",4]]],[[["columnfamily",3]],[["error",3],["result",4],["option",4]]],[[["readoptions",3]],[["option",4],["error",3],["result",4]]],[[],[["option",4],["error",3],["result",4]]],[[["readoptions",3],["columnfamily",3]],[["option",4],["error",3],["result",4]]],[[["columnfamily",3]],[["option",4],["error",3],["result",4]]],[[["options",3]],[["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3]]],[[["str",15]],[["option",4],["columnfamily",3]]],[[["iteratormode",4]],["dbiterator",3]],[[["readoptions",3],["iteratormode",4]],["dbiterator",3]],[[["readoptions",3],["iteratormode",4],["columnfamily",3]],["dbiterator",3]],[[["iteratormode",4]],["dbiterator",3]],[[],["dbiterator",3]],[[["iteratormode",4],["columnfamily",3]],["dbiterator",3]],[[["iteratormode",4],["columnfamily",3]],["dbiterator",3]],[[["columnfamily",3]],["dbiterator",3]],[[],["dbrawiterator",3]],[[["columnfamily",3]],["dbrawiterator",3]],[[["readoptions",3]],["dbrawiterator",3]],[[["readoptions",3],["columnfamily",3]],["dbrawiterator",3]],[[],["snapshot",3]],[[["writeoptions",3]],[["result",4],["error",3]]],[[["columnfamily",3],["writeoptions",3]],[["result",4],["error",3]]],[[["writeoptions",3]],[["result",4],["error",3]]],[[["columnfamily",3],["writeoptions",3]],[["result",4],["error",3]]],[[["writeoptions",3]],[["result",4],["error",3]]],[[["columnfamily",3],["writeoptions",3]],[["result",4],["error",3]]],[[["columnfamily",3],["writeoptions",3]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["columnfamily",3]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["columnfamily",3]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["columnfamily",3]],[["result",4],["error",3]]],[[["columnfamily",3]],[["result",4],["error",3]]],[[["option",4],["option",4]]],[[["option",4],["compactoptions",3],["option",4]]],[[["option",4],["columnfamily",3],["option",4]]],[[["option",4],["compactoptions",3],["option",4],["columnfamily",3]]],[[],[["result",4],["error",3]]],[[["str",15]],[["option",4],["result",4],["error",3]]],[[["columnfamily",3],["str",15]],[["option",4],["result",4],["error",3]]],[[["str",15]],[["result",4],["option",4],["error",3]]],[[["columnfamily",3],["str",15]],[["result",4],["option",4],["error",3]]],[[],["u64",15]],[[["u64",15]],[["error",3],["dbwaliterator",3],["result",4]]],[[],[["result",4],["error",3]]],[[["global",3],["vec",3]],[["result",4],["error",3]]],[[["vec",3],["global",3],["ingestexternalfileoptions",3]],[["result",4],["error",3]]],[[["global",3],["columnfamily",3],["vec",3]],[["result",4],["error",3]]],[[["global",3],["ingestexternalfileoptions",3],["vec",3],["columnfamily",3]],[["result",4],["error",3]]],[[],[["error",3],["result",4],["vec",3]]],[[],[["result",4],["error",3]]],[[["columnfamily",3]],[["result",4],["error",3]]]],"p":[[3,"RocksDb"],[4,"Error"],[8,"Store"],[3,"MemoryDB"],[3,"Options"],[3,"WriteBatch"],[3,"DB"]]},\
"forest_encoding":{"doc":"","t":[0,24,24,0,24,24,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,10,11,11,11,11,11,11,11,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,10,8,10,8,8,16,10,8,16,10,10,10,10,10,10,11,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,10,11,11,8,16,10,10,11,11,11,11,11,8,16,16,10,11,8,16,10,10,11,10,10,8,16,10,3,8,11,11,11,11,0,8,10,8,10,8,16,16,16,16,16,16,16,16,16,10,10,10,10,10,11,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,8,16,16,10,10,8,16,16,10,10,8,16,16,10,10,8,16,16,10,10,8,16,16,10,10,11,10,8,16,16,10,11,10,8,16,16,10,11,10,3,8,11,11,11,11,0,3,6,4,13,13,13,13,5,5,0,3,12,12,5,5,5,3,12,3,12,3,12,8,11,11,11,3,12,12,4,13,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["tuple","Deserialize_tuple","Serialize_tuple","repr","Deserialize_repr","Serialize_repr","de","value","Error","UnitDeserializer","BoolDeserializer","I8Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","IsizeDeserializer","U8Deserializer","U16Deserializer","U64Deserializer","UsizeDeserializer","F32Deserializer","F64Deserializer","CharDeserializer","I128Deserializer","U128Deserializer","U32Deserializer","StrDeserializer","BorrowedStrDeserializer","StringDeserializer","CowStrDeserializer","BytesDeserializer","BorrowedBytesDeserializer","SeqDeserializer","SeqAccessDeserializer","MapDeserializer","MapAccessDeserializer","Error","custom","invalid_type","invalid_value","invalid_length","unknown_variant","unknown_field","missing_field","duplicate_field","Unexpected","Bool","Unsigned","Signed","Float","Char","Str","Bytes","Unit","Option","NewtypeStruct","Seq","Map","Enum","UnitVariant","NewtypeVariant","TupleVariant","StructVariant","Other","Expected","fmt","Deserialize","deserialize","DeserializeOwned","DeserializeSeed","Value","deserialize","Deserializer","Error","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","is_human_readable","Visitor","Value","expecting","visit_bool","visit_i8","visit_i16","visit_i32","visit_i64","visit_i128","visit_u8","visit_u16","visit_u32","visit_u64","visit_u128","visit_f32","visit_f64","visit_char","visit_str","visit_borrowed_str","visit_string","visit_bytes","visit_borrowed_bytes","visit_byte_buf","visit_none","visit_some","visit_unit","visit_newtype_struct","visit_seq","visit_map","visit_enum","SeqAccess","Error","next_element_seed","next_element","size_hint","MapAccess","Error","next_key_seed","next_value_seed","next_entry_seed","next_key","next_value","next_entry","size_hint","EnumAccess","Error","Variant","variant_seed","variant","VariantAccess","Error","unit_variant","newtype_variant_seed","newtype_variant","tuple_variant","struct_variant","IntoDeserializer","Deserializer","into_deserializer","IgnoredAny","StdError","source","backtrace","description","cause","ser","Error","custom","Serialize","serialize","Serializer","Ok","Error","SerializeSeq","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","SerializeMap","SerializeStruct","SerializeStructVariant","serialize_bool","serialize_i8","serialize_i16","serialize_i32","serialize_i64","serialize_i128","serialize_u8","serialize_u16","serialize_u32","serialize_u64","serialize_u128","serialize_f32","serialize_f64","serialize_char","serialize_str","serialize_bytes","serialize_none","serialize_some","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_newtype_struct","serialize_newtype_variant","serialize_seq","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_map","serialize_struct","serialize_struct_variant","collect_seq","collect_map","collect_str","is_human_readable","SerializeSeq","Ok","Error","serialize_element","end","SerializeTuple","Ok","Error","serialize_element","end","SerializeTupleStruct","Ok","Error","serialize_field","end","SerializeTupleVariant","Ok","Error","serialize_field","end","SerializeMap","Ok","Error","serialize_key","serialize_value","serialize_entry","end","SerializeStruct","Ok","Error","serialize_field","skip_field","end","SerializeStructVariant","Ok","Error","serialize_field","skip_field","end","Impossible","StdError","source","backtrace","description","cause","error","Error","Result","Category","Io","Syntax","Data","Eof","from_reader","from_slice","tags","Tagged","tag","value","current_cbor_tag","to_vec","to_writer","BytesSer","0","BytesDe","0","Byte32De","0","Cbor","marshal_cbor","unmarshal_cbor","cid","Error","description","protocol","CodecProtocol","Cbor","blake2b_variable","blake2b_256","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","fmt","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","custom","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_enum","deserialize_any","deserialize_seq","deserialize_tuple","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_option","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","serialize_field","end","fmt","fmt","fmt","custom","description","expecting","visit_bool","visit_i64","visit_i128","visit_u64","visit_u128","visit_f64","visit_str","visit_none","visit_some","visit_newtype_struct","visit_unit","visit_seq","visit_map","visit_bytes","visit_enum","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","serialize_field","end","serialize_key","serialize_value","end","serialize_field","end","serialize_field","end","eq","ne","eq","ne","next_key_seed","next_value_seed","next_entry_seed","size_hint","serialize_element","end","serialize_element","end","next_element_seed","size_hint","next_element_seed","size_hint","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","deserialize","default","fmt","source","custom","invalid_type","fmt","fmt","serialize","from","deserialize","eq","clone","custom","from","from","clone","eq","ne","eq","ne","eq","fmt","fmt","fmt","fmt","fmt","serialize","serialize","serialize","deserialize","deserialize","marshal_cbor","unmarshal_cbor","cid","new","new","new","new","end","new","new","end","new","is","downcast_ref","downcast_mut","is","downcast_ref","downcast_mut","is","downcast_ref","downcast_mut","downcast","chain","downcast","downcast","offset","classify","is_io","is_syntax","is_data","is_eof","is_scratch_too_small","new"],"q":["forest_encoding","forest_encoding::tuple","","forest_encoding","forest_encoding::repr","","forest_encoding","forest_encoding::de","forest_encoding::de::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_encoding::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_encoding","forest_encoding::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_encoding","forest_encoding::error","","","","","","","forest_encoding","","","forest_encoding::tags","","","","forest_encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_encoding::de::valueforest_encoding::de","","","","","","","","","","","","","","","","","","","","forest_encoding::ser","","","","","","","forest_encoding::error","","","","","","","","","","","","","","","","","forest_encoding::tags","","","","","","","forest_encoding::de::valueforest_encoding::ser","","forest_encoding::de","forest_encoding::de::value","forest_encoding::de","forest_encoding::de::value","","forest_encoding::de","","","","","","","","","","","","","","","","forest_encoding::de::value","","","","","","","","","","","","","","","","","","","","","forest_encoding::de","forest_encoding::de::value","","","","","","","forest_encoding::de","forest_encoding::ser","","","","","","","","","forest_encoding::de","","forest_encoding::de::value","","","","","","forest_encoding::ser","","","","forest_encoding::de::value","","","","","","","","","","","","","","","forest_encoding::de","forest_encoding::de::value","","forest_encoding::de","forest_encoding::de::value","","","","","","","","","","","","","","","forest_encoding::de","","forest_encoding::error","","","","","","forest_encoding::tags","forest_encoding::error","forest_encoding::tags","forest_encoding::error","","","forest_encoding","","","","","","","","","","","","","","","","","","","","","forest_encoding::de::value","","","","","","","","","forest_encoding::ser","","","","","","","","","","","","","forest_encoding::error","","","","","","","forest_encoding::tags"],"d":["","","","","","","Generic data structure deserialization framework.","Building blocks for deserializing basic values using the …","A minimal representation of all possible errors that can …","A deserializer holding a <code>()</code>.","A deserializer holding a <code>bool</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>usize</code>.","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding a <code>char</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>&str</code>.","A deserializer holding a <code>&str</code> with a lifetime tied to …","A deserializer holding a <code>String</code>.","A deserializer holding a <code>Cow<str></code>.","A deserializer holding a <code>&[u8]</code>. Always calls […","A deserializer holding a <code>&[u8]</code> with a lifetime tied to …","A deserializer that iterates over a sequence.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>MapAccess</code>.","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","Raised when there is general error when deserializing a …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> enum type received a variant …","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> struct type expected to receive …","Raised when a <code>Deserialize</code> struct type received more than …","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a boolean value that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","The input contained a <code>char</code> that was not expected.","The input contained a <code>&str</code> or <code>String</code> that was not …","The input contained a <code>&[u8]</code> or <code>Vec<u8></code> that was not …","The input contained a unit <code>()</code> that was not expected.","The input contained an <code>Option<T></code> that was not expected.","The input contained a newtype struct that was not …","The input contained a sequence that was not expected.","The input contained a map that was not expected.","The input contained an enum that was not expected.","The input contained a unit variant that was not expected.","The input contained a newtype variant that was not …","The input contained a tuple variant that was not expected.","The input contained a struct variant that was not …","A message stating what uncategorized thing the input …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","Format an explanation of what data was being expected. …","A <strong>data structure</strong> that can be deserialized from any data …","Deserialize this value from the given Serde deserializer.","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","The type produced by using this seed.","Equivalent to the more common <code>Deserialize::deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Determine whether <code>Deserialize</code> implementations should …","This trait represents a visitor that walks through a …","The value produced by this visitor.","Format a message stating what data this Visitor expects …","The input contains a boolean.","The input contains an <code>i8</code>.","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","The input contains a <code>i128</code>.","The input contains a <code>u8</code>.","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","The input contains a <code>u128</code>.","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","The input contains a <code>char</code>.","The input contains a string. The lifetime of the string …","The input contains a string that lives at least as long …","The input contains a string and ownership of the string …","The input contains a byte array. The lifetime of the byte …","The input contains a byte array that lives at least as …","The input contains a byte array and ownership of the byte …","The input contains an optional that is absent.","The input contains an optional that is present.","The input contains a unit <code>()</code>.","The input contains a newtype struct.","The input contains a sequence of elements.","The input contains a key-value map.","The input contains an enum.","Provides a <code>Visitor</code> access to each element of a sequence …","The error type that can be returned if some error occurs …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","Returns the number of elements remaining in the sequence, …","Provides a <code>Visitor</code> access to each entry of a map in the …","The error type that can be returned if some error occurs …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns <code>Ok(Some((key, value)))</code> for the next …","Returns the number of entries remaining in the map, if …","Provides a <code>Visitor</code> access to the data of an enum in the …","The error type that can be returned if some error occurs …","The <code>Visitor</code> that will be used to deserialize the content …","<code>variant</code> is called to identify which variant to …","<code>variant</code> is called to identify which variant to …","<code>VariantAccess</code> is a visitor that is created by the …","The error type that can be returned if some error occurs …","Called when deserializing a variant with no values.","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","Called when deserializing a tuple-like variant.","Called when deserializing a struct-like variant.","Converts an existing value into a <code>Deserializer</code> from which …","The type of the deserializer being converted into.","Convert this value into a deserializer.","An efficient way of discarding data from a deserializer.","<code>Error</code> is a trait representing the basic expectations for …","The lower-level source of this error, if any.","Returns a stack backtrace, if available, of where this …","","","Generic data structure serialization framework.","Trait used by <code>Serialize</code> implementations to generically …","Used when a <code>Serialize</code> implementation encounters any error …","A <strong>data structure</strong> that can be serialized into any data …","Serialize this value into the given Serde serializer.","A <strong>data format</strong> that can serialize any data structure …","The output type produced by this <code>Serializer</code> during …","The error type when some error occurs during …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Serialize a <code>bool</code> value.","Serialize an <code>i8</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i128</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u128</code> value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a character.","Serialize a <code>&str</code>.","Serialize a chunk of raw byte data.","Serialize a <code>None</code> value.","Serialize a <code>Some(T)</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Begin to serialize a variably sized sequence. This call …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Begin to serialize a map. This call must be followed by …","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Collect an iterator as a sequence.","Collect an iterator as a map.","Serialize a string produced by an implementation of …","Determine whether <code>Serialize</code> implementations should …","Returned from <code>Serializer::serialize_seq</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a sequence element.","Finish serializing a sequence.","Returned from <code>Serializer::serialize_tuple</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a tuple element.","Finish serializing a tuple.","Returned from <code>Serializer::serialize_tuple_struct</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a tuple struct field.","Finish serializing a tuple struct.","Returned from <code>Serializer::serialize_tuple_variant</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a tuple variant field.","Finish serializing a tuple variant.","Returned from <code>Serializer::serialize_map</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a map key.","Serialize a map value.","Serialize a map entry consisting of a key and a value.","Finish serializing a map.","Returned from <code>Serializer::serialize_struct</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a struct field.","Indicate that a struct field has been skipped.","Finish serializing a struct.","Returned from <code>Serializer::serialize_struct_variant</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a struct variant field.","Indicate that a struct variant field has been skipped.","Finish serializing a struct variant.","Helper type for implementing a <code>Serializer</code> that does not …","<code>Error</code> is a trait representing the basic expectations for …","The lower-level source of this error, if any.","Returns a stack backtrace, if available, of where this …","","","When serializing or deserializing CBOR goes wrong.","This type represents all possible errors that can occur …","Alias for a <code>Result</code> with the error type <code>serde_cbor::Error</code>.","Categorizes the cause of a <code>serde_cbor::Error</code>.","The error was caused by a failure to read or write bytes …","The error was caused by input that was not syntactically …","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","Decodes a value from CBOR data in a reader.","Decodes a value from CBOR data in a slice.","Support for cbor tags","A value that is optionally tagged with a cbor tag","cbor tag","value","function to get the current cbor tag","Serializes a value to a vector.","Serializes a value to a writer.","Wrapper for serializing slice of bytes.","","Wrapper for deserializing dynamic sized Bytes.","","Wrapper for deserializing array of 32 Bytes.","","Cbor utility functions for serializable objects","Marshalls cbor encodable object into cbor bytes","Unmarshals cbor encoded bytes to object","Returns the content identifier of the raw block of data …","Error type for encoding and decoding data through any …","","","CodecProtocol defines the protocol in which the data is …","","Generates blake2b hash with provided size.","Generates blake2b hash of fixed 32 bytes sizearshalls cbor encodable object into cbor bytes","Unmarshals cbor encoded bytes to object","Returns the content identifier of the raw block of data …","Create a new borrowed deserializer from the given string.","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given …","Construct a new <code>SeqDeserializer<I, E></code>.","Check for remaining elements after passing a …","Construct a new <code>SeqAccessDeserializer<A></code>.","Construct a new <code>MapDeserializer<I, E></code>.","Check for remaining elements after passing a …","Construct a new <code>MapAccessDeserializer<A></code>.","Returns <code>true</code> if the boxed type is the same as <code>T</code>","Returns some reference to the boxed value if it is of …","Returns some mutable reference to the boxed value if it …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Attempts to downcast the box to a concrete type.","Returns an iterator starting with the current error and …","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","The byte offset at which the error occurred.","Categorizes the cause of this error.","Returns true if this error was caused by a failure to …","Returns true if this error was caused by input that was …","Returns true if this error was caused by data that was …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by the scratch …","Create a new tagged value"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,0,4,0,0,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,0,9,9,9,9,9,9,9,9,0,10,10,10,10,0,11,11,11,11,11,11,0,12,12,0,0,13,13,13,13,0,0,14,0,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,0,18,18,18,18,0,19,19,19,19,0,20,20,20,20,0,21,21,21,21,21,21,0,22,22,22,22,22,0,23,23,23,23,23,0,0,13,13,13,13,0,0,0,0,24,24,24,24,0,0,0,0,25,25,0,0,0,0,26,0,27,0,28,0,29,29,29,0,30,30,0,31,0,0,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,2,2,2,2,2,2,2,2,2,2,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,32,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,52,53,49,51,59,50,61,61,2,32,3,32,32,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,56,50,37,51,53,58,42,39,41,33,46,40,43,57,36,49,32,47,45,35,38,2,55,34,48,54,59,52,44,60,61,61,61,61,61,61,61,61,61,2,2,32,32,58,58,58,58,61,61,61,61,56,56,58,58,39,55,46,59,54,58,45,56,53,52,38,60,42,33,2,40,57,47,48,50,34,43,35,37,41,36,49,44,32,51,60,60,62,62,62,62,62,24,25,62,25,24,24,62,30,30,27,27,27,30,30,31,27,30,31,30,31,26,27,28,27,28,29,29,29,51,54,55,56,56,57,58,58,59,13,13,13,13,13,13,13,13,13,13,13,13,13,62,62,62,62,62,62,62,25],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["unexpected",4],["expected",8]]],[[["unexpected",4],["expected",8]]],[[["usize",15],["expected",8]]],[[["str",15]]],[[["str",15]]],[[["str",15]]],[[["str",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],[["result",4],["error",3]]],null,[[],["result",4]],null,null,null,[[],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,null,[[["formatter",3]],[["result",4],["error",3]]],[[["bool",15]],["result",4]],[[["i8",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i128",15]],["result",4]],[[["u8",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u128",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["char",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["string",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec",3],["global",3],["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],[["option",4],["result",4]]],[[],[["result",4],["option",4]]],[[],[["option",4],["usize",15]]],null,null,[[],[["option",4],["result",4]]],[[],["result",4]],[[],[["option",4],["result",4]]],[[],[["option",4],["result",4]]],[[],["result",4]],[[],[["result",4],["option",4]]],[[],[["option",4],["usize",15]]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["result",4]],null,null,[[]],null,null,[[],[["error",8],["option",4]]],[[],[["option",4],["backtrace",3]]],[[],["str",15]],[[],[["error",8],["option",4]]],null,null,[[]],null,[[],["result",4]],null,null,null,null,null,null,null,null,null,null,[[["bool",15]],["result",4]],[[["i8",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i128",15]],["result",4]],[[["u8",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u128",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["char",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["option",4],["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["u32",15],["str",15],["usize",15]],["result",4]],[[["option",4],["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["u32",15],["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],null,null,null,[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],null,null,[[],[["error",8],["option",4]]],[[],[["option",4],["backtrace",3]]],[[],["str",15]],[[],[["error",8],["option",4]]],null,null,null,null,null,null,null,null,[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],null,null,null,null,[[],[["option",4],["u64",15]]],[[],[["vec",3],["error",3],["result",4]]],[[],[["result",4],["error",3]]],null,null,null,null,null,null,null,[[],[["vec",3],["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4],["cid",3]]],null,null,null,null,null,[[["usize",15]],[["vec",3],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["error",3]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["error",3]],[[],["str",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["bool",15]],["result",4]],[[["i64",15]],["result",4]],[[["i128",15]],["result",4]],[[["u64",15]],["result",4]],[[["u128",15]],["result",4]],[[["f64",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["unexpected",4]],["bool",15]],[[["unexpected",4]],["bool",15]],[[["error",3]],["bool",15]],[[["error",3]],["bool",15]],[[],[["option",4],["result",4]]],[[],["result",4]],[[],[["option",4],["result",4]]],[[],[["option",4],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["option",4]]],[[],[["option",4],["usize",15]]],[[],[["result",4],["option",4]]],[[],[["option",4],["usize",15]]],[[],["isizedeserializer",3]],[[],["borrowedbytesdeserializer",3]],[[],["chardeserializer",3]],[[],["mapaccessdeserializer",3]],[[],["bytesdeserializer",3]],[[],["mapdeserializer",3]],[[],["f64deserializer",3]],[[],["seqdeserializer",3]],[[],["cowstrdeserializer",3]],[[],["stringdeserializer",3]],[[],["i64deserializer",3]],[[],["ignoredany",3]],[[],["u64deserializer",3]],[[],["unitdeserializer",3]],[[],["unexpected",4]],[[],["u8deserializer",3]],[[],["seqaccessdeserializer",3]],[[],["i128deserializer",3]],[[],["u128deserializer",3]],[[],["strdeserializer",3]],[[],["booldeserializer",3]],[[],["usizedeserializer",3]],[[],["i8deserializer",3]],[[],["i32deserializer",3]],[[],["u16deserializer",3]],[[],["i16deserializer",3]],[[],["u32deserializer",3]],[[],["f32deserializer",3]],[[],["error",3]],[[],["borrowedstrdeserializer",3]],[[],[["ignoredany",3],["result",4]]],[[],["ignoredany",3]],[[["formatter",3]],[["result",4],["error",3]]],[[],[["error",8],["option",4]]],[[],["error",3]],[[["unexpected",4],["expected",8]],["error",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["result",4]],[[["error",3]],["error",3]],[[],[["result",4],["tagged",3]]],[[["category",4]],["bool",15]],[[],["category",4]],[[],["error",3]],[[["cborerror",3]],["error",3]],[[["ciderror",4]]],[[],["bytesde",3]],[[["bytesde",3]],["bool",15]],[[["bytesde",3]],["bool",15]],[[["error",3]],["bool",15]],[[["error",3]],["bool",15]],[[["codecprotocol",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["vec",3],["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4],["cid",3]]],[[["str",15]],["borrowedstrdeserializer",3]],[[],["bytesdeserializer",3]],[[],["borrowedbytesdeserializer",3]],[[],["seqdeserializer",3]],[[],["result",4]],[[],["seqaccessdeserializer",3]],[[],["mapdeserializer",3]],[[],["result",4]],[[],["mapaccessdeserializer",3]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[["box",3],["error",8],["global",3]],[["box",3],["box",3],["result",4]]],[[],["chain",3]],[[["box",3],["error",8],["global",3]],[["result",4],["box",3],["box",3]]],[[["error",8],["global",3],["box",3]],[["box",3],["box",3],["result",4]]],[[],["u64",15]],[[],["category",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["option",4],["u64",15]],["tagged",3]]],"p":[[8,"Error"],[4,"Unexpected"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"StdError"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Category"],[3,"Tagged"],[3,"BytesSer"],[3,"BytesDe"],[3,"Byte32De"],[8,"Cbor"],[3,"Error"],[4,"CodecProtocol"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[3,"Impossible"],[3,"Error"]]},\
"forest_hash_utils":{"doc":"","t":[3,12,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BytesKey","0","Hash","hash","hash_slice","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","hash","from","from","from","clone","eq","ne","partial_cmp","deref","fmt","borrow","borrow","serialize","deserialize"],"q":["forest_hash_utils","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Key type to be used to serialize as byte string instead …","","Custom trait to avoid issues like …","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["vec",3],["u8",15]]],[[]],[[["str",15]]],[[],["byteskey",3]],[[["byteskey",3]],["bool",15]],[[["byteskey",3]],["bool",15]],[[["byteskey",3]],[["ordering",4],["option",4]]],[[]],[[["formatter",3]],["result",6]],[[]],[[],["vec",3]],[[],["result",4]],[[],["result",4]]],"p":[[3,"BytesKey"],[8,"Hash"]]},\
"forest_ipld":{"doc":"","t":[0,4,13,13,8,10,3,3,12,12,4,13,13,12,13,12,13,12,12,13,12,12,12,13,12,12,12,12,13,13,4,13,13,4,13,13,13,13,13,13,13,13,11,11,11,0,5,0,3,12,3,12,5,5,4,13,13,13,13,3,4,13,13,4,13,13,13,13,13,13,13,13,13,5,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["selector","VisitReason","SelectionMatch","SelectionCandidate","LinkResolver","load_link","Progress","LastBlockInfo","path","link","Selector","Matcher","ExploreAll","next","ExploreFields","fields","ExploreIndex","index","next","ExploreRange","start","end","next","ExploreRecursive","sequence","limit","stop_at","current","ExploreUnion","ExploreRecursiveEdge","RecursionLimit","None","Depth","Condition","HasField","HasValue","HasKind","IsLink","GreaterThan","LessThan","And","Or","interests","explore","decide","util","recurse_links","json","IpldJson","0","IpldJsonRef","0","serialize","deserialize","Error","Encoding","Other","Link","Custom","Path","PathSegment","String","Int","Ipld","Null","Bool","Integer","Float","String","Bytes","List","Map","Link","to_ipld","from_ipld","ipld","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","default","default","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","sub_assign","custom","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","new","extend","segments","push","pop","to_index","walk_all","walk_matching","path","last_block"],"q":["forest_ipld","forest_ipld::selector","","","","","","","","","","","","forest_ipld::selector::Selector","forest_ipld::selector","forest_ipld::selector::Selector","forest_ipld::selector","forest_ipld::selector::Selector","","forest_ipld::selector","forest_ipld::selector::Selector","","","forest_ipld::selector","forest_ipld::selector::Selector","","","","forest_ipld::selector","","","","","","","","","","","","","","","","","forest_ipld","forest_ipld::util","forest_ipld","forest_ipld::json","","","","","","forest_ipld","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_ipld::selector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_ipld::json","","","","","","","","","","","","","","forest_ipld","","","","","","","","","","","","","","","","forest_ipld::selector","","","","","forest_ipld","","forest_ipld::selector","forest_ipld","","","","","","forest_ipld::selector","","","","","","","","forest_ipld","","","","","forest_ipld::selector","","","","","","forest_ipld","","","","forest_ipld::selector","forest_ipld","forest_ipld::selector","","","forest_ipld","forest_ipld::json","","forest_ipld","","forest_ipld::selector","","","forest_ipld::json","forest_ipld","","","","","","forest_ipld::selector","","",""],"d":["","Provides reason for callback in traversal for <code>walk_all</code>.","Ipld node visited was a specific match.","Ipld node was visited while searching for matches.","","Resolves a Cid link into it’s respective Ipld node, if …","Contains progress of traversal and last block information …","Contains information about the last block that was …","","","Selectors are expressions that identify and select a …","Matcher marks a node to be included in the “result” …","ExploreAll is similar to a <code>*</code> – it traverses all …","","ExploreFields traverses named fields in a map (or …","","ExploreIndex traverses a specific index in a list, and …","","","ExploreRange traverses a list, and for each element in …","","","","ExploreRecursive traverses some structure recursively. To …","","","if a node matches, we won’t match it nor explore its …","Used to index current","ExploreUnion allows selection to continue with two or …","ExploreRecursiveEdge is a special sentinel value which is …","","","","Condition is expresses a predicate with a boolean result.","","","","","","","","","Returns a vector of all sectors of interest, <code>None</code> variant …","Processes and returns resultant selector node","Returns true if matcher, false otherwise","","","","Wrapper for serializing and deserializing a Ipld from …","","Wrapper for serializing a ipld reference to JSON.","","","","Ipld error","","","","","Describes a series of steps across a tree or DAG of Ipld, …","Represents either a key in a map or an index in a list.","Key in a map","Index in a list","Represents IPLD data structure used when serializing and …","Represents a null value.","Represents a boolean value.","Represents a signed integer value.","Represents a floating point value.","Represents a String.","Represents Bytes.","Represents List of IPLD objects.","Represents a map of strings to Ipld objects.","Represents a link to another piece of data through a …","Convert any object into an IPLD object","Convert a <code>Ipld</code> structure into a type <code>T</code> Currently converts …","Construct a <code>forest_ipld::Ipld</code> roughly matching JSON …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extend <code>Path</code> with another <code>Path</code> by cloning and appending …","Returns slice of <code>PathSegment</code>s of the <code>Path</code>.","Pushes a <code>PathSegment</code> to the end of the <code>Path</code>.","Pops a <code>PathSegment</code> from the end of the path.","Return index or conversion from string to index. If path …","Walks all nodes visited (not just matched nodes) and …","Walks a graph of Ipld nodes, executing the callback only …","Returns the path of the current progress","Returns the last block information from a link traversal."],"i":[0,0,1,1,0,2,0,0,3,3,0,4,4,5,4,6,4,7,7,4,8,8,8,4,9,9,9,9,4,4,0,10,10,0,11,11,11,11,11,11,11,11,4,4,4,0,0,0,0,12,0,13,0,0,0,14,14,14,14,0,0,15,15,0,16,16,16,16,16,16,16,16,16,0,0,0,14,14,14,14,14,14,14,14,17,17,17,17,17,17,17,17,17,17,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,18,18,18,18,18,18,18,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,16,16,16,16,16,16,16,16,16,14,17,15,15,15,17,15,1,3,4,10,11,16,17,18,14,14,17,17,15,15,1,3,3,4,4,10,10,11,16,16,14,17,15,1,18,3,4,10,11,16,14,17,15,10,14,4,10,11,16,12,13,16,15,4,10,11,12,17,17,17,17,17,15,4,4,18,18],"f":[null,null,null,null,null,[[["cid",3]],[["pin",3],["box",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["option",4],["vec",3]]],[[["ipld",4],["pathsegment",4]],[["option",4],["selector",4]]],[[],["bool",15]],null,[[["hashset",3],["cid",3]],[["result",4],["box",3]]],null,null,null,null,null,[[["ipld",4]],["result",4]],[[],[["result",4],["ipld",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["result",4],["error",4],["ipld",4]]],[[["ipld",4]],[["string",3],["result",4]]],null,[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["cborerror",3]],["error",4]],[[["str",15]]],[[["usize",15]]],[[["string",3]]],[[["str",15]]],[[],["path",3]],[[],["pathsegment",4]],[[],["visitreason",4]],[[],["lastblockinfo",3]],[[],["selector",4]],[[],["recursionlimit",4]],[[],["condition",4]],[[],["ipld",4]],[[],["path",3]],[[],["progress",3]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["path",3]],["bool",15]],[[["path",3]],["bool",15]],[[["pathsegment",4]],["bool",15]],[[["pathsegment",4]],["bool",15]],[[["visitreason",4]],["bool",15]],[[["lastblockinfo",3]],["bool",15]],[[["lastblockinfo",3]],["bool",15]],[[["selector",4]],["bool",15]],[[["selector",4]],["bool",15]],[[["recursionlimit",4]],["bool",15]],[[["recursionlimit",4]],["bool",15]],[[["condition",4]],["bool",15]],[[["ipld",4]],["bool",15]],[[["ipld",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["u64",15]]],[[["display",8]],["error",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec",3],["pathsegment",4]]],[[["path",3]]],[[]],[[["pathsegment",4]]],[[],[["pathsegment",4],["option",4]]],[[],[["usize",15],["option",4]]],[[["ipld",4],["option",4]]],[[["ipld",4],["option",4]]],[[],["path",3]],[[],[["option",4],["lastblockinfo",3]]]],"p":[[4,"VisitReason"],[8,"LinkResolver"],[3,"LastBlockInfo"],[4,"Selector"],[13,"ExploreAll"],[13,"ExploreFields"],[13,"ExploreIndex"],[13,"ExploreRange"],[13,"ExploreRecursive"],[4,"RecursionLimit"],[4,"Condition"],[3,"IpldJson"],[3,"IpldJsonRef"],[4,"Error"],[4,"PathSegment"],[4,"Ipld"],[3,"Path"],[3,"Progress"]]},\
"forest_json_utils":{"doc":"","t":[0,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["go_vec_visitor","serialize","deserialize","GoVecVisitor","new","from","into","borrow","borrow_mut","try_from","try_into","type_id","fmt","default","expecting","visit_seq","visit_none","visit_unit"],"q":["forest_json_utils","forest_json_utils::go_vec_visitor","","forest_json_utils","","","","","","","","","","","","","",""],"d":["","","","Helper visitor to match Go’s default behaviour of …","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["result",4]],[[],[["vec",3],["result",4]]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],[["result",4],["error",3]]],[[],["govecvisitor",3]],[[["formatter",3]],["result",6]],[[],[["result",4],["vec",3]]],[[],["result",4]],[[],["result",4]]],"p":[[3,"GoVecVisitor"]]},\
"forest_libp2p":{"doc":"","t":[0,17,17,3,12,12,12,4,13,13,13,13,13,13,13,3,12,12,12,3,12,12,12,12,3,12,12,5,17,3,6,0,3,12,12,12,12,3,12,12,17,3,6,0,3,4,13,13,13,13,3,12,12,12,12,12,6,3,17,17,4,13,12,12,13,12,12,13,12,12,13,13,13,12,4,13,13,4,13,12,12,13,12,12,12,13,12,12,12,13,12,12,13,12,4,13,3,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["chain_exchange","HEADERS","MESSAGES","ChainExchangeRequest","start","request_len","options","ChainExchangeResponseStatus","Success","PartialResponse","BlockNotFound","GoAway","InternalError","BadRequest","Other","ChainExchangeResponse","status","message","chain","CompactedMessages","bls_msgs","bls_msg_includes","secp_msgs","secp_msg_includes","TipsetBundle","blocks","messages","make_chain_exchange_response","CHAIN_XCHG_PROTOCOL_ID","ChainExchangeProtocolName","ChainExchangeCodec","hello","HelloRequest","heaviest_tip_set","heaviest_tipset_height","heaviest_tipset_weight","genesis_hash","HelloResponse","arrival","sent","HELLO_PROTOCOL_ID","HelloProtocolName","HelloCodec","rpc","CborRequestResponse","RequestResponseError","DialFailure","Timeout","ConnectionClosed","UnsupportedProtocols","Libp2pConfig","listening_multiaddr","bootstrap_peers","mdns","kademlia","target_peer_count","IdentTopic","Topic","PUBSUB_BLOCK_STR","PUBSUB_MSG_STR","NetworkEvent","PubsubMessage","source","message","HelloRequest","request","source","ChainExchangeRequest","request","channel","PeerConnected","PeerDisconnected","BitswapBlock","cid","PubsubMessage","Block","Message","NetworkMessage","PubsubMessage","topic","message","ChainExchangeRequest","peer_id","request","response_channel","HelloRequest","peer_id","request","response_channel","BitswapRequest","cid","response_channel","JSONRPCRequest","method","NetRPCMethods","NetAddrsListen","Libp2pService","build_transport","get_keypair","PeerId","Multiaddr","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","equivalent","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","get_hash","init","deref","deref_mut","drop","get_hash","equivalent","get_hash","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","protocol_name","encode_hex","encode_hex_upper","vzip","get_hash","as_byte_slice","as_slice_of","init","deref","deref_mut","drop","get_hash","equivalent","get_hash","from_iter","as_ref","deserialize","hash","from","from","from","from","eq","ne","cmp","from_str","fmt","clone","try_from","try_from","try_from","partial_cmp","fmt","serialize","hash","cmp","fmt","try_from","try_from","as_ref","from","fmt","eq","ne","from_str","clone","partial_cmp","fmt","eq","ne","cmp","fmt","clone","partial_cmp","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","try_from","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","protocol_name","protocol_name","read_request","read_response","write_request","write_response","include_blocks","include_messages","into_result","new","hash","new","run","network_sender","network_receiver","from_public_key","from_bytes","from_multihash","random","to_bytes","to_base58","is_public_key","empty","with_capacity","len","is_empty","to_vec","push","pop","with","iter","replace","ends_with"],"q":["forest_libp2p","forest_libp2p::chain_exchange","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_libp2p","forest_libp2p::hello","","","","","","","","","","","forest_libp2p","forest_libp2p::rpc","","","","","","forest_libp2p","","","","","","","","","","","","forest_libp2p::NetworkEvent","","forest_libp2p","forest_libp2p::NetworkEvent","","forest_libp2p","forest_libp2p::NetworkEvent","","forest_libp2p","","","forest_libp2p::NetworkEvent","forest_libp2p","","","","","forest_libp2p::NetworkMessage","","forest_libp2p","forest_libp2p::NetworkMessage","","","forest_libp2p","forest_libp2p::NetworkMessage","","","forest_libp2p","forest_libp2p::NetworkMessage","","forest_libp2p","forest_libp2p::NetworkMessage","forest_libp2p","","","","","","","forest_libp2p::chain_exchange","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_libp2p","","","","","","","","","","","","forest_libp2p::hello","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_libp2p::rpc","","","","","","","","","","","","","","","","","","","","","","","","","","forest_libp2p","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_libp2p::rpc","forest_libp2p::chain_exchange","","","","","","forest_libp2p::hello","","","forest_libp2p::rpc","forest_libp2p","forest_libp2p::chain_exchange","","forest_libp2p","forest_libp2p::hello","forest_libp2p::rpc","forest_libp2p::chain_exchange","","","","","","","","","","","forest_libp2p::hello","","","","","forest_libp2p::chain_exchange","","","","","","forest_libp2p","forest_libp2p::hello","","","forest_libp2p::rpc","forest_libp2p","","","","forest_libp2p::chain_exchange","","","","","","forest_libp2p::hello","","forest_libp2p::chain_exchange","","","","","forest_libp2p","forest_libp2p::hello","","forest_libp2p::chain_exchange","forest_libp2p::hello","forest_libp2p::rpc","","","","forest_libp2p::chain_exchange","","","forest_libp2p","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","ChainExchange Filecoin header set bit.","ChainExchange Filecoin messages set bit.","The payload that gets sent to another node to request for …","The tipset [Cid] to start the request from.","The amount of epochs to request.","1 = Block only, 2 = Messages only, 3 = Blocks and …","Status codes of a chain_exchange response.","All is well.","We could not fetch all blocks requested (but at least we …","Request.Start not found.","Requester is making too many requests.","Internal error occured.","Request was bad.","Other undefined response code.","The response to a ChainExchange request.","Status code of the response.","Status message indicating failure reason.","The tipsets requested.","Contains all bls and secp messages and their indexes per …","Unsigned bls messages.","Describes which block each message belongs to.","Signed secp messages.","Describes which block each message belongs to.","Contains the blocks and messages in a particular tipset","The blocks in the tipset.","Compressed messages format.","Builds chain exchange response out of chain data.","Libp2p protocol ID for ChainExchange.","Type to satisfy <code>ProtocolName</code> interface for ChainExchange …","ChainExchange protocol codec to be used within the RPC …","","Hello message …","","","","","Response to a Hello message. This just handles latency of …","Time of arrival to peer in unix nanoseconds.","Time sent from peer in unix nanoseconds.","Libp2p Hello protocol ID.","Type to satisfy <code>ProtocolName</code> interface for Hello RPC.","Hello protocol codec to be used within the RPC service.","","Generic Cbor RequestResponse type. This is just needed to …","libp2p request response outbound error type. This …","The request could not be sent because a dialing attempt …","The request timed out before a response was received.","The connection closed before a response was received.","The remote supports none of the requested protocols.","Libp2p config for the Forest node.","Local address.","Bootstrap peer list.","Mdns discovery enabled.","Kademlia discovery enabled.","Target peer count.","","A gossipsub topic.","Gossipsub Filecoin blocks topic identifier.","Gossipsub Filecoin messages topic identifier.","Events emitted by this Service.","","","","","","","","","","","","","","Message types that can come over GossipSub","Messages that come over the block topic","Messages that come over the message topic","Messages into the service to handle.","","","","","","","","","","","","","","","","","Network RPC API methods used to gather data from libp2p …","","The Libp2pService listens to events from the Libp2p swarm.","Builds the transport stack that LibP2P will communicate …","Fetch keypair from disk, returning none if it cannot be …","Identifier of a peer of the network.","Representation of a Multiaddronvert a Multiaddr to a string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If a request has the [HEADERS] bit set and requests …","If a request has the [MESSAGES] bit set and requests …","Converts chain_exchange response into result. Returns an …","","","","Starts the libp2p service networking stack. This Future …","Returns a sender which allows sending messages to the …","Returns a receiver to listen to network events emitted …","Builds a <code>PeerId</code> from a public key.","Parses a <code>PeerId</code> from bytes.","Tries to turn a <code>Multihash</code> into a <code>PeerId</code>.","Generates a random peer ID from a cryptographically …","Returns a raw bytes representation of this <code>PeerId</code>.","Returns a base-58 encoded string of this <code>PeerId</code>.","Checks whether the public key passed as parameter matches …","Create a new, empty multiaddress.","Create a new, empty multiaddress with the given capacity.","Return the length in bytes of this multiaddress.","Returns true if the length of this multiaddress is 0.","Return a copy of this [<code>Multiaddr</code>]’s byte representation.","Adds an already-parsed address component to the end of …","Pops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …","Like [<code>Multiaddr::push</code>] but consumes <code>self</code>.","Returns the components of this multiaddress.","Replace a [<code>Protocol</code>] at some position in this <code>Multiaddr</code>.","Checks whether the given <code>Multiaddr</code> is a suffix of this …"],"i":[0,0,0,0,1,1,1,0,2,2,2,2,2,2,2,0,3,3,3,0,4,4,4,4,0,5,5,0,0,0,0,0,0,6,6,6,6,0,7,7,0,0,0,0,0,0,8,8,8,8,0,9,9,9,9,9,0,0,0,0,0,10,11,11,10,12,12,10,13,13,10,10,10,14,0,15,15,0,16,17,17,16,18,18,18,16,19,19,19,16,20,20,16,21,0,22,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,23,23,23,23,23,23,23,23,23,23,23,23,23,23,9,9,9,9,9,9,9,9,9,9,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,8,8,8,8,8,8,8,8,8,8,8,8,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,10,10,10,10,10,10,10,10,10,10,10,10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,22,22,22,22,22,22,22,22,22,22,22,22,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,28,28,28,28,28,28,28,28,28,28,28,28,28,26,26,26,26,26,26,26,8,1,2,3,4,5,23,6,7,24,25,15,5,23,9,24,25,1,1,2,2,3,3,4,4,5,5,23,6,6,7,7,24,1,2,3,4,5,23,9,6,7,24,8,10,15,16,22,4,1,2,3,4,5,6,7,1,2,3,4,5,9,6,7,23,24,25,25,25,25,1,1,3,26,26,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["chainstore",3],["chainexchangerequest",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["keypair",4]],["boxed",3]],[[["str",15]],[["keypair",4],["option",4]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["u64",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["u64",15]],[[],["bool",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[]],[[],[["result",4],["error",4]]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["u64",15]],[[],["bool",15]],[[],["u64",15]],[[],["multiaddr",3]],[[]],[[],[["result",4],["multiaddr",3]]],[[]],[[["ipv4addr",3]],["multiaddr",3]],[[["ipv6addr",3]],["multiaddr",3]],[[["ipaddr",4]],["multiaddr",3]],[[["protocol",4]],["multiaddr",3]],[[["multiaddr",3]],["bool",15]],[[["multiaddr",3]],["bool",15]],[[["multiaddr",3]],["ordering",4]],[[["str",15]],[["multiaddr",3],["result",4],["error",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["multiaddr",3]],[[["str",15]],[["multiaddr",3],["result",4],["error",4]]],[[["string",3]],[["multiaddr",3],["result",4],["error",4]]],[[["vec",3],["global",3],["u8",15]],[["multiaddr",3],["result",4],["error",4]]],[[["multiaddr",3]],[["ordering",4],["option",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["result",4]],[[]],[[["peerid",3]],["ordering",4]],[[["formatter",3]],[["result",4],["error",3]]],[[["multihash",3],["uint",3]],[["peerid",3],["result",4]]],[[["vec",3],["global",3],["u8",15]],[["result",4],["peerid",3]]],[[],["multihash",3]],[[["publickey",4]],["peerid",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["peerid",3]],["bool",15]],[[["peerid",3]],["bool",15]],[[["str",15]],[["result",4],["peerid",3]]],[[],["peerid",3]],[[["peerid",3]],[["ordering",4],["option",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["topic",3]],["bool",15]],[[["topic",3]],["bool",15]],[[["topic",3]],["ordering",4]],[[["formatter",3]],[["result",4],["error",3]]],[[],["topic",3]],[[["topic",3]],[["ordering",4],["option",4]]],[[["outboundfailure",4]]],[[],["chainexchangerequest",3]],[[],["chainexchangeresponsestatus",4]],[[],["chainexchangeresponse",3]],[[],["compactedmessages",3]],[[],["tipsetbundle",3]],[[],["chainexchangeprotocolname",3]],[[],["hellorequest",3]],[[],["helloresponse",3]],[[],["helloprotocolname",3]],[[],["cborrequestresponse",3]],[[],["pubsubmessage",4]],[[],["tipsetbundle",3]],[[],["chainexchangeprotocolname",3]],[[]],[[],["helloprotocolname",3]],[[]],[[["chainexchangerequest",3]],["bool",15]],[[["chainexchangerequest",3]],["bool",15]],[[["chainexchangeresponsestatus",4]],["bool",15]],[[["chainexchangeresponsestatus",4]],["bool",15]],[[["chainexchangeresponse",3]],["bool",15]],[[["chainexchangeresponse",3]],["bool",15]],[[["compactedmessages",3]],["bool",15]],[[["compactedmessages",3]],["bool",15]],[[["tipsetbundle",3]],["bool",15]],[[["tipsetbundle",3]],["bool",15]],[[["chainexchangeprotocolname",3]],["bool",15]],[[["hellorequest",3]],["bool",15]],[[["hellorequest",3]],["bool",15]],[[["helloresponse",3]],["bool",15]],[[["helloresponse",3]],["bool",15]],[[["helloprotocolname",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["tipsetbundle",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],[["pin",3],["box",3]]],[[],[["box",3],["pin",3]]],[[],[["pin",3],["box",3]]],[[],[["pin",3],["box",3]]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4],["vec",3],["string",3]]],[[],["topic",3]],[[],["topichash",3]],[[["arc",3],["keypair",4],["chainstore",3],["libp2pconfig",3],["str",15]]],[[]],[[],[["sender",3],["networkmessage",4]]],[[],[["receiver",3],["networkevent",4]]],[[["publickey",4]],["peerid",3]],[[],[["error",4],["result",4],["peerid",3]]],[[["multihash",3],["uint",3]],[["result",4],["peerid",3],["multihash",3]]],[[],["peerid",3]],[[],[["vec",3],["global",3],["u8",15]]],[[],["string",3]],[[["publickey",4]],[["bool",15],["option",4]]],[[],["multiaddr",3]],[[["usize",15]],["multiaddr",3]],[[],["usize",15]],[[],["bool",15]],[[],[["vec",3],["global",3],["u8",15]]],[[["protocol",4]]],[[],[["protocol",4],["option",4]]],[[["protocol",4]],["multiaddr",3]],[[],["iter",3]],[[["usize",15]],[["multiaddr",3],["option",4]]],[[["multiaddr",3]],["bool",15]]],"p":[[3,"ChainExchangeRequest"],[4,"ChainExchangeResponseStatus"],[3,"ChainExchangeResponse"],[3,"CompactedMessages"],[3,"TipsetBundle"],[3,"HelloRequest"],[3,"HelloResponse"],[4,"RequestResponseError"],[3,"Libp2pConfig"],[4,"NetworkEvent"],[13,"PubsubMessage"],[13,"HelloRequest"],[13,"ChainExchangeRequest"],[13,"BitswapBlock"],[4,"PubsubMessage"],[4,"NetworkMessage"],[13,"PubsubMessage"],[13,"ChainExchangeRequest"],[13,"HelloRequest"],[13,"BitswapRequest"],[13,"JSONRPCRequest"],[4,"NetRPCMethods"],[3,"ChainExchangeProtocolName"],[3,"HelloProtocolName"],[3,"CborRequestResponse"],[3,"Topic"],[3,"Libp2pService"],[3,"PeerId"],[3,"Multiaddr"]]},\
"forest_message":{"doc":"","t":[0,4,13,13,11,0,0,0,5,5,0,5,5,3,12,3,12,5,5,3,12,12,12,0,0,0,5,5,3,12,3,12,5,5,3,12,12,11,11,11,11,11,11,11,11,0,0,0,5,5,3,12,3,12,5,5,3,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["chain_message","ChainMessage","Unsigned","Signed","message","message_receipt","json","vec","serialize","deserialize","opt","serialize","deserialize","MessageReceiptJson","0","MessageReceiptJsonRef","0","serialize","deserialize","MessageReceipt","exit_code","return_data","gas_used","signed_message","json","vec","serialize","deserialize","SignedMessageJson","0","SignedMessageJsonRef","0","serialize","deserialize","SignedMessage","message","signature","new","new_from_parts","message","signature","into_message","is_bls","is_secp256k1","verify","unsigned_message","json","vec","serialize","deserialize","UnsignedMessageJson","0","UnsignedMessageJsonRef","0","serialize","deserialize","UnsignedMessage","version","from","to","sequence","value","method_num","params","gas_limit","gas_fee_cap","gas_premium","MessageBuilder","version","from","to","sequence","value","method_num","params","gas_limit","gas_fee_cap","gas_premium","build","builder","to_signing_bytes","valid_for_block_inclusion","Message","from","to","sequence","value","method_num","params","set_gas_limit","set_sequence","gas_limit","required_funds","gas_fee_cap","gas_premium","set_gas_fee_cap","set_gas_premium","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","to","sequence","value","method_num","params","gas_limit","set_gas_limit","set_sequence","required_funds","gas_fee_cap","gas_premium","set_gas_fee_cap","set_gas_premium","from","to","sequence","value","method_num","params","gas_limit","set_gas_limit","set_sequence","required_funds","gas_fee_cap","gas_premium","set_gas_fee_cap","set_gas_premium","from","to","sequence","value","method_num","params","set_sequence","gas_limit","gas_fee_cap","gas_premium","set_gas_limit","set_gas_fee_cap","set_gas_premium","required_funds","from","from","from","from","from","from","clone","clone","clone","clone","clone","default","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","cid","marshal_cbor"],"q":["forest_message","forest_message::chain_message","","","","forest_message","forest_message::message_receipt","forest_message::message_receipt::json","forest_message::message_receipt::json::vec","","forest_message::message_receipt::json","forest_message::message_receipt::json::opt","","forest_message::message_receipt::json","","","","","","forest_message::message_receipt","","","","forest_message","forest_message::signed_message","forest_message::signed_message::json","forest_message::signed_message::json::vec","","forest_message::signed_message::json","","","","","","forest_message::signed_message","","","","","","","","","","","forest_message","forest_message::unsigned_message","forest_message::unsigned_message::json","forest_message::unsigned_message::json::vec","","forest_message::unsigned_message::json","","","","","","forest_message::unsigned_message","","","","","","","","","","","","","","","","","","","","","","","","","","forest_message","","","","","","","","","","","","","","","forest_message::chain_message","","","","","","","","","","","","","","forest_message::message_receipt::json","","","","","","","","","","","","","","","","","","","","","","","","forest_message::message_receipt","","","","","","","","","","","","","","forest_message::signed_message::json","","","","","","","","","","","","","","","","","","","","","","","","forest_message::signed_message","","","","","","","","","","","","","","forest_message::unsigned_message::json","","","","","","","","","","","","","","","","","","","","","","","","forest_message::unsigned_message","","","","","","","","","","","","","","","","","","","","","","","","","","","","forest_message::chain_message","","","","","","","","","","","","","","forest_message::signed_message","","","","","","","","","","","","","","forest_message::unsigned_message","","","","","","","","","","","","","","forest_message::message_receipt","forest_message::message_receipt::json","forest_message::signed_message","forest_message::signed_message::json","forest_message::unsigned_message","forest_message::unsigned_message::json","forest_message::chain_message","forest_message::message_receipt","forest_message::signed_message","forest_message::unsigned_message","","","forest_message::message_receipt","","forest_message::signed_message","","forest_message::unsigned_message","","forest_message::chain_message","forest_message::message_receipt","forest_message::signed_message","forest_message::unsigned_message","forest_message::unsigned_message::json","forest_message::chain_message","forest_message::signed_message","forest_message::unsigned_message","forest_message::chain_message","forest_message::message_receipt","forest_message::message_receipt::json","forest_message::signed_message","forest_message::signed_message::json","forest_message::unsigned_message","forest_message::unsigned_message::json","forest_message::chain_message","forest_message::message_receipt","forest_message::message_receipt::json","","forest_message::signed_message","forest_message::signed_message::json","","forest_message::unsigned_message","forest_message::unsigned_message::json","","forest_message::chain_message","forest_message::signed_message"],"d":["","Enum to encpasulate signed and unsigned messages. Useful …","","","","","","","","","","","","Wrapper for serializing and deserializing a SignedMessage …","","Wrapper for serializing a SignedMessage reference to JSON.","","","","Result of a state transition from a message","","","","","","","","","Wrapper for serializing and deserializing a SignedMessage …","","Wrapper for serializing a SignedMessage reference to JSON.","","","","Represents a wrapped message with signature bytes.","","","Generate new signed message from an unsigned message and …","Generate a new signed message from fields.","Returns reference to the unsigned message.","Returns signature of the signed message.","Consumes self and returns it’s unsigned message.","Checks if the signed message is a BLS message.","Checks if the signed message is a Secp256k1 message.","Verifies that the from address of the message generated …","","","","","","Wrapper for serializing and deserializing a …","","Wrapper for serializing a UnsignedMessage reference to …","","","","Default Unsigned VM message type which includes all data …","","","","","","","","","","","Builder for <code>UnsignedMessage</code>.","","","","","","","","","","","Builds a new <code>UnsignedMessage</code>.","","Helper function to convert the message into signing bytes.…","Semantic validation and validates the message has enough …","Message interface to interact with Signed and unsigned …","Returns the from address of the message.","Returns the destination address of the message.","Returns the message sequence or nonce.","Returns the amount sent in message.","Returns the method number to be called.","Returns the encoded parameters for the method call.","sets the gas limit for the message.","sets a new sequence to the message.","Returns the gas limit for the message.","Returns the required funds for the message.","gets gas fee cap for the message.","gets gas premium for the message.","sets the gas fee cap.","sets the gas premiumeturns the content identifier of the raw block of data …",""],"i":[0,0,1,1,1,0,0,0,0,0,0,0,0,0,2,0,3,0,0,0,4,4,4,0,0,0,0,0,0,5,0,6,0,0,0,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,8,0,9,0,0,0,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,10,10,10,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,4,2,7,5,10,8,1,4,7,10,11,11,4,4,7,7,10,10,1,4,7,10,8,1,7,10,1,4,2,7,5,10,8,1,4,2,3,7,5,6,10,8,9,1,7],"f":[null,null,null,null,[[],["unsignedmessage",3]],null,null,null,[[],["result",4]],[[],[["result",4],["vec",3]]],null,[[["option",4]],["result",4]],[[],[["result",4],["option",4]]],null,null,null,null,[[["messagereceipt",3]],["result",4]],[[],[["result",4],["messagereceipt",3]]],null,null,null,null,null,null,null,[[],["result",4]],[[],[["vec",3],["result",4]]],null,null,null,null,[[["signedmessage",3]],["result",4]],[[],[["result",4],["signedmessage",3]]],null,null,null,[[["unsignedmessage",3]],[["result",4],["cryptoerror",4]]],[[["signature",3],["unsignedmessage",3]],[["result",4],["signedmessage",3],["string",3]]],[[],["unsignedmessage",3]],[[],["signature",3]],[[],["unsignedmessage",3]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4],["string",3]]],null,null,null,[[],["result",4]],[[],[["vec",3],["result",4]]],null,null,null,null,[[["unsignedmessage",3]],["result",4]],[[],[["result",4],["unsignedmessage",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["i64",15]]],[[["address",3]]],[[["address",3]]],[[["u64",15]]],[[["tokenamount",6]]],[[["methodnum",6]]],[[["serialized",3]]],[[["i64",15]]],[[["tokenamount",6]]],[[["tokenamount",6]]],[[],[["unsignedmessage",3],["string",3],["result",4]]],[[],["messagebuilder",3]],[[],[["vec",3],["u8",15]]],[[["i64",15],["networkversion",4]],[["result",4],["string",3]]],null,[[],["address",3]],[[],["address",3]],[[],["u64",15]],[[],["tokenamount",6]],[[],["methodnum",6]],[[],["serialized",3]],[[["i64",15]]],[[["u64",15]]],[[],["i64",15]],[[],["tokenamount",6]],[[],["tokenamount",6]],[[],["tokenamount",6]],[[["tokenamount",6]]],[[["tokenamount",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["address",3]],[[],["address",3]],[[],["u64",15]],[[],["tokenamount",6]],[[],["methodnum",6]],[[],["serialized",3]],[[],["i64",15]],[[["i64",15]]],[[["u64",15]]],[[],["tokenamount",6]],[[],["tokenamount",6]],[[],["tokenamount",6]],[[["tokenamount",6]]],[[["tokenamount",6]]],[[],["address",3]],[[],["address",3]],[[],["u64",15]],[[],["tokenamount",6]],[[],["methodnum",6]],[[],["serialized",3]],[[],["i64",15]],[[["i64",15]]],[[["u64",15]]],[[],["tokenamount",6]],[[],["tokenamount",6]],[[],["tokenamount",6]],[[["tokenamount",6]]],[[["tokenamount",6]]],[[],["address",3]],[[],["address",3]],[[],["u64",15]],[[],["tokenamount",6]],[[],["methodnum",6]],[[],["serialized",3]],[[["u64",15]]],[[],["i64",15]],[[],["tokenamount",6]],[[],["tokenamount",6]],[[["i64",15]]],[[["tokenamount",6]]],[[["tokenamount",6]]],[[],["tokenamount",6]],[[["messagereceiptjson",3]]],[[["messagereceipt",3]]],[[["signedmessagejson",3]]],[[["signedmessage",3]]],[[["unsignedmessagejson",3]]],[[["unsignedmessage",3]]],[[],["chainmessage",4]],[[],["messagereceipt",3]],[[],["signedmessage",3]],[[],["unsignedmessage",3]],[[],["messagebuilder",3]],[[],["messagebuilder",3]],[[["messagereceipt",3]],["bool",15]],[[["messagereceipt",3]],["bool",15]],[[["signedmessage",3]],["bool",15]],[[["signedmessage",3]],["bool",15]],[[["unsignedmessage",3]],["bool",15]],[[["unsignedmessage",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["error",3],["cid",3],["result",4]]],[[],[["vec",3],["result",4],["error",3]]]],"p":[[4,"ChainMessage"],[3,"MessageReceiptJson"],[3,"MessageReceiptJsonRef"],[3,"MessageReceipt"],[3,"SignedMessageJson"],[3,"SignedMessageJsonRef"],[3,"SignedMessage"],[3,"UnsignedMessageJson"],[3,"UnsignedMessageJsonRef"],[3,"UnsignedMessage"],[3,"MessageBuilder"],[8,"Message"]]},\
"forest_runtime":{"doc":"","t":[8,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,8,10,10,10,8,10,11,11,10,10,10,11,3,12,12,12,4,13,13,13,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ActorCode","invoke_method","Runtime","network_version","message","curr_epoch","validate_immediate_caller_accept_any","validate_immediate_caller_is","validate_immediate_caller_type","current_balance","resolve_address","get_actor_code_cid","get_randomness_from_tickets","get_randomness_from_beacon","create","state","transaction","store","send","new_actor_address","create_actor","delete_actor","total_fil_circ_supply","charge_gas","deserialize_params","MessageInfo","caller","receiver","value_received","Syscalls","verify_signature","hash_blake2b","compute_unsealed_sector_cid","verify_seal","verify_post","verify_consensus_fault","batch_verify_seals","ConsensusFault","target","epoch","fault_type","ConsensusFaultType","DoubleForkMining","ParentGrinding","TimeOffsetMining","compute_unsealed_sector_cid","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","clone","clone"],"q":["forest_runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Interface for invoking methods on an Actor","Invokes method with runtime on the actor’s code. Method …","Runtime is the VM’s internal runtime object. this is …","The network protocol version number at the current epoch.","Information related to the current message being executed.","The current chain epoch number. The genesis block has …","Validates the caller against some predicate. Exported …","","","The balance of the receiver.","Resolves an address of any protocol to an ID address (via …","Look up the code ID at an actor address.","Randomness returns a (pseudo)random byte array drawing …","Randomness returns a (pseudo)random byte array drawing …","Initializes the state object. This is only valid in a …","Loads a readonly copy of the state of the receiver into …","Loads a mutable version of the state into the <code>obj</code> …","Returns reference to blockstore","Sends a message to another actor, returning the exit code …","Computes an address for a new actor. The returned address …","Creates an actor with code <code>codeID</code> and address <code>address</code>, …","Deletes the executing actor from the state tree, …","Returns the total token supply in circulation at the …","ChargeGas charges specified amount of <code>gas</code> for execution. …","This function is a workaround for go-implementation’s …","Message information available to the actor about …","The address of the immediate calling actor. Always an …","The address of the actor receiving the message. Always an …","The value attached to the message being processed, …","Pure functions implemented as primitives by the runtime.","Verifies that a signature is valid for an address and …","Hashes input data using blake2b with 256 bit output.","Computes an unsealed sector CID (CommD) from its …","Verifies a sector seal proof.","Verifies a window proof of spacetime.","Verifies that two block headers provide proof of a …","","Result of checking two headers for a consensus fault.","Address of the miner at fault (always an ID address).","Epoch of the fault, which is the higher epoch of the two …","Type of fault.","Consensus fault types in VM.","","","","Computes sector [Cid] from proof type and pieces for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,0,4,4,4,4,4,4,4,0,5,5,5,0,6,6,6,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,6],"f":[null,[[["serialized",3],["methodnum",6]],[["result",4],["serialized",3],["actorerror",3]]],null,[[],["networkversion",4]],[[],["messageinfo",8]],[[],["chainepoch",6]],[[],[["result",4],["actorerror",3]]],[[],[["result",4],["actorerror",3]]],[[],[["result",4],["actorerror",3]]],[[],[["result",4],["tokenamount",6],["actorerror",3]]],[[["address",3]],[["option",4],["actorerror",3],["result",4]]],[[["address",3]],[["option",4],["actorerror",3],["result",4]]],[[["domainseparationtag",4],["chainepoch",6]],[["randomness",3],["result",4],["actorerror",3]]],[[["domainseparationtag",4],["chainepoch",6]],[["randomness",3],["result",4],["actorerror",3]]],[[],[["result",4],["actorerror",3]]],[[],[["cbor",8],["result",4],["actorerror",3]]],[[],[["result",4],["actorerror",3]]],[[]],[[["methodnum",6],["serialized",3],["tokenamount",6],["address",3]],[["result",4],["serialized",3],["actorerror",3]]],[[],[["actorerror",3],["result",4],["address",3]]],[[["cid",3],["address",3]],[["result",4],["actorerror",3]]],[[["address",3]],[["result",4],["actorerror",3]]],[[],[["result",4],["tokenamount",6],["actorerror",3]]],[[["i64",15],["str",15]],[["result",4],["actorerror",3]]],[[["serialized",3]],[["deserializeowned",8],["result",4],["actorerror",3]]],null,[[],["address",3]],[[],["address",3]],[[],["tokenamount",6]],null,[[["signature",3],["address",3]],[["box",3],["result",4]]],[[],[["box",3],["result",4]]],[[["registeredsealproof",4]],[["result",4],["cid",3],["box",3]]],[[["sealverifyinfo",3]],[["box",3],["result",4]]],[[["windowpostverifyinfo",3]],[["box",3],["result",4]]],[[],[["box",3],["option",4],["result",4]]],[[],[["result",4],["box",3],["hashmap",3]]],null,null,null,null,null,null,null,null,[[["registeredsealproof",4]],[["result",4],["cid",3],["box",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["consensusfault",3]],[[],["consensusfaulttype",4]]],"p":[[8,"ActorCode"],[8,"Runtime"],[8,"MessageInfo"],[8,"Syscalls"],[3,"ConsensusFault"],[4,"ConsensusFaultType"]]},\
"forest_vm":{"doc":"","t":[3,12,12,12,12,6,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,17,17,3,6,3,3,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ActorState","code","state","sequence","balance","DealID","ActorError","ExitCode","Ok","SysErrSenderInvalid","SysErrSenderStateInvalid","SysErrInvalidMethod","SysErrActorPanic","SysErrInvalidReceiver","SysErrInsufficientFunds","SysErrOutOfGas","SysErrForbidden","SysErrIllegalActor","SysErrIllegalArgument","SysErrReserved2","SysErrReserved3","SysErrReserved4","SysErrReserved5","SysErrReserved6","ErrIllegalArgument","ErrNotFound","ErrForbidden","ErrInsufficientFunds","ErrIllegalState","ErrSerialization","ErrTooManyProveCommits","ErrPlaceholder","MethodNum","METHOD_SEND","METHOD_CONSTRUCTOR","Serialized","TokenAmount","EMPTY_ARR_BYTES","EMPTY_ARR_CID","actor_error","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","from","clone","clone","clone","clone","default","eq","ne","eq","ne","eq","eq","ne","deref","deref","deref","fmt","fmt","fmt","fmt","fmt","hash","serialize","serialize","serialize","deserialize","deserialize","deserialize","initialize","initialize","from_i64","from_u64","new","deduct_funds","deposit_funds","new","new_fatal","is_fatal","exit_code","is_ok","msg","wrap","is_success","new","serialize","bytes","deserialize"],"q":["forest_vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["State of all actor implementations.","Link to code for the actor.","Link to the state of the actor.","Sequence of the actor.","Tokens available to the actor.","Deal identifier used in market and miner actors","The error type that gets returned by actor method calls.","ExitCode defines the exit code from the VM execution.","","Indicates failure to find an actor in the state tree.","Indicates failure to find the code for an actor.","Indicates failure to find a method in an actor.","Used for catching panics currently. (marked as …","Indicates a message sender has insufficient funds for a …","Indicates a message invocation out of sequence.","Indicates message execution (including subcalls) used …","Indicates a message execution is forbidden for the caller.","Indicates actor code performed a disallowed operation. …","Indicates an invalid argument passed to a runtime method.","Reserved exit codes, do not use.","","","","","Indicates a method parameter is invalid.","Indicates a requested resource does not exist.","Indicates an action is disallowed.","Indicates a balance of funds is insufficient.","Indicates an actor’s internal state is invalid.","Indicates de/serialization failure within actor code.","Power actor specific exit code.","","Method number indicator for calling actor methods.","Base actor send method.","Base actor constructor method.","Serialized bytes to be used as parameters into actor …","Token type to be used within the VM.","Cbor bytes of an empty array serialized.","Cid of the empty array Cbor bytes (<code>EMPTY_ARR_BYTES</code>).","Convenience macro for generating Actor Errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructor for actor state","Safely deducts funds from an Actor","Deposits funds to an Actor","","","Returns true if error is fatal.","Returns the exit code of the error.","Returns true when the exit code is <code>Ok</code>.","Error message of the actor error.","Prefix error message with a string message.","returns true if the exit code was a success","Constructor if data is encoded already","Contructor for encoding Cbor encodable structure.","Returns serialized bytes.","Deserializes the serialized bytes into a defined type."],"i":[0,1,1,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,3,3,1,3,2,4,4,1,1,3,3,2,4,4,4,5,6,1,3,2,4,3,4,1,2,4,1,2,4,5,6,2,2,1,1,1,3,3,3,3,3,3,3,2,4,4,4,4],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["encodingerror",3]]],[[["cborerror",3]]],[[],["actorstate",3]],[[],["actorerror",3]],[[],["exitcode",4]],[[],["serialized",3]],[[],["serialized",3]],[[["actorstate",3]],["bool",15]],[[["actorstate",3]],["bool",15]],[[["actorerror",3]],["bool",15]],[[["actorerror",3]],["bool",15]],[[["exitcode",4]],["bool",15]],[[["serialized",3]],["bool",15]],[[["serialized",3]],["bool",15]],[[]],[[],["vec",3]],[[],["cid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["tokenamount",6],["cid",3],["u64",15]]],[[["tokenamount",6]],[["string",3],["result",4]]],[[["tokenamount",6]]],[[["exitcode",4],["string",3]]],[[["string",3]]],[[],["bool",15]],[[],["exitcode",4]],[[],["bool",15]],[[],["str",15]],[[]],[[],["bool",15]],[[["vec",3],["u8",15]]],[[["serialize",8]],[["result",4],["encodingerror",3]]],[[]],[[],[["result",4],["deserializeowned",8],["encodingerror",3]]]],"p":[[3,"ActorState"],[4,"ExitCode"],[3,"ActorError"],[3,"Serialized"],[3,"EMPTY_ARR_BYTES"],[3,"EMPTY_ARR_CID"]]},\
"genesis":{"doc":"","t":[5,5],"n":["initialize_genesis","import_chain"],"q":["genesis",""],"d":["Uses an optional file path or the default genesis to …","Import a chain from a CAR file. If the snapshot boolean …"],"i":[0,0],"f":[[[["option",4],["statemanager",3],["string",3]]],[[["option",4],["arc",3],["i64",15],["bool",15],["str",15]]]],"p":[]},\
"interpreter":{"doc":"","t":[3,5,3,12,12,12,5,3,8,10,10,3,12,12,12,8,10,8,10,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DefaultRuntime","resolve_to_key_addr","GasCharge","name","compute_gas","storage_gas","price_list_by_epoch","PriceList","Rand","get_chain_randomness","get_beacon_randomness","BlockMessages","miner","messages","win_count","CircSupplyCalc","get_supply","LookbackStateGetter","state_lookback","VM","ApplyRet","msg_receipt","act_error","penalty","miner_tip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","clone","clone","fmt","fmt","fmt","verify_signature","hash_blake2b","compute_unsealed_sector_cid","verify_seal","verify_post","verify_consensus_fault","batch_verify_seals","new","charge_gas","gas_used","price_list","send","try_create_account_actor","new","total","on_chain_message","on_chain_return_value","on_method_invocation","on_ipld_get","on_ipld_put","on_create_actor","on_delete_actor","on_verify_signature","on_hashing","on_compute_unsealed_sector_cid","on_verify_seal","on_verify_post","on_verify_consensus_fault","new","register_actor","registered_actors","flush","state","migrate_state","apply_block_messages","apply_implicit_message","apply_message"],"q":["interpreter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Implementation of the Runtime trait.","returns the public key type of address (<code>BLS</code>/<code>SECP256K1</code>) of …","Single gas charge in the VM. Contains information about …","","","","Returns gas price list by Epoch for gas consumption.","Provides prices for operations in the VM","Randomness provider trait","Gets 32 bytes of randomness for ChainRand paramaterized …","Gets 32 bytes of randomness for ChainRand paramaterized …","Contains all messages to process through the VM as well …","","","","Allows generation of the current circulating supply given …","Retrieves total circulating supply on the network.","Trait to allow VM to retrieve state at an old epoch.","Returns a state tree from the given epoch.","Interpreter which handles execution of state …","Apply message return data.","Message receipt for the transaction. This data is stored …","Actor error from the transaction, if one exists.","Gas penalty from transaction, if any.","Tip given to miner from message.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new Runtime","Adds to amount of used.","Returns gas used by runtime.","Returns the price list for gas charges within the runtime.","Shared logic between the DefaultRuntime and the …","creates account actors from only BLS/SECP256K1 addresses.","","Calculates total gas charge based on compute and storage …","Returns the gas required for storing a message of a given …","Returns the gas required for storing the response of a …","Returns the gas required when invoking a method.","Returns the gas required for storing an object.","Returns the gas required for storing an object.","Returns the gas required for creating an actor.","Returns the gas required for deleting an actor.","Returns gas required for signature verification.","Returns gas required for hashing data.","Returns gas required for computing unsealed sector Cid.","Returns gas required for seal verification.","Returns gas required for PoSt verification.","Returns gas required for verifying consensus fault.","","Registers an actor that is not part of the set of default …","Gets registered actors that are not part of the set of …","Flush stores in VM and return state root.","Returns a reference to the VM’s state tree.","Flushes the StateTree and perform a state migration if …","Apply block messages from a Tipset. Returns the receipts …","Applies single message through vm and returns result from …","Applies the state transition for a single message. …"],"i":[0,0,0,1,1,1,0,0,0,2,2,0,3,3,3,0,4,0,5,0,0,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,3,3,3,3,3,3,9,9,9,9,9,9,9,9,9,9,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,6,8,3,6,7,7,7,7,7,7,7,7,7,7,7,7,7,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9],"f":[null,[[["statetree",3],["address",3]],[["result",4],["box",3],["address",3]]],null,null,null,null,[[["chainepoch",6]],["pricelist",3]],null,null,[[["chainepoch",6],["domainseparationtag",4]],[["box",3],["result",4]]],[[["chainepoch",6],["domainseparationtag",4]],[["box",3],["result",4]]],null,null,null,null,null,[[["statetree",3],["chainepoch",6]],[["tokenamount",6],["box",3],["result",4]]],null,[[["chainepoch",6]],[["result",4],["statetree",3],["box",3]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["pricelist",3]],[[],["applyret",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["signature",3],["address",3]],[["box",3],["result",4]]],[[],[["box",3],["result",4]]],[[["registeredsealproof",4]],[["cid",3],["box",3],["result",4]]],[[["sealverifyinfo",3]],[["box",3],["result",4]]],[[["windowpostverifyinfo",3]],[["box",3],["result",4]]],[[],[["box",3],["result",4],["option",4]]],[[],[["hashmap",3],["box",3],["result",4]]],[[["address",3],["i64",15],["u64",15],["statetree",3],["unsignedmessage",3],["hashset",3],["networkversion",4],["chainepoch",6]],[["actorerror",3],["result",4]]],[[["gascharge",3]],[["result",4],["actorerror",3]]],[[],["i64",15]],[[],["pricelist",3]],[[["gascharge",3],["option",4],["unsignedmessage",3]],[["actorerror",3],["result",4],["serialized",3]]],[[["address",3]],[["actorerror",3],["result",4]]],[[["i64",15],["str",15]]],[[],["i64",15]],[[["usize",15]],["gascharge",3]],[[["usize",15]],["gascharge",3]],[[["methodnum",6],["tokenamount",6]],["gascharge",3]],[[],["gascharge",3]],[[["usize",15]],["gascharge",3]],[[],["gascharge",3]],[[],["gascharge",3]],[[["signaturetype",4]],["gascharge",3]],[[["usize",15]],["gascharge",3]],[[["registeredsealproof",4]],["gascharge",3]],[[["sealverifyinfo",3]],["gascharge",3]],[[["windowpostverifyinfo",3]],["gascharge",3]],[[],["gascharge",3]],[[["bigint",3],["cid",3],["chainepoch",6]],[["result",4],["string",3]]],[[["cid",3]],["bool",15]],[[],["hashset",3]],[[],[["cid",3],["box",3],["result",4]]],[[],["statetree",3]],[[["chainepoch",6]],[["option",4],["result",4],["box",3]]],[[["option",4],["chainepoch",6]],[["box",3],["vec",3],["result",4]]],[[["unsignedmessage",3]],["applyret",3]],[[["chainmessage",4]],[["applyret",3],["string",3],["result",4]]]],"p":[[3,"GasCharge"],[8,"Rand"],[3,"BlockMessages"],[8,"CircSupplyCalc"],[8,"LookbackStateGetter"],[3,"ApplyRet"],[3,"DefaultRuntime"],[3,"PriceList"],[3,"VM"]]},\
"ipld_amt":{"doc":"AMT crate for use as rust IPLD data structure","t":[3,4,13,13,13,13,13,13,13,13,13,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Amt","Error","OutOfRange","MaxHeight","Cid","Cached","InvalidVecLength","LinksAndValues","CidNotFound","Dynamic","Other","ValueMut","MAX_INDEX","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","eq","deref","deref_mut","fmt","fmt","fmt","source","new","new_with_bit_width","load","height","count","new_from_iter","get","set","batch_set","delete","batch_delete","flush","for_each","for_each_while","for_each_mut","for_each_while_mut","new","value_changed","mark_unchanged"],"q":["ipld_amt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Array Mapped Trie allows for the insertion and …","AMT Error","Index referenced it above arbitrary max set","Height of root node is greater than max.","Error generating a Cid for data","Error when trying to serialize an AMT without a flushed …","Serialized vector less than number of bits set","Invalid formatted serialized node.","Cid not found in store error","Dynamic error for when the error needs to be forwarded as …","Custom AMT error","A wrapper around a mutable reference to a value in an …","MaxIndex is the maximum index for elements in the AMT. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructor for Root AMT node","Construct new Amt with given bit width.","Constructs an AMT with a blockstore and a Cid of the root …","Gets the height of the <code>Amt</code>.","Gets count of elements added in the <code>Amt</code>.","Generates an AMT with block store and array of cbor …","Get value at index of AMT","Set value at index","Batch set (naive for now)","Delete item from AMT at index","Deletes multiple items from AMT If <code>strict</code> is true, all …","flush root and return Cid used as key in block store","Iterates over each value in the Amt and runs a function …","Iterates over each value in the Amt and runs a function …","Iterates over each value in the Amt and runs a function …","Iterates over each value in the Amt and runs a function …","","","Marks guard as unchanged. This should only be used when …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,1,1,1,2,3,3,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["ciderror",4]]],[[["encodingerror",3]]],[[["box",3],["stderror",8]]],[[],["bool",15]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]],[[]],[[["usize",15]]],[[["cid",3]],[["error",4],["result",4]]],[[],["usize",15]],[[],["usize",15]],[[],[["result",4],["cid",3],["error",4]]],[[["usize",15]],[["result",4],["option",4],["error",4]]],[[["usize",15]],[["error",4],["result",4]]],[[],[["error",4],["result",4]]],[[["usize",15]],[["option",4],["error",4],["result",4]]],[[["bool",15]],[["bool",15],["error",4],["result",4]]],[[],[["result",4],["cid",3],["error",4]]],[[],[["box",3],["result",4]]],[[],[["box",3],["result",4]]],[[],[["box",3],["result",4]]],[[],[["box",3],["result",4]]],[[]],[[],["bool",15]],[[]]],"p":[[4,"Error"],[3,"Amt"],[3,"ValueMut"]]},\
"ipld_blockstore":{"doc":"","t":[0,5,5,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["resolve","resolve_cids_recursive","resolve_ipld","BufferedBlockStore","BlockStore","get_bytes","get","put","put_raw","bulk_put","from","into","borrow","borrow_mut","try_from","try_into","type_id","get_bytes","put_raw","fmt","read","write","delete","exists","bulk_read","bulk_write","bulk_delete","new","flush"],"q":["ipld_blockstore","ipld_blockstore::resolve","","ipld_blockstore","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module is used for resolving Cids and Ipld …","Resolves link to recursively resolved [Ipld] with no hash …","Resolves [Ipld] links recursively, building an [Ipld] …","Wrapper around <code>BlockStore</code> to limit and have control over …","Wrapper for database to handle inserting and retrieving …","Get bytes from block store by Cid.","Get typed object from block store by Cid.","Put an object in the block store and return the Cid …","Put raw bytes in the block store and return the Cid …","Batch put cbor objects into blockstore and returns vector …","","","","","","","","","","","","","","","","","","","Flushes the buffered cache based on the root node. This …"],"i":[0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[null,[[["option",4],["u64",15],["cid",3]],[["ipld",4],["result",4],["box",3]]],[[["ipld",4],["option",4],["u64",15]],[["box",3],["result",4]]],null,null,[[["cid",3]],[["result",4],["option",4],["box",3]]],[[["cid",3]],[["box",3],["option",4],["result",4]]],[[["code",4]],[["box",3],["cid",3],["result",4]]],[[["vec",3],["code",4],["u8",15]],[["box",3],["cid",3],["result",4]]],[[["code",4]],[["box",3],["result",4],["vec",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["cid",3]],[["result",4],["option",4],["box",3]]],[[["vec",3],["code",4],["u8",15]],[["box",3],["cid",3],["result",4]]],[[["formatter",3]],["result",6]],[[],[["error",4],["option",4],["result",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["bool",15],["error",4]]],[[],[["result",4],["vec",3],["error",4]]],[[],[["result",4],["error",4]]],[[],[["result",4],["error",4]]],[[]],[[["cid",3]],[["box",3],["result",4]]]],"p":[[8,"BlockStore"],[3,"BufferedBlockStore"]]},\
"ipld_hamt":{"doc":"HAMT crate for use as rust IPLD data structure","t":[4,13,13,13,13,13,13,3,8,10,4,3,12,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","MaxDepth","InvalidHashBitLen","ZeroPointers","CidNotFound","Dynamic","Other","Hamt","HashAlgorithm","hash","Sha256","BytesKey","0","Hash","hash","hash_slice","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","equivalent","eq","ne","fmt","hash","borrow","borrow","clone","deserialize","serialize","from","from","from","deref","partial_cmp","hash","from","from","eq","fmt","fmt","fmt","fmt","serialize","new","new_with_bit_width","load","load_with_bit_width","set_root","store","set","set_if_absent","get","contains_key","delete","flush","is_empty","for_each"],"q":["ipld_hamt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["HAMT Error","Maximum depth error","Hash bits does not support greater than 8 bit width","This should be treated as a fatal error, must have at …","Cid not found in store error","Dynamic error for when the error needs to be forwarded as …","Custom HAMT error","Implementation of the HAMT data structure for IPLD.","Algorithm used as the hasher for the Hamt.","","Sha256 hashing algorithm used for hashing keys in the …","Key type to be used to serialize as byte string instead …","","Custom trait to avoid issues like …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct hamt with a bit width","Lazily instantiate a hamt from this root Cid.","Lazily instantiate a hamt from this root Cid with a …","Sets the root based on the Cid of the root node using the …","Returns a reference to the underlying store of the Hamt.","Inserts a key-value pair into the HAMT.","Inserts a key-value pair into the HAMT only if that key …","Returns a reference to the value corresponding to the key.","Returns <code>true</code> if a value exists for the given key in the …","Removes a key from the HAMT, returning the value at the …","Flush root and return Cid for hamt","Returns true if the HAMT has no entries","Iterates over each KV in the Hamt and runs a function on …"],"i":[0,1,1,1,1,1,1,0,0,2,0,0,3,0,4,4,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,6,6,6,6,6,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,1,1,5,1,5,6,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["byteskey",3]],["bool",15]],[[["byteskey",3]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[],["vec",3]],[[]],[[],["byteskey",3]],[[],[["byteskey",3],["result",4]]],[[],["result",4]],[[["str",15]],["byteskey",3]],[[["vec",3],["u8",15],["global",3]],["byteskey",3]],[[],["byteskey",3]],[[]],[[["byteskey",3]],[["ordering",4],["option",4]]],[[]],[[["encodingerror",3]]],[[["box",3],["stderror",8]]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["result",4]],[[]],[[["u32",15]]],[[["cid",3]],[["error",4],["result",4]]],[[["u32",15],["cid",3]],[["error",4],["result",4]]],[[["cid",3]],[["error",4],["result",4]]],[[]],[[],[["option",4],["error",4],["result",4]]],[[],[["bool",15],["result",4],["error",4]]],[[],[["option",4],["error",4],["result",4]]],[[],[["bool",15],["result",4],["error",4]]],[[],[["result",4],["option",4],["error",4]]],[[],[["result",4],["cid",3],["error",4]]],[[],["bool",15]],[[],[["result",4],["box",3]]]],"p":[[4,"Error"],[8,"HashAlgorithm"],[3,"BytesKey"],[8,"Hash"],[3,"Hamt"],[4,"Sha256"]]},\
"key_management":{"doc":"","t":[0,3,12,3,12,5,5,4,13,13,13,13,13,13,13,17,17,3,3,8,10,10,10,10,3,4,13,13,13,4,13,13,13,3,12,12,12,3,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["json","KeyInfoJson","0","KeyInfoJsonRef","0","serialize","deserialize","Error","KeyInfo","KeyExists","KeyNotExists","NoKey","IO","Other","KeyInfoConversion","KEYSTORE_NAME","ENCRYPTED_KEYSTORE_NAME","KeyInfo","PersistentKeyInfo","Store","list","get","put","remove","KeyStore","KeyStoreConfig","Memory","Persistent","Encrypted","EncryptedKeyStoreError","DecryptionError","EncryptionError","ConfigurationError","Key","key_info","public_key","address","Wallet","get_default","list_addrs","find_key","try_find","export_key_info","generate_key","import","to_public","new_address","sign","generate","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","from","clone","clone","clone","clone","clone","clone","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","try_from","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","new","key_type","private_key","new","flush","list","get","put","remove","new","new_from_keys","find_key","sign","export","import","list_addrs","get_default","set_default","generate_addr","has_key"],"q":["key_management","key_management::json","","","","","","key_management","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","key_management::json","","","","","","","","","","","","","","","","","","key_management","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","key_management::json","key_management","","","","","","","","","","","","","","","","","","","","","","","","","","","key_management::json","","key_management","","","key_management::json","key_management","","","","","","","","","","","","","","","","","","","",""],"d":["","Wrapper for serializing and deserializing a SignedMessage …","","Wrapper for serializing a SignedMessage reference to JSON.","","","","","info that corresponds to key does not exist","Key already exists in keystore","","","","","","","","KeyInfo struct, this contains the type of key (stored as …","","KeyStore struct, this contains a HashMap that is a set of …","Return all of the keys that are stored in the KeyStore","Return Keyinfo that corresponds to a given key","Save a key key_info pair to the KeyStore","Remove the Key and corresponding key_info from the …","KeyStore struct, this contains a HashMap that is a set of …","","","","","","Possibly indicates incorrect passphrase","An error occured while encrypting keys","Unlock called without <code>encrypted_keystore</code> being enabled in …","A Key, this contains a key_info, address, and public_key …","","","","This is a Wallet, it contains 2 HashMaps:","Return the default Address for KeyStore","Return Vec of Addresses sorted by their string …","Return Key corresponding to given Address in KeyStore","","Return keyInfo for given Address in KeyStore","Generate new Key of given SignatureType","Import KeyInfo into KeyStore","Return the public key for a given private_key and …","Return a new Address that is of a given SignatureType and …","Sign takes in SignatureType, private key and message. …","Generate a new private key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a new KeyInfo given the key_type and private_key","Return a reference to the key_type","Return a reference to the private_key","","","Return all of the keys that are stored in the KeyStore","Return Keyinfo that corresponds to a given key","Save a key key_info pair to the KeyStore","Remove the Key and corresponding key_info from the …","Return a new Wallet with a given KeyStore","Return a wallet from a given amount of keys. This wallet …","Return the Key that is resolved by a given Address, If …","Return the resultant Signature after signing a given …","Return the KeyInfo for a given Address","Add Key_Info to the Wallet, return the Address that …","Return a Vec that contains all of the Addresses in the …","Return the Address of the default KeyInfo in the Wallet","Set a default KeyInfo to the Wallet","Generate a new Address that fits the requirement of the …","Return whether or not the Wallet contains a Key that is …"],"i":[0,0,1,0,2,0,0,0,3,3,3,3,3,3,3,0,0,0,0,0,4,4,4,4,0,0,5,5,5,0,6,6,6,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,11,11,11,11,11,11,11,11,11,11,3,8,8,9,1,10,7,11,3,3,8,8,9,9,10,10,7,7,11,11,3,8,9,10,6,7,11,3,6,7,8,9,1,2,7,8,9,1,7,8,8,8,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11],"f":[null,null,null,null,null,[[["keyinfo",3]],["result",4]],[[],[["keyinfo",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["vec",3],["string",3]]],[[["str",15]],[["keyinfo",3],["result",4],["error",4]]],[[["keyinfo",3],["string",3]],[["result",4],["error",4]]],[[["string",3]],[["keyinfo",3],["result",4],["error",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["keystore",3]],[["address",3],["result",4],["error",4]]],[[["keystore",3]],[["vec",3],["result",4],["error",4]]],[[["address",3],["keystore",3]],[["error",4],["result",4],["key",3]]],[[["address",3],["keystore",3]],[["keyinfo",3],["result",4],["error",4]]],[[["address",3],["keystore",3]],[["keyinfo",3],["result",4],["error",4]]],[[["signaturetype",4]],[["error",4],["result",4],["key",3]]],[[["keyinfo",3],["keystore",3]],[["address",3],["result",4],["error",4]]],[[["signaturetype",4]],[["vec",3],["result",4],["error",4]]],[[["signaturetype",4]],[["address",3],["result",4],["error",4]]],[[["signaturetype",4]],[["result",4],["error",4],["signature",3]]],[[["signaturetype",4]],[["vec",3],["result",4],["error",4]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["error",3]]],[[["keyinfojson",3]],["keyinfo",3]],[[],["keyinfo",3]],[[],["persistentkeyinfo",3]],[[],["keyinfojson",3]],[[],["keystore",3]],[[],["key",3]],[[],["wallet",3]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["keyinfo",3]],["bool",15]],[[["keyinfo",3]],["bool",15]],[[["persistentkeyinfo",3]],["bool",15]],[[["persistentkeyinfo",3]],["bool",15]],[[["keystore",3]],["bool",15]],[[["keystore",3]],["bool",15]],[[["key",3]],["bool",15]],[[["key",3]],["bool",15]],[[["wallet",3]],["bool",15]],[[["wallet",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["keyinfo",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec",3],["signaturetype",4],["u8",15]]],[[],["signaturetype",4]],[[],["vec",3]],[[["keystoreconfig",4]],[["error",4],["result",4]]],[[],[["result",4],["error",4]]],[[],[["vec",3],["string",3]]],[[["str",15]],[["keyinfo",3],["result",4],["error",4]]],[[["keyinfo",3],["string",3]],[["result",4],["error",4]]],[[["string",3]],[["keyinfo",3],["result",4],["error",4]]],[[["keystore",3]]],[[["keystore",3]]],[[["address",3]],[["error",4],["result",4],["key",3]]],[[["address",3]],[["result",4],["error",4],["signature",3]]],[[["address",3]],[["keyinfo",3],["result",4],["error",4]]],[[["keyinfo",3]],[["address",3],["result",4],["error",4]]],[[],[["vec",3],["result",4],["error",4]]],[[],[["address",3],["result",4],["error",4]]],[[["address",3]],[["result",4],["error",4]]],[[["signaturetype",4]],[["address",3],["result",4],["error",4]]],[[["address",3]],["bool",15]]],"p":[[3,"KeyInfoJson"],[3,"KeyInfoJsonRef"],[4,"Error"],[8,"Store"],[4,"KeyStoreConfig"],[4,"EncryptedKeyStoreError"],[3,"Key"],[3,"KeyInfo"],[3,"PersistentKeyInfo"],[3,"KeyStore"],[3,"Wallet"]]},\
"message_pool":{"doc":"","t":[0,3,5,5,5,5,5,3,12,12,12,12,12,12,4,13,13,13,13,13,13,13,13,13,13,13,13,3,12,12,12,12,12,12,12,12,12,12,12,12,3,8,10,10,10,10,10,10,10,10,10,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["test_provider","TestApi","create_header","mock_block","mock_block_with_epoch","mock_block_with_parents","block_probabilities","MpoolConfig","priority_addrs","size_limit_high","size_limit_low","replace_by_fee_ratio","prune_cooldown","gas_limit_overestimation","Error","MessageTooBig","GasPriceTooLow","GasFeeCapTooLow","MessageValueTooHigh","SequenceTooLow","NotEnoughFunds","InvalidToAddr","InvalidFromAddr","DuplicateSequence","TryAgain","SoftValidationFailure","Other","MessagePool","pending","cur_tipset","api","min_gas_price","max_tx_pool_size","network_name","network_sender","bls_sig_cache","sig_val_cache","republished","repub_trigger","config","MpoolRpcProvider","Provider","subscribe_head_changes","get_heaviest_tipset","put_message","get_actor_after","messages_for_block","state_account_key","messages_for_tipset","load_tipset","chain_compute_base_fee","head_change","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","init","deref","deref_mut","drop","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","init","deref","deref_mut","drop","subscribe_head_changes","get_heaviest_tipset","put_message","get_actor_after","messages_for_block","messages_for_tipset","load_tipset","chain_compute_base_fee","state_account_key","subscribe_head_changes","get_heaviest_tipset","put_message","get_actor_after","messages_for_block","state_account_key","messages_for_tipset","load_tipset","chain_compute_base_fee","from","from","clone","default","default","eq","ne","fmt","fmt","deserialize","serialize","new","save_config","load_config","size_limit_low","priority_addrs","new","push","add","add_skip_checks","get_sequence","push_with_sequence","remove","pending","pending_for","messages_for_blocks","estimate_gas_premium","load_local","clear","get_config","set_config","new","select_messages","set_state_sequence","set_state_balance_raw","set_block_messages","set_heaviest_tipset","next_block"],"q":["message_pool","message_pool::test_provider","","","","","message_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","message_pool::test_provider","","","","","","","","","","","","","","","","message_pool","","","","","","","","","message_pool::test_provider","","","","","","","","","message_pool","","","","message_pool::test_provider","message_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","message_pool::test_provider","","","",""],"d":["Contains mock implementations for testing internal …","Struct used for creating a provider when writing tests …","","","","","","Config available for the MessagePool.","","","","","","","MessagePool error.","Error indicating message that’s too large","","","","","","","","","","","","This contains all necessary information needed for the …","A map of pending messages where the key is the address","The current tipset (a set of blocks)","The underlying provider","The minimum gas price needed for executing the …","This is max number of messages in the pool.","TODO","Sender half to send messages to other components","A cache for BLS signature keyed by Cid","A cache for BLS signature keyed by Cid","A set of republished messages identified by their Cid","Acts as a signal to republish messages from the …","Configurable parameters of the message pool","This is the default Provider implementation that will be …","Provider Trait. This trait will be used by the …","Update Mpool’s cur_tipset whenever there is a chnge to …","Get the heaviest Tipset in the provider","Add a message to the MpoolProvider, return either Cid or …","Return state actor for given address given the tipset …","Return the signed messages for given blockheader","Resolves to the key address","Return all messages for a tipset","Return a tipset given the tipset keys from the ChainStore","Computes the base fee","This function will revert and/or apply tipsets to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new TestApi","","","","","","","","Saves message pool config to the database, to easily …","Load config from store, if exists. If there is no config, …","Returns the low limit capacity of messages to allocate.","Returns slice of [Address]es to prioritize when selecting …","Creates a new MessagePool instance.","Push a signed message to the MessagePool. Additionally …","This is a helper to push that will help to make sure that …","Add a SignedMessage without doing any of the checks.","Get the sequence for a given address, return Error if …","Adds a local message returned from the call back function …","Remove a message given a sequence and address from the …","Return a tuple that contains a vector of all signed …","Return a Vector of signed messages for a given from …","Return Vector of signed messages given a block header for …","Return gas price estimate this has been translated from …","Loads local messages to the message pool to be applied.","If <code>local = true</code>, the local messages will be removed as …","","","","Forest employs a sophisticated algorithm for selecting …","Set the state sequence for an Address for TestApi","Set the state balance for an Address for TestApi","Set the block messages for TestApi","Set the heaviest tipset for TestApi",""],"i":[0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,0,0,4,4,4,4,4,4,4,4,4,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,2,2,1,1,6,2,2,2,2,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,3,6,6,6,6,6],"f":[null,null,[[["u64",15]],["blockheader",3]],[[["u64",15]],["blockheader",3]],[[["i64",15],["u64",15]],["blockheader",3]],[[["tipset",3],["u64",15]],["blockheader",3]],[[["f64",15]],[["vec",3],["f64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["pin",3],["box",3]]],[[],[["box",3],["pin",3]]],[[["chainmessage",4]],[["result",4],["cid",3],["error",4]]],[[["address",3],["tipset",3]],[["error",4],["result",4],["actorstate",3]]],[[["blockheader",3]],[["result",4],["error",4]]],[[["address",3],["arc",3]],[["box",3],["pin",3]]],[[["tipset",3]],[["result",4],["error",4],["vec",3]]],[[["tipsetkeys",3]],[["pin",3],["box",3]]],[[["tipset",3]],[["result",4],["bigint",3],["error",4]]],[[["rwlock",3],["arc",3],["rwlock",3],["vec",3],["rwlock",3],["tipset",3],["rwlock",3],["sender",3],["rwlock",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["pin",3],["box",3]]],[[],[["box",3],["pin",3]]],[[["chainmessage",4]],[["result",4],["cid",3],["error",4]]],[[["address",3],["tipset",3]],[["error",4],["result",4],["actorstate",3]]],[[["blockheader",3]],[["result",4],["error",4]]],[[["tipset",3]],[["result",4],["error",4],["vec",3]]],[[["tipsetkeys",3]],[["pin",3],["box",3]]],[[["tipset",3]],[["result",4],["bigint",3],["error",4]]],[[["address",3],["arc",3]],[["box",3],["pin",3]]],[[],[["pin",3],["box",3]]],[[],[["box",3],["pin",3]]],[[["chainmessage",4]],[["result",4],["cid",3],["error",4]]],[[["address",3],["tipset",3]],[["error",4],["result",4],["actorstate",3]]],[[["blockheader",3]],[["result",4],["error",4]]],[[["address",3],["arc",3]],[["box",3],["pin",3]]],[[["tipset",3]],[["result",4],["error",4],["vec",3]]],[[["tipsetkeys",3]],[["pin",3],["box",3]]],[[["tipset",3]],[["result",4],["bigint",3],["error",4]]],[[["chainerror",4]]],[[["encodeerror",3]]],[[],["mpoolconfig",3]],[[]],[[]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["f64",15],["address",3],["vec",3],["i64",15],["duration",3]],[["string",3],["result",4]]],[[],[["box",3],["result",4]]],[[],[["result",4],["box",3]]],[[],["i64",15]],[[]],[[["string",3],["networkmessage",4],["mpoolconfig",3],["sender",3]]],[[["signedmessage",3]]],[[["signedmessage",3]]],[[["signedmessage",3]]],[[["address",3]]],[[["address",3]]],[[["bool",15],["address",3],["u64",15]]],[[]],[[["address",3]]],[[]],[[["address",3],["tipsetkeys",3],["u64",15]],[["result",4],["bigint",3],["error",4]]],[[]],[[["bool",15]]],[[],["mpoolconfig",3]],[[["mpoolconfig",3]],[["result",4],["error",4]]],[[["statemanager",3],["arc",3],["publisher",3],["headchange",4]]],[[["f64",15],["tipset",3]]],[[["address",3],["u64",15]]],[[["address",3],["bigint",3]]],[[["signedmessage",3],["blockheader",3],["vec",3]]],[[["tipset",3],["arc",3]]],[[],["blockheader",3]]],"p":[[3,"MpoolConfig"],[4,"Error"],[3,"MessagePool"],[8,"Provider"],[3,"MpoolRpcProvider"],[3,"TestApi"]]},\
"metrics":{"doc":"","t":[4,13,13,13,5,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","Tide","Io","PortInUse","init_prometheus","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","fmt","fmt"],"q":["metrics","","","","","","","","","","","","","","",""],"d":["","Tide internal error.","I/O error.","Prometheus port is already in use.","","","","","","","","","","","",""],"i":[0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,[[["registry",3],["socketaddr",4]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[4,"Error"]]},\
"net_utils":{"doc":"","t":[3,12,12,11,11,11,11,11,11,11,11,11,11,11],"n":["FetchProgress","inner","progress_bar","from","into","borrow","borrow_mut","try_from","try_into","type_id","try_from","try_from","poll_read","finish"],"q":["net_utils","","","","","","","","","","","","",""],"d":["Holds a Reader, tracks read progress and draw a progress …","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["url",3]],["result",4]],[[["file",3]],["result",4]],[[["pin",3],["context",3]],[["result",4],["poll",4]]],[[]]],"p":[[3,"FetchProgress"]]},\
"networks":{"doc":"","t":[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5],"n":["DEFAULT_GENESIS","UPGRADE_BREEZE_HEIGHT","UPGRADE_SMOKE_HEIGHT","UPGRADE_IGNITION_HEIGHT","UPGRADE_ACTORS_V2_HEIGHT","UPGRADE_TAPE_HEIGHT","UPGRADE_LIFTOFF_HEIGHT","UPGRADE_KUMQUAT_HEIGHT","UPGRADE_CALICO_HEIGHT","UPGRADE_PERSIAN_HEIGHT","UPGRADE_ORANGE_HEIGHT","UPGRADE_CLAUS_HEIGHT","UPGRADE_ACTORS_V3_HEIGHT","UPGRADE_NORWEGIAN_HEIGHT","UPGRADE_ACTORS_V4_HEIGHT","UPGRADE_PLACEHOLDER_HEIGHT","NEWEST_NETWORK_VERSION","DEFAULT_BOOTSTRAP","BLOCK_DELAY_SECS","get_network_version_default","beacon_schedule_default"],"q":["networks","","","","","","","","","","","","","","","","","","","",""],"d":["Default genesis car file bytes.","V1 network upgrade","V2 network upgrade","V3 network upgrade","V4 network upgrade","V5 network upgrade","Switching to mainnet network name","V6 network upgrade","V7 network upgrade","V8 network upgrade","V9 network upgrade","Remove burn on window PoSt fork","V10 network upgrade","V11 network upgrade","V12 network upgrade","","Current network version for the network","Bootstrap peer ids","Time, in seconds, between each block.","Gets network version from epoch using default Mainnet …","Constructs a drand beacon schedule based on the build …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["chainepoch",6]],["networkversion",4]],[[["u64",15]]]],"p":[]},\
"paramfetch":{"doc":"","t":[4,13,13,13,5,5,11,11,11,11,11,11,11,11,11,11,11,11],"n":["SectorSizeOpt","All","Keys","Size","get_params","get_params_default","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop"],"q":["paramfetch","","","","","","","","","","","","","","","","",""],"d":["Sector size options for fetching.","All keys and proofs gen params","Only verification params","All keys and proofs gen params for a given size","Get proofs parameters and all verification keys for a …","Get proofs parameters and all verification keys for a …","","","","","","","","","","","",""],"i":[0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,[[["sectorsizeopt",4],["bool",15],["str",15]]],[[["bool",15],["sectorsizeopt",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]]],"p":[[4,"SectorSizeOpt"]]},\
"rpc":{"doc":"","t":[5],"n":["start_rpc"],"q":["rpc"],"d":[""],"i":[0],"f":[[[["arc",3],["rpcstate",3],["str",15]]]],"p":[]},\
"rpc_api":{"doc":"","t":[0,3,12,12,12,3,12,12,12,12,12,12,12,12,12,12,3,12,6,3,12,12,12,3,3,12,12,3,3,12,12,12,12,12,3,3,12,12,3,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,3,12,12,0,17,6,6,17,6,6,0,17,6,6,0,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,0,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,0,17,6,6,17,6,6,17,6,6,17,6,6,0,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,0,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,17,6,6,0,17,6,6,17,6,6,17,6,6,17,6,6,0,17,6,6,0,17,6,6,4,13,13,13,13,7,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["data_types","StreamingData","json_rpc","method","params","RPCState","keystore","chain_store","state_manager","mpool","bad_blocks","sync_state","network_send","new_mined_block_tx","network_name","beacon","RPCSyncState","active_syncs","JsonRpcServerState","BlockMessages","bls_msg","secp_msg","cids","MessageSendSpec","Deadline","post_submissions","disputable_proof_count","Fault","Partition","all_sectors","faulty_sectors","recovering_sectors","live_sectors","active_sectors","ActorStateJson","MarketDeal","proposal","state","MessageLookup","receipt","tipset","height","message","return_dec","BlockTemplate","miner","parents","ticket","eproof","beacon_values","messages","epoch","timestamp","winning_post_proof","MiningBaseInfoJson","miner_power","network_power","sectors","worker_key","sector_size","prev_beacon_entry","beacon_entries","eligible_for_mining","AddrInfo","id","addrs","auth_api","AUTH_NEW","AuthNewParams","AuthNewResult","AUTH_VERIFY","AuthVerifyParams","AuthVerifyResult","beacon_api","BEACON_GET_ENTRY","BeaconGetEntryParams","BeaconGetEntryResult","chain_api","CHAIN_GET_MESSAGE","ChainGetMessageParams","ChainGetMessageResult","CHAIN_READ_OBJ","ChainReadObjParams","ChainReadObjResult","CHAIN_HAS_OBJ","ChainHasObjParams","ChainHasObjResult","CHAIN_GET_BLOCK_MESSAGES","ChainGetBlockMessagesParams","ChainGetBlockMessagesResult","CHAIN_GET_TIPSET_BY_HEIGHT","ChainGetTipsetByHeightParams","ChainGetTipsetByHeightResult","CHAIN_GET_GENESIS","ChainGetGenesisParams","ChainGetGenesisResult","CHAIN_HEAD","ChainHeadParams","ChainHeadResult","CHAIN_HEAD_SUBSCRIPTION","ChainHeadSubscriptionParams","ChainHeadSubscriptionResult","CHAIN_NOTIFY","ChainNotifyParams","ChainNotifyResult","CHAIN_TIPSET_WEIGHT","ChainTipSetWeightParams","ChainTipSetWeightResult","CHAIN_GET_BLOCK","ChainGetBlockParams","ChainGetBlockResult","CHAIN_GET_TIPSET","ChainGetTipSetParams","ChainGetTipSetResult","CHAIN_GET_RANDOMNESS_FROM_TICKETS","ChainGetRandomnessFromTicketsParams","ChainGetRandomnessFromTicketsResult","CHAIN_GET_RANDOMNESS_FROM_BEACON","ChainGetRandomnessFromBeaconParams","ChainGetRandomnessFromBeaconResult","mpool_api","MPOOL_ESTIMATE_GAS_PRICE","MpoolEstimateGasPriceParams","MpoolEstimateGasPriceResult","MPOOL_GET_NONCE","MpoolGetNonceParams","MpoolGetNonceResult","MPOOL_PENDING","MpoolPendingParams","MpoolPendingResult","MPOOL_PUSH","MpoolPushParams","MpoolPushResult","MPOOL_PUSH_MESSAGE","MpoolPushMessageParams","MpoolPushMessageResult","MPOOL_SELECT","MpoolSelectParams","MpoolSelectResult","sync_api","SYNC_CHECK_BAD","SyncCheckBadParams","SyncCheckBadResult","SYNC_MARK_BAD","SyncMarkBadParams","SyncMarkBadResult","SYNC_STATE","SyncStateParams","SyncStateResult","SYNC_SUBMIT_BLOCK","SyncSubmitBlockParams","SyncSubmitBlockResult","wallet_api","WALLET_BALANCE","WalletBalanceParams","WalletBalanceResult","WALLET_DEFAULT_ADDRESS","WalletDefaultAddressParams","WalletDefaultAddressResult","WALLET_EXPORT","WalletExportParams","WalletExportResult","WALLET_HAS","WalletHasParams","WalletHasResult","WALLET_IMPORT","WalletImportParams","WalletImportResult","WALLET_LIST","WalletListParams","WalletListResult","WALLET_NEW","WalletNewParams","WalletNewResult","WALLET_SET_DEFAULT","WalletSetDefaultParams","WalletSetDefaultResult","WALLET_SIGN","WalletSignParams","WalletSignResult","WALLET_SIGN_MESSAGE","WalletSignMessageParams","WalletSignMessageResult","WALLET_VERIFY","WalletVerifyParams","WalletVerifyResult","state_api","STATE_MINER_SECTORS","StateMinerSectorsParams","StateMinerSectorsResult","STATE_CALL","StateCallParams","StateCallResult","STATE_MINER_DEADLINES","StateMinerDeadlinesParams","StateMinerDeadlinesResult","STATE_SECTOR_PRECOMMIT_INFO","StateSectorPrecommitInfoParams","StateSectorPrecommitInfoResult","STATE_MINER_INFO","StateMinerInfoParams","StateMinerInfoResult","STATE_SECTOR_GET_INFO","StateSectorGetInfoParams","StateSectorGetInfoResult","STATE_MINER_PROVING_DEADLINE","StateMinerProvingDeadlineParams","StateMinerProvingDeadlineResult","STATE_MINER_FAULTS","StateMinerFaultsParams","StateMinerFaultsResult","STATE_ALL_MINER_FAULTS","StateAllMinerFaultsParams","StateAllMinerFaultsResult","STATE_MINER_RECOVERIES","StateMinerRecoveriesParams","StateMinerRecoveriesResult","STATE_MINER_PARTITIONS","StateMinerPartitionsParams","StateMinerPartitionsResult","STATE_REPLAY","StateReplayParams","StateReplayResult","STATE_NETWORK_NAME","StateNetworkNameParams","StateNetworkNameResult","STATE_NETWORK_VERSION","StateNetworkVersionParams","StateNetworkVersionResult","STATE_GET_ACTOR","StateGetActorParams","StateGetActorResult","STATE_ACCOUNT_KEY","StateAccountKeyParams","StateAccountKeyResult","STATE_LOOKUP_ID","StateLookupIdParams","StateLookupIdResult","STATE_MARKET_BALANCE","StateMarketBalanceParams","StateMarketBalanceResult","STATE_MARKET_DEALS","StateMarketDealsParams","StateMarketDealsResult","STATE_GET_RECEIPT","StateGetReceiptParams","StateGetReceiptResult","STATE_WAIT_MSG","StateWaitMsgParams","StateWaitMsgResult","MINER_CREATE_BLOCK","MinerCreateBlockParams","MinerCreateBlockResult","STATE_MINER_SECTOR_ALLOCATED","StateMinerSectorAllocatedParams","StateMinerSectorAllocatedResult","STATE_MINER_PRE_COMMIT_DEPOSIT_FOR_POWER","StateMinerPreCommitDepositForPowerParams","StateMinerPreCommitDepositForPowerResult","STATE_MINER_INITIAL_PLEDGE_COLLATERAL","StateMinerInitialPledgeCollateralParams","StateMinerInitialPledgeCollateralResult","MINER_GET_BASE_INFO","MinerGetBaseInfoParams","MinerGetBaseInfoResult","gas_api","GAS_ESTIMATE_FEE_CAP","GasEstimateFeeCapParams","GasEstimateFeeCapResult","GAS_ESTIMATE_GAS_PREMIUM","GasEstimateGasPremiumParams","GasEstimateGasPremiumResult","GAS_ESTIMATE_GAS_LIMIT","GasEstimateGasLimitParams","GasEstimateGasLimitResult","GAS_ESTIMATE_MESSAGE_GAS","GasEstimateMessageGasParams","GasEstimateMessageGasResult","common_api","VERSION","VersionParams","VersionResult","net_api","NET_ADDRS_LISTEN","NetAddrsListenParams","NetAddrsListenResult","Access","Admin","Sign","Write","Read","ACCESS_MAP","check_access","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","erased_serialize","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","from","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize"],"q":["rpc_api","rpc_api::data_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rpc_api","rpc_api::auth_api","","","","","","rpc_api","rpc_api::beacon_api","","","rpc_api","rpc_api::chain_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rpc_api","rpc_api::mpool_api","","","","","","","","","","","","","","","","","","rpc_api","rpc_api::sync_api","","","","","","","","","","","","rpc_api","rpc_api::wallet_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rpc_api","rpc_api::state_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rpc_api","rpc_api::gas_api","","","","","","","","","","","","rpc_api","rpc_api::common_api","","","rpc_api","rpc_api::net_api","","","rpc_api","","","","","","","rpc_api::data_typesrpc_api","","","","","","","","","","","","","","","","rpc_api::data_types","","","","","","","","","","","","","","","",""],"d":["","","","","","This is where you store persistent data, or at least …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","JSON-RPC API definitions Auth API","","","","","","","Beacon API","","","","Chain API","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message Pool API","","","","","","","","","","","","","","","","","","","Sync API","","","","","","","","","","","","","Wallet API","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","State API","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gas API","","","","","","","","","","","","","Common API","","","","Net API","","","","Access levels to be checked against JWT claims","","","","","Access mapping between method names and access levels …","Checks an access enum against provided JWT claimsi":[0,0,1,1,1,0,2,2,2,2,2,2,2,2,2,2,0,3,0,0,4,4,4,0,0,5,5,0,0,6,6,6,6,6,0,0,7,7,0,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,15,10,1,3,4,13,5,14,6,15,7,8,10,11,4,13,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["access",4]],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["serializer",8]],[["ok",3],["error",3],["result",4]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["actorstate",3]]],[[["miningbaseinfo",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]]],"p":[[3,"StreamingData"],[3,"RPCState"],[3,"RPCSyncState"],[3,"BlockMessages"],[3,"Deadline"],[3,"Partition"],[3,"MarketDeal"],[3,"MessageLookup"],[3,"BlockTemplate"],[3,"MiningBaseInfoJson"],[3,"AddrInfo"],[4,"Access"],[3,"MessageSendSpec"],[3,"Fault"],[3,"ActorStateJson"]]},\
"rpc_client":{"doc":"","t":[0,5,5,5,5,5,5,5,5,5,5,5,5,3,12,12,4,13,12,12,12,13,12,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["filecoin_rpc","auth_new","chain_get_block","chain_get_genesis","chain_head","chain_get_message","chain_read_obj","auth_new","block","genesis","head","messages","read_obj","JsonRpcError","code","message","JsonRpcResponse","Result","jsonrpc","result","id","Error","jsonrpc","error","id","call_params","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","to_subset","is_in_subset","to_subset_unchecked","from_subset","deserialize","deserialize"],"q":["rpc_client","rpc_client::filecoin_rpc","","","","","","rpc_client","","","","","","","","","","","rpc_client::JsonRpcResponse","","","rpc_client","rpc_client::JsonRpcResponse","","","rpc_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Filecoin RPC client interface methods","","","","","","","Creates a new JWT Token","Returns a block with specified CID fom chain via RPC","Returns genesis tipset from chain via RPC","Returns canonical head of the chain via RPC","Returns messages with specified CID from chain via RPC","Returns IPLD node with specified CID from chain via RPC","Error object in a response","","","","","","","","","","","","Call an RPC method with params","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,3,3,3,2,4,4,4,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2],"f":[null,[[["authnewparams",6]]],[[["chaingetblockparams",6]]],[[]],[[]],[[["chaingetmessageparams",6]]],[[["chainreadobjparams",6]]],[[["string",3]]],[[["cid",3]]],[[]],[[]],[[["cid",3]]],[[["cid",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]]],"p":[[3,"JsonRpcError"],[4,"JsonRpcResponse"],[13,"Result"],[13,"Error"]]},\
"serialization_tests":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"state_manager":{"doc":"","t":[4,13,13,13,13,13,13,3,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","State","VM","ActorNotFound","ActorStateNotFound","DB","Other","InvocResult","msg","msg_rct","error","MarketBalance","StateManager","new","new_with_publisher","get_network_version","get_actor","blockstore_cloned","blockstore","chain_store","get_network_name","is_miner_slashed","get_miner_work_addr","get_power","get_subscriber","apply_blocks","tipset_state","call","call_with_gas","replay","get_lookback_tipset_for_round","eligible_to_mine","miner_get_base_info","compute_tipset_state","get_receipt","wait_for_message","get_bls_public_key","get_heaviest_balance","get_balance","lookup_id","market_balance","resolve_to_key_addr","miner_has_min_power","validate_chain","get_circulating_supply","get_market_state","MiningBaseInfo","miner_power","network_power","sectors","worker_key","sector_size","prev_beacon_entry","beacon_entries","eligible_for_mining","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","from","from","default","eq","ne","fmt","fmt","source","serialize","serialize","deserialize","deserialize","get_sectors_for_winning_post","get_miner_sector_set","miner_sector_info","precommit_info","get_miner_info","get_miner_faults","get_miner_recoveries","list_miner_actors","get_miner_worker_raw"],"q":["state_manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["State manager error","Error orginating from state","Error from VM execution","Actor for given address not found","Actor state not found at given cid","Error originating from key-value store","Other state manager error","Type to represent invocation of state call results.","","","","External format for returning market balance from state.","State manager handles all interactions with the internal …","","Creates a constructor that passes in a HeadChange …","Returns network version for the given epoch.","Gets actor from given [Cid], if it exists.","Returns the cloned [Arc] of the state manager’s […","Returns a reference to the state manager’s [BlockStore].","Returns reference to the state manager’s [ChainStore].","Returns the network name from the init actor state.","Returns true if miner has been slashed or is considered …","Returns raw work address of a miner given the state root.","Returns specified actor’s claimed power and total …","Subscribes to the [HeadChange]s observed by the state …","Performs the state transition for the tipset and applies …","Returns the pair of (parent state root, message receipt …","runs the given message and returns its result without any …","Computes message on the given [Tipset] state, after …","Replays the given message and returns the result of …","Gets lookback tipset for block validations.","Checks the eligibility of the miner. This is used in the …","Get’s a miner’s base info from state, based on the …","Performs a state transition, and returns the state and …","Returns a message receipt from a given tipset and message …","WaitForMessage blocks until a message appears on chain. …","Returns a bls public key from provided address","Return the heaviest tipset’s balance from self.db for a …","Return the balance of a given address and state_cid","Looks up ID [Address] from the state at the given [Tipset]…","Retrieves market balance in escrow and locked tables.","Similar to <code>resolve_to_key_addr</code> in the vm crate but does …","Checks power actor state for if miner meets consensus …","","Retrieves total circulating supply on the network.","Return the state of Market Actor.","Base miner info needed for the RPC API.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves and generates a vector of sector info for the …","Loads sectors for miner at given [Address].","Returns miner’s sector info for a given index.","Returns the precommitted sector info for a miner’s …","Returns miner info at the given [Tipset]’s state.","Returns a bitfield of all miner’s faulty sectors.","Returns bitfield of miner’s recovering sectors.","Lists all miners that exist in the power actor state at …","Gets miner’s worker address from state."],"i":[0,1,1,1,1,1,1,0,2,2,2,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,5,1,1,1,1,1,2,5,2,5,3,3,3,3,3,3,3,3,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["arc",3],["chainstore",3]]],[[["arc",3],["headchange",4],["chainstore",3],["publisher",3]]],[[["chainepoch",6]],["networkversion",4]],[[["cid",3],["address",3]],[["option",4],["error",4],["result",4]]],[[],["arc",3]],[[]],[[],["arc",3]],[[["cid",3]],[["string",3],["error",4],["result",4]]],[[["cid",3],["address",3]],[["bool",15],["error",4],["result",4]]],[[["address",3],["cid",3]],[["result",4],["address",3],["error",4]]],[[["address",3],["option",4],["cid",3]],[["option",4],["error",4],["result",4]]],[[],[["option",4],["subscriber",3]]],[[["bigint",3],["arc",3],["chainepoch",6],["arc",3],["option",4],["cid",3]],[["box",3],["result",4]]],[[["arc",3],["arc",3]]],[[["unsignedmessage",3],["arc",3],["option",4],["arc",3]]],[[["arc",3],["arc",3],["option",4],["chainmessage",4]]],[[["arc",3],["cid",3],["arc",3]]],[[["chainepoch",6],["arc",3],["tipset",3],["arc",3]]],[[["tipset",3],["arc",3],["address",3]],[["bool",15],["error",4],["result",4]]],[[["address",3],["tipsetkeys",3],["chainepoch",6],["arc",3],["beaconschedule",3]]],[[["arc",3],["option",4],["arc",3]]],[[["cid",3],["tipset",3]]],[[["arc",3],["cid",3],["i64",15]]],[[["cid",3],["address",3]],[["result",4],["error",4]]],[[["address",3]]],[[["cid",3],["address",3]],[["bigint",3],["error",4],["result",4]]],[[["tipset",3],["address",3]],[["result",4],["option",4],["error",4]]],[[["tipset",3],["address",3]],[["error",4],["result",4],["marketbalance",3]]],[[["arc",3],["arc",3],["address",3]]],[[["tipset",3],["address",3]],[["bool",15],["result",4],["box",3]]],[[["arc",3],["i64",15],["tipset",3],["arc",3]]],[[["arc",3],["statetree",3],["chainepoch",6]],[["box",3],["result",4],["tokenamount",6]]],[[["tipset",3]],[["error",4],["state",4],["result",4]]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["dberr",4]]],[[["string",3]]],[[["box",3],["stderror",8]]],[[],["marketbalance",3]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["error",8],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["networkversion",4],["cid",3],["randomness",3],["address",3]],[["vec",3],["result",4],["box",3]]],[[["tipset",3],["option",4],["bitfield",3],["address",3]],[["error",4],["vec",3],["result",4]]],[[["tipset",3],["sectornumber",6],["address",3]],[["option",4],["error",4],["result",4]]],[[["sectornumber",6],["tipset",3],["address",3]],[["sectorprecommitonchaininfo",3],["error",4],["result",4]]],[[["address",3],["tipset",3]],[["minerinfo",3],["box",3],["result",4]]],[[["address",3],["tipset",3]],[["bitfield",3],["result",4],["box",3]]],[[["address",3],["tipset",3]],[["bitfield",3],["result",4],["box",3]]],[[["tipset",3]],[["result",4],["vec",3],["error",4]]],[[["address",3],["cid",3]],[["result",4],["address",3],["error",4]]]],"p":[[4,"Error"],[3,"InvocResult"],[3,"StateManager"],[3,"MiningBaseInfo"],[3,"MarketBalance"]]},\
"state_tree":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11],"n":["StateTree","new","new_from_root","import_state_tree","store","get_actor","set_actor","lookup_id","delete_actor","mutate_actor","register_new_address","snapshot","clear_snapshot","revert_to_snapshot","flush","for_each","export_state_tree","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop"],"q":["state_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["State tree implementation using hamt. This structure is …","","Constructor for a hamt state tree given an IPLD store","Imports a StateTree given an AsyncRead that has data in …","Retrieve store reference to modify db.","Get actor state from an address. Will be resolved to ID …","Set actor state for an address. Will set state at ID …","Get an ID address from any Address","Delete actor for an address. Will resolve to ID address …","Mutate and set actor state for an Address.","Register a new address through the init actor.","Add snapshot layer to stack.","Merges last two snap shot layers.","Revert state cache by removing last snapshot","Flush state tree and return Cid root.","","Exports a StateTree in CAR format given the Cid to the …","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["statetreeversion",4]],[["result",4],["box",3]]],[[["cid",3]],[["result",4],["box",3]]],[[["asyncread",8],["send",8],["unpin",8]]],[[]],[[["address",3]],[["result",4],["option",4],["box",3]]],[[["actorstate",3],["address",3]],[["result",4],["box",3]]],[[["address",3]],[["result",4],["option",4],["box",3]]],[[["address",3]],[["result",4],["box",3]]],[[["address",3]],[["result",4],["box",3]]],[[["address",3]],[["box",3],["result",4],["address",3]]],[[],[["result",4],["string",3]]],[[],[["result",4],["string",3]]],[[],[["result",4],["string",3]]],[[],[["result",4],["cid",3],["box",3]]],[[],[["result",4],["box",3]]],[[["cid",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]]],"p":[[3,"StateTree"]]},\
"statediff":{"doc":"","t":[5],"n":["print_state_diff"],"q":["statediff"],"d":["Prints a diff of the resolved state tree. If the actor’…"],"i":[0],"f":[[[["option",4],["u64",15],["cid",3]],[["result",4],["box",3]]]],"p":[]},\
"test_utils":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"utils":{"doc":"","t":[5,5,5,5,5],"n":["write_to_file","read_file_to_vec","read_file_to_string","get_home_dir","read_toml"],"q":["utils","","","",""],"d":["Writes a string to a specified file. Creates the desired …","Read file as a <code>Vec<u8></code>","Read file as a <code>String</code>.","Gets the home directory of the current system. Will …","Converts a toml file represented as a string to <code>S</code>"],"i":[0,0,0,0,0],"f":[[[["str",15]],["result",6]],[[["str",15]],[["vec",3],["result",6]]],[[["str",15]],[["string",3],["result",6]]],[[],["string",3]],[[["str",15]],["result",6]]],"p":[]}\
}');
initSearch(searchIndex);